
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006a40  08006a40  00016a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc0  08006bc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006bc0  08006bc0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bc0  08006bc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08006c38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08006c38  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c854  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6e  00000000  00000000  0002c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001231b  00000000  00000000  0002faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da16  00000000  00000000  00041dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ab43  00000000  00000000  0004f7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba31c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  000ba36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a24 	.word	0x08006a24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006a24 	.word	0x08006a24

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0010      	movs	r0, r2
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	0019      	movs	r1, r3
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f000 ff0d 	bl	8001064 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fe5d 	bl	8000f14 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 feff 	bl	8001064 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fef5 	bl	8001064 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fe85 	bl	8000f98 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f000 fe7b 	bl	8000f98 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_dadd>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	464f      	mov	r7, r9
 80002b4:	4646      	mov	r6, r8
 80002b6:	46d6      	mov	lr, sl
 80002b8:	000d      	movs	r5, r1
 80002ba:	0004      	movs	r4, r0
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	001f      	movs	r7, r3
 80002c0:	0011      	movs	r1, r2
 80002c2:	0328      	lsls	r0, r5, #12
 80002c4:	0f62      	lsrs	r2, r4, #29
 80002c6:	0a40      	lsrs	r0, r0, #9
 80002c8:	4310      	orrs	r0, r2
 80002ca:	007a      	lsls	r2, r7, #1
 80002cc:	0d52      	lsrs	r2, r2, #21
 80002ce:	00e3      	lsls	r3, r4, #3
 80002d0:	033c      	lsls	r4, r7, #12
 80002d2:	4691      	mov	r9, r2
 80002d4:	0a64      	lsrs	r4, r4, #9
 80002d6:	0ffa      	lsrs	r2, r7, #31
 80002d8:	0f4f      	lsrs	r7, r1, #29
 80002da:	006e      	lsls	r6, r5, #1
 80002dc:	4327      	orrs	r7, r4
 80002de:	4692      	mov	sl, r2
 80002e0:	46b8      	mov	r8, r7
 80002e2:	0d76      	lsrs	r6, r6, #21
 80002e4:	0fed      	lsrs	r5, r5, #31
 80002e6:	00c9      	lsls	r1, r1, #3
 80002e8:	4295      	cmp	r5, r2
 80002ea:	d100      	bne.n	80002ee <__aeabi_dadd+0x3e>
 80002ec:	e099      	b.n	8000422 <__aeabi_dadd+0x172>
 80002ee:	464c      	mov	r4, r9
 80002f0:	1b34      	subs	r4, r6, r4
 80002f2:	46a4      	mov	ip, r4
 80002f4:	2c00      	cmp	r4, #0
 80002f6:	dc00      	bgt.n	80002fa <__aeabi_dadd+0x4a>
 80002f8:	e07c      	b.n	80003f4 <__aeabi_dadd+0x144>
 80002fa:	464a      	mov	r2, r9
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	d100      	bne.n	8000302 <__aeabi_dadd+0x52>
 8000300:	e0b8      	b.n	8000474 <__aeabi_dadd+0x1c4>
 8000302:	4ac5      	ldr	r2, [pc, #788]	; (8000618 <__aeabi_dadd+0x368>)
 8000304:	4296      	cmp	r6, r2
 8000306:	d100      	bne.n	800030a <__aeabi_dadd+0x5a>
 8000308:	e11c      	b.n	8000544 <__aeabi_dadd+0x294>
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	003c      	movs	r4, r7
 800030e:	0412      	lsls	r2, r2, #16
 8000310:	4314      	orrs	r4, r2
 8000312:	46a0      	mov	r8, r4
 8000314:	4662      	mov	r2, ip
 8000316:	2a38      	cmp	r2, #56	; 0x38
 8000318:	dd00      	ble.n	800031c <__aeabi_dadd+0x6c>
 800031a:	e161      	b.n	80005e0 <__aeabi_dadd+0x330>
 800031c:	2a1f      	cmp	r2, #31
 800031e:	dd00      	ble.n	8000322 <__aeabi_dadd+0x72>
 8000320:	e1cc      	b.n	80006bc <__aeabi_dadd+0x40c>
 8000322:	4664      	mov	r4, ip
 8000324:	2220      	movs	r2, #32
 8000326:	1b12      	subs	r2, r2, r4
 8000328:	4644      	mov	r4, r8
 800032a:	4094      	lsls	r4, r2
 800032c:	000f      	movs	r7, r1
 800032e:	46a1      	mov	r9, r4
 8000330:	4664      	mov	r4, ip
 8000332:	4091      	lsls	r1, r2
 8000334:	40e7      	lsrs	r7, r4
 8000336:	464c      	mov	r4, r9
 8000338:	1e4a      	subs	r2, r1, #1
 800033a:	4191      	sbcs	r1, r2
 800033c:	433c      	orrs	r4, r7
 800033e:	4642      	mov	r2, r8
 8000340:	4321      	orrs	r1, r4
 8000342:	4664      	mov	r4, ip
 8000344:	40e2      	lsrs	r2, r4
 8000346:	1a80      	subs	r0, r0, r2
 8000348:	1a5c      	subs	r4, r3, r1
 800034a:	42a3      	cmp	r3, r4
 800034c:	419b      	sbcs	r3, r3
 800034e:	425f      	negs	r7, r3
 8000350:	1bc7      	subs	r7, r0, r7
 8000352:	023b      	lsls	r3, r7, #8
 8000354:	d400      	bmi.n	8000358 <__aeabi_dadd+0xa8>
 8000356:	e0d0      	b.n	80004fa <__aeabi_dadd+0x24a>
 8000358:	027f      	lsls	r7, r7, #9
 800035a:	0a7f      	lsrs	r7, r7, #9
 800035c:	2f00      	cmp	r7, #0
 800035e:	d100      	bne.n	8000362 <__aeabi_dadd+0xb2>
 8000360:	e0ff      	b.n	8000562 <__aeabi_dadd+0x2b2>
 8000362:	0038      	movs	r0, r7
 8000364:	f001 fd64 	bl	8001e30 <__clzsi2>
 8000368:	0001      	movs	r1, r0
 800036a:	3908      	subs	r1, #8
 800036c:	2320      	movs	r3, #32
 800036e:	0022      	movs	r2, r4
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	408f      	lsls	r7, r1
 8000374:	40da      	lsrs	r2, r3
 8000376:	408c      	lsls	r4, r1
 8000378:	4317      	orrs	r7, r2
 800037a:	42b1      	cmp	r1, r6
 800037c:	da00      	bge.n	8000380 <__aeabi_dadd+0xd0>
 800037e:	e0ff      	b.n	8000580 <__aeabi_dadd+0x2d0>
 8000380:	1b89      	subs	r1, r1, r6
 8000382:	1c4b      	adds	r3, r1, #1
 8000384:	2b1f      	cmp	r3, #31
 8000386:	dd00      	ble.n	800038a <__aeabi_dadd+0xda>
 8000388:	e0a8      	b.n	80004dc <__aeabi_dadd+0x22c>
 800038a:	2220      	movs	r2, #32
 800038c:	0039      	movs	r1, r7
 800038e:	1ad2      	subs	r2, r2, r3
 8000390:	0020      	movs	r0, r4
 8000392:	4094      	lsls	r4, r2
 8000394:	4091      	lsls	r1, r2
 8000396:	40d8      	lsrs	r0, r3
 8000398:	1e62      	subs	r2, r4, #1
 800039a:	4194      	sbcs	r4, r2
 800039c:	40df      	lsrs	r7, r3
 800039e:	2600      	movs	r6, #0
 80003a0:	4301      	orrs	r1, r0
 80003a2:	430c      	orrs	r4, r1
 80003a4:	0763      	lsls	r3, r4, #29
 80003a6:	d009      	beq.n	80003bc <__aeabi_dadd+0x10c>
 80003a8:	230f      	movs	r3, #15
 80003aa:	4023      	ands	r3, r4
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d005      	beq.n	80003bc <__aeabi_dadd+0x10c>
 80003b0:	1d23      	adds	r3, r4, #4
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	41a4      	sbcs	r4, r4
 80003b6:	4264      	negs	r4, r4
 80003b8:	193f      	adds	r7, r7, r4
 80003ba:	001c      	movs	r4, r3
 80003bc:	023b      	lsls	r3, r7, #8
 80003be:	d400      	bmi.n	80003c2 <__aeabi_dadd+0x112>
 80003c0:	e09e      	b.n	8000500 <__aeabi_dadd+0x250>
 80003c2:	4b95      	ldr	r3, [pc, #596]	; (8000618 <__aeabi_dadd+0x368>)
 80003c4:	3601      	adds	r6, #1
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d100      	bne.n	80003cc <__aeabi_dadd+0x11c>
 80003ca:	e0b7      	b.n	800053c <__aeabi_dadd+0x28c>
 80003cc:	4a93      	ldr	r2, [pc, #588]	; (800061c <__aeabi_dadd+0x36c>)
 80003ce:	08e4      	lsrs	r4, r4, #3
 80003d0:	4017      	ands	r7, r2
 80003d2:	077b      	lsls	r3, r7, #29
 80003d4:	0571      	lsls	r1, r6, #21
 80003d6:	027f      	lsls	r7, r7, #9
 80003d8:	4323      	orrs	r3, r4
 80003da:	0b3f      	lsrs	r7, r7, #12
 80003dc:	0d4a      	lsrs	r2, r1, #21
 80003de:	0512      	lsls	r2, r2, #20
 80003e0:	433a      	orrs	r2, r7
 80003e2:	07ed      	lsls	r5, r5, #31
 80003e4:	432a      	orrs	r2, r5
 80003e6:	0018      	movs	r0, r3
 80003e8:	0011      	movs	r1, r2
 80003ea:	bce0      	pop	{r5, r6, r7}
 80003ec:	46ba      	mov	sl, r7
 80003ee:	46b1      	mov	r9, r6
 80003f0:	46a8      	mov	r8, r5
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f4:	2c00      	cmp	r4, #0
 80003f6:	d04b      	beq.n	8000490 <__aeabi_dadd+0x1e0>
 80003f8:	464c      	mov	r4, r9
 80003fa:	1ba4      	subs	r4, r4, r6
 80003fc:	46a4      	mov	ip, r4
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d000      	beq.n	8000404 <__aeabi_dadd+0x154>
 8000402:	e123      	b.n	800064c <__aeabi_dadd+0x39c>
 8000404:	0004      	movs	r4, r0
 8000406:	431c      	orrs	r4, r3
 8000408:	d100      	bne.n	800040c <__aeabi_dadd+0x15c>
 800040a:	e1af      	b.n	800076c <__aeabi_dadd+0x4bc>
 800040c:	4662      	mov	r2, ip
 800040e:	1e54      	subs	r4, r2, #1
 8000410:	2a01      	cmp	r2, #1
 8000412:	d100      	bne.n	8000416 <__aeabi_dadd+0x166>
 8000414:	e215      	b.n	8000842 <__aeabi_dadd+0x592>
 8000416:	4d80      	ldr	r5, [pc, #512]	; (8000618 <__aeabi_dadd+0x368>)
 8000418:	45ac      	cmp	ip, r5
 800041a:	d100      	bne.n	800041e <__aeabi_dadd+0x16e>
 800041c:	e1c8      	b.n	80007b0 <__aeabi_dadd+0x500>
 800041e:	46a4      	mov	ip, r4
 8000420:	e11b      	b.n	800065a <__aeabi_dadd+0x3aa>
 8000422:	464a      	mov	r2, r9
 8000424:	1ab2      	subs	r2, r6, r2
 8000426:	4694      	mov	ip, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	dc00      	bgt.n	800042e <__aeabi_dadd+0x17e>
 800042c:	e0ac      	b.n	8000588 <__aeabi_dadd+0x2d8>
 800042e:	464a      	mov	r2, r9
 8000430:	2a00      	cmp	r2, #0
 8000432:	d043      	beq.n	80004bc <__aeabi_dadd+0x20c>
 8000434:	4a78      	ldr	r2, [pc, #480]	; (8000618 <__aeabi_dadd+0x368>)
 8000436:	4296      	cmp	r6, r2
 8000438:	d100      	bne.n	800043c <__aeabi_dadd+0x18c>
 800043a:	e1af      	b.n	800079c <__aeabi_dadd+0x4ec>
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	003c      	movs	r4, r7
 8000440:	0412      	lsls	r2, r2, #16
 8000442:	4314      	orrs	r4, r2
 8000444:	46a0      	mov	r8, r4
 8000446:	4662      	mov	r2, ip
 8000448:	2a38      	cmp	r2, #56	; 0x38
 800044a:	dc67      	bgt.n	800051c <__aeabi_dadd+0x26c>
 800044c:	2a1f      	cmp	r2, #31
 800044e:	dc00      	bgt.n	8000452 <__aeabi_dadd+0x1a2>
 8000450:	e15f      	b.n	8000712 <__aeabi_dadd+0x462>
 8000452:	4647      	mov	r7, r8
 8000454:	3a20      	subs	r2, #32
 8000456:	40d7      	lsrs	r7, r2
 8000458:	4662      	mov	r2, ip
 800045a:	2a20      	cmp	r2, #32
 800045c:	d005      	beq.n	800046a <__aeabi_dadd+0x1ba>
 800045e:	4664      	mov	r4, ip
 8000460:	2240      	movs	r2, #64	; 0x40
 8000462:	1b12      	subs	r2, r2, r4
 8000464:	4644      	mov	r4, r8
 8000466:	4094      	lsls	r4, r2
 8000468:	4321      	orrs	r1, r4
 800046a:	1e4a      	subs	r2, r1, #1
 800046c:	4191      	sbcs	r1, r2
 800046e:	000c      	movs	r4, r1
 8000470:	433c      	orrs	r4, r7
 8000472:	e057      	b.n	8000524 <__aeabi_dadd+0x274>
 8000474:	003a      	movs	r2, r7
 8000476:	430a      	orrs	r2, r1
 8000478:	d100      	bne.n	800047c <__aeabi_dadd+0x1cc>
 800047a:	e105      	b.n	8000688 <__aeabi_dadd+0x3d8>
 800047c:	0022      	movs	r2, r4
 800047e:	3a01      	subs	r2, #1
 8000480:	2c01      	cmp	r4, #1
 8000482:	d100      	bne.n	8000486 <__aeabi_dadd+0x1d6>
 8000484:	e182      	b.n	800078c <__aeabi_dadd+0x4dc>
 8000486:	4c64      	ldr	r4, [pc, #400]	; (8000618 <__aeabi_dadd+0x368>)
 8000488:	45a4      	cmp	ip, r4
 800048a:	d05b      	beq.n	8000544 <__aeabi_dadd+0x294>
 800048c:	4694      	mov	ip, r2
 800048e:	e741      	b.n	8000314 <__aeabi_dadd+0x64>
 8000490:	4c63      	ldr	r4, [pc, #396]	; (8000620 <__aeabi_dadd+0x370>)
 8000492:	1c77      	adds	r7, r6, #1
 8000494:	4227      	tst	r7, r4
 8000496:	d000      	beq.n	800049a <__aeabi_dadd+0x1ea>
 8000498:	e0c4      	b.n	8000624 <__aeabi_dadd+0x374>
 800049a:	0004      	movs	r4, r0
 800049c:	431c      	orrs	r4, r3
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d000      	beq.n	80004a4 <__aeabi_dadd+0x1f4>
 80004a2:	e169      	b.n	8000778 <__aeabi_dadd+0x4c8>
 80004a4:	2c00      	cmp	r4, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_dadd+0x1fa>
 80004a8:	e1bf      	b.n	800082a <__aeabi_dadd+0x57a>
 80004aa:	4644      	mov	r4, r8
 80004ac:	430c      	orrs	r4, r1
 80004ae:	d000      	beq.n	80004b2 <__aeabi_dadd+0x202>
 80004b0:	e1d0      	b.n	8000854 <__aeabi_dadd+0x5a4>
 80004b2:	0742      	lsls	r2, r0, #29
 80004b4:	08db      	lsrs	r3, r3, #3
 80004b6:	4313      	orrs	r3, r2
 80004b8:	08c0      	lsrs	r0, r0, #3
 80004ba:	e029      	b.n	8000510 <__aeabi_dadd+0x260>
 80004bc:	003a      	movs	r2, r7
 80004be:	430a      	orrs	r2, r1
 80004c0:	d100      	bne.n	80004c4 <__aeabi_dadd+0x214>
 80004c2:	e170      	b.n	80007a6 <__aeabi_dadd+0x4f6>
 80004c4:	4662      	mov	r2, ip
 80004c6:	4664      	mov	r4, ip
 80004c8:	3a01      	subs	r2, #1
 80004ca:	2c01      	cmp	r4, #1
 80004cc:	d100      	bne.n	80004d0 <__aeabi_dadd+0x220>
 80004ce:	e0e0      	b.n	8000692 <__aeabi_dadd+0x3e2>
 80004d0:	4c51      	ldr	r4, [pc, #324]	; (8000618 <__aeabi_dadd+0x368>)
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d100      	bne.n	80004d8 <__aeabi_dadd+0x228>
 80004d6:	e161      	b.n	800079c <__aeabi_dadd+0x4ec>
 80004d8:	4694      	mov	ip, r2
 80004da:	e7b4      	b.n	8000446 <__aeabi_dadd+0x196>
 80004dc:	003a      	movs	r2, r7
 80004de:	391f      	subs	r1, #31
 80004e0:	40ca      	lsrs	r2, r1
 80004e2:	0011      	movs	r1, r2
 80004e4:	2b20      	cmp	r3, #32
 80004e6:	d003      	beq.n	80004f0 <__aeabi_dadd+0x240>
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	409f      	lsls	r7, r3
 80004ee:	433c      	orrs	r4, r7
 80004f0:	1e63      	subs	r3, r4, #1
 80004f2:	419c      	sbcs	r4, r3
 80004f4:	2700      	movs	r7, #0
 80004f6:	2600      	movs	r6, #0
 80004f8:	430c      	orrs	r4, r1
 80004fa:	0763      	lsls	r3, r4, #29
 80004fc:	d000      	beq.n	8000500 <__aeabi_dadd+0x250>
 80004fe:	e753      	b.n	80003a8 <__aeabi_dadd+0xf8>
 8000500:	46b4      	mov	ip, r6
 8000502:	08e4      	lsrs	r4, r4, #3
 8000504:	077b      	lsls	r3, r7, #29
 8000506:	4323      	orrs	r3, r4
 8000508:	08f8      	lsrs	r0, r7, #3
 800050a:	4a43      	ldr	r2, [pc, #268]	; (8000618 <__aeabi_dadd+0x368>)
 800050c:	4594      	cmp	ip, r2
 800050e:	d01d      	beq.n	800054c <__aeabi_dadd+0x29c>
 8000510:	4662      	mov	r2, ip
 8000512:	0307      	lsls	r7, r0, #12
 8000514:	0552      	lsls	r2, r2, #21
 8000516:	0b3f      	lsrs	r7, r7, #12
 8000518:	0d52      	lsrs	r2, r2, #21
 800051a:	e760      	b.n	80003de <__aeabi_dadd+0x12e>
 800051c:	4644      	mov	r4, r8
 800051e:	430c      	orrs	r4, r1
 8000520:	1e62      	subs	r2, r4, #1
 8000522:	4194      	sbcs	r4, r2
 8000524:	18e4      	adds	r4, r4, r3
 8000526:	429c      	cmp	r4, r3
 8000528:	419b      	sbcs	r3, r3
 800052a:	425f      	negs	r7, r3
 800052c:	183f      	adds	r7, r7, r0
 800052e:	023b      	lsls	r3, r7, #8
 8000530:	d5e3      	bpl.n	80004fa <__aeabi_dadd+0x24a>
 8000532:	4b39      	ldr	r3, [pc, #228]	; (8000618 <__aeabi_dadd+0x368>)
 8000534:	3601      	adds	r6, #1
 8000536:	429e      	cmp	r6, r3
 8000538:	d000      	beq.n	800053c <__aeabi_dadd+0x28c>
 800053a:	e0b5      	b.n	80006a8 <__aeabi_dadd+0x3f8>
 800053c:	0032      	movs	r2, r6
 800053e:	2700      	movs	r7, #0
 8000540:	2300      	movs	r3, #0
 8000542:	e74c      	b.n	80003de <__aeabi_dadd+0x12e>
 8000544:	0742      	lsls	r2, r0, #29
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	4313      	orrs	r3, r2
 800054a:	08c0      	lsrs	r0, r0, #3
 800054c:	001a      	movs	r2, r3
 800054e:	4302      	orrs	r2, r0
 8000550:	d100      	bne.n	8000554 <__aeabi_dadd+0x2a4>
 8000552:	e1e1      	b.n	8000918 <__aeabi_dadd+0x668>
 8000554:	2780      	movs	r7, #128	; 0x80
 8000556:	033f      	lsls	r7, r7, #12
 8000558:	4307      	orrs	r7, r0
 800055a:	033f      	lsls	r7, r7, #12
 800055c:	4a2e      	ldr	r2, [pc, #184]	; (8000618 <__aeabi_dadd+0x368>)
 800055e:	0b3f      	lsrs	r7, r7, #12
 8000560:	e73d      	b.n	80003de <__aeabi_dadd+0x12e>
 8000562:	0020      	movs	r0, r4
 8000564:	f001 fc64 	bl	8001e30 <__clzsi2>
 8000568:	0001      	movs	r1, r0
 800056a:	3118      	adds	r1, #24
 800056c:	291f      	cmp	r1, #31
 800056e:	dc00      	bgt.n	8000572 <__aeabi_dadd+0x2c2>
 8000570:	e6fc      	b.n	800036c <__aeabi_dadd+0xbc>
 8000572:	3808      	subs	r0, #8
 8000574:	4084      	lsls	r4, r0
 8000576:	0027      	movs	r7, r4
 8000578:	2400      	movs	r4, #0
 800057a:	42b1      	cmp	r1, r6
 800057c:	db00      	blt.n	8000580 <__aeabi_dadd+0x2d0>
 800057e:	e6ff      	b.n	8000380 <__aeabi_dadd+0xd0>
 8000580:	4a26      	ldr	r2, [pc, #152]	; (800061c <__aeabi_dadd+0x36c>)
 8000582:	1a76      	subs	r6, r6, r1
 8000584:	4017      	ands	r7, r2
 8000586:	e70d      	b.n	80003a4 <__aeabi_dadd+0xf4>
 8000588:	2a00      	cmp	r2, #0
 800058a:	d02f      	beq.n	80005ec <__aeabi_dadd+0x33c>
 800058c:	464a      	mov	r2, r9
 800058e:	1b92      	subs	r2, r2, r6
 8000590:	4694      	mov	ip, r2
 8000592:	2e00      	cmp	r6, #0
 8000594:	d100      	bne.n	8000598 <__aeabi_dadd+0x2e8>
 8000596:	e0ad      	b.n	80006f4 <__aeabi_dadd+0x444>
 8000598:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <__aeabi_dadd+0x368>)
 800059a:	4591      	cmp	r9, r2
 800059c:	d100      	bne.n	80005a0 <__aeabi_dadd+0x2f0>
 800059e:	e10f      	b.n	80007c0 <__aeabi_dadd+0x510>
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	0412      	lsls	r2, r2, #16
 80005a4:	4310      	orrs	r0, r2
 80005a6:	4662      	mov	r2, ip
 80005a8:	2a38      	cmp	r2, #56	; 0x38
 80005aa:	dd00      	ble.n	80005ae <__aeabi_dadd+0x2fe>
 80005ac:	e10f      	b.n	80007ce <__aeabi_dadd+0x51e>
 80005ae:	2a1f      	cmp	r2, #31
 80005b0:	dd00      	ble.n	80005b4 <__aeabi_dadd+0x304>
 80005b2:	e180      	b.n	80008b6 <__aeabi_dadd+0x606>
 80005b4:	4664      	mov	r4, ip
 80005b6:	2220      	movs	r2, #32
 80005b8:	001e      	movs	r6, r3
 80005ba:	1b12      	subs	r2, r2, r4
 80005bc:	4667      	mov	r7, ip
 80005be:	0004      	movs	r4, r0
 80005c0:	4093      	lsls	r3, r2
 80005c2:	4094      	lsls	r4, r2
 80005c4:	40fe      	lsrs	r6, r7
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	4193      	sbcs	r3, r2
 80005ca:	40f8      	lsrs	r0, r7
 80005cc:	4334      	orrs	r4, r6
 80005ce:	431c      	orrs	r4, r3
 80005d0:	4480      	add	r8, r0
 80005d2:	1864      	adds	r4, r4, r1
 80005d4:	428c      	cmp	r4, r1
 80005d6:	41bf      	sbcs	r7, r7
 80005d8:	427f      	negs	r7, r7
 80005da:	464e      	mov	r6, r9
 80005dc:	4447      	add	r7, r8
 80005de:	e7a6      	b.n	800052e <__aeabi_dadd+0x27e>
 80005e0:	4642      	mov	r2, r8
 80005e2:	430a      	orrs	r2, r1
 80005e4:	0011      	movs	r1, r2
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	4191      	sbcs	r1, r2
 80005ea:	e6ad      	b.n	8000348 <__aeabi_dadd+0x98>
 80005ec:	4c0c      	ldr	r4, [pc, #48]	; (8000620 <__aeabi_dadd+0x370>)
 80005ee:	1c72      	adds	r2, r6, #1
 80005f0:	4222      	tst	r2, r4
 80005f2:	d000      	beq.n	80005f6 <__aeabi_dadd+0x346>
 80005f4:	e0a1      	b.n	800073a <__aeabi_dadd+0x48a>
 80005f6:	0002      	movs	r2, r0
 80005f8:	431a      	orrs	r2, r3
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d000      	beq.n	8000600 <__aeabi_dadd+0x350>
 80005fe:	e0fa      	b.n	80007f6 <__aeabi_dadd+0x546>
 8000600:	2a00      	cmp	r2, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x356>
 8000604:	e145      	b.n	8000892 <__aeabi_dadd+0x5e2>
 8000606:	003a      	movs	r2, r7
 8000608:	430a      	orrs	r2, r1
 800060a:	d000      	beq.n	800060e <__aeabi_dadd+0x35e>
 800060c:	e146      	b.n	800089c <__aeabi_dadd+0x5ec>
 800060e:	0742      	lsls	r2, r0, #29
 8000610:	08db      	lsrs	r3, r3, #3
 8000612:	4313      	orrs	r3, r2
 8000614:	08c0      	lsrs	r0, r0, #3
 8000616:	e77b      	b.n	8000510 <__aeabi_dadd+0x260>
 8000618:	000007ff 	.word	0x000007ff
 800061c:	ff7fffff 	.word	0xff7fffff
 8000620:	000007fe 	.word	0x000007fe
 8000624:	4647      	mov	r7, r8
 8000626:	1a5c      	subs	r4, r3, r1
 8000628:	1bc2      	subs	r2, r0, r7
 800062a:	42a3      	cmp	r3, r4
 800062c:	41bf      	sbcs	r7, r7
 800062e:	427f      	negs	r7, r7
 8000630:	46b9      	mov	r9, r7
 8000632:	0017      	movs	r7, r2
 8000634:	464a      	mov	r2, r9
 8000636:	1abf      	subs	r7, r7, r2
 8000638:	023a      	lsls	r2, r7, #8
 800063a:	d500      	bpl.n	800063e <__aeabi_dadd+0x38e>
 800063c:	e08d      	b.n	800075a <__aeabi_dadd+0x4aa>
 800063e:	0023      	movs	r3, r4
 8000640:	433b      	orrs	r3, r7
 8000642:	d000      	beq.n	8000646 <__aeabi_dadd+0x396>
 8000644:	e68a      	b.n	800035c <__aeabi_dadd+0xac>
 8000646:	2000      	movs	r0, #0
 8000648:	2500      	movs	r5, #0
 800064a:	e761      	b.n	8000510 <__aeabi_dadd+0x260>
 800064c:	4cb4      	ldr	r4, [pc, #720]	; (8000920 <__aeabi_dadd+0x670>)
 800064e:	45a1      	cmp	r9, r4
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x3a4>
 8000652:	e0ad      	b.n	80007b0 <__aeabi_dadd+0x500>
 8000654:	2480      	movs	r4, #128	; 0x80
 8000656:	0424      	lsls	r4, r4, #16
 8000658:	4320      	orrs	r0, r4
 800065a:	4664      	mov	r4, ip
 800065c:	2c38      	cmp	r4, #56	; 0x38
 800065e:	dc3d      	bgt.n	80006dc <__aeabi_dadd+0x42c>
 8000660:	4662      	mov	r2, ip
 8000662:	2c1f      	cmp	r4, #31
 8000664:	dd00      	ble.n	8000668 <__aeabi_dadd+0x3b8>
 8000666:	e0b7      	b.n	80007d8 <__aeabi_dadd+0x528>
 8000668:	2520      	movs	r5, #32
 800066a:	001e      	movs	r6, r3
 800066c:	1b2d      	subs	r5, r5, r4
 800066e:	0004      	movs	r4, r0
 8000670:	40ab      	lsls	r3, r5
 8000672:	40ac      	lsls	r4, r5
 8000674:	40d6      	lsrs	r6, r2
 8000676:	40d0      	lsrs	r0, r2
 8000678:	4642      	mov	r2, r8
 800067a:	1e5d      	subs	r5, r3, #1
 800067c:	41ab      	sbcs	r3, r5
 800067e:	4334      	orrs	r4, r6
 8000680:	1a12      	subs	r2, r2, r0
 8000682:	4690      	mov	r8, r2
 8000684:	4323      	orrs	r3, r4
 8000686:	e02c      	b.n	80006e2 <__aeabi_dadd+0x432>
 8000688:	0742      	lsls	r2, r0, #29
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	4313      	orrs	r3, r2
 800068e:	08c0      	lsrs	r0, r0, #3
 8000690:	e73b      	b.n	800050a <__aeabi_dadd+0x25a>
 8000692:	185c      	adds	r4, r3, r1
 8000694:	429c      	cmp	r4, r3
 8000696:	419b      	sbcs	r3, r3
 8000698:	4440      	add	r0, r8
 800069a:	425b      	negs	r3, r3
 800069c:	18c7      	adds	r7, r0, r3
 800069e:	2601      	movs	r6, #1
 80006a0:	023b      	lsls	r3, r7, #8
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_dadd+0x3f6>
 80006a4:	e729      	b.n	80004fa <__aeabi_dadd+0x24a>
 80006a6:	2602      	movs	r6, #2
 80006a8:	4a9e      	ldr	r2, [pc, #632]	; (8000924 <__aeabi_dadd+0x674>)
 80006aa:	0863      	lsrs	r3, r4, #1
 80006ac:	4017      	ands	r7, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	4014      	ands	r4, r2
 80006b2:	431c      	orrs	r4, r3
 80006b4:	07fb      	lsls	r3, r7, #31
 80006b6:	431c      	orrs	r4, r3
 80006b8:	087f      	lsrs	r7, r7, #1
 80006ba:	e673      	b.n	80003a4 <__aeabi_dadd+0xf4>
 80006bc:	4644      	mov	r4, r8
 80006be:	3a20      	subs	r2, #32
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	4662      	mov	r2, ip
 80006c4:	2a20      	cmp	r2, #32
 80006c6:	d005      	beq.n	80006d4 <__aeabi_dadd+0x424>
 80006c8:	4667      	mov	r7, ip
 80006ca:	2240      	movs	r2, #64	; 0x40
 80006cc:	1bd2      	subs	r2, r2, r7
 80006ce:	4647      	mov	r7, r8
 80006d0:	4097      	lsls	r7, r2
 80006d2:	4339      	orrs	r1, r7
 80006d4:	1e4a      	subs	r2, r1, #1
 80006d6:	4191      	sbcs	r1, r2
 80006d8:	4321      	orrs	r1, r4
 80006da:	e635      	b.n	8000348 <__aeabi_dadd+0x98>
 80006dc:	4303      	orrs	r3, r0
 80006de:	1e58      	subs	r0, r3, #1
 80006e0:	4183      	sbcs	r3, r0
 80006e2:	1acc      	subs	r4, r1, r3
 80006e4:	42a1      	cmp	r1, r4
 80006e6:	41bf      	sbcs	r7, r7
 80006e8:	4643      	mov	r3, r8
 80006ea:	427f      	negs	r7, r7
 80006ec:	4655      	mov	r5, sl
 80006ee:	464e      	mov	r6, r9
 80006f0:	1bdf      	subs	r7, r3, r7
 80006f2:	e62e      	b.n	8000352 <__aeabi_dadd+0xa2>
 80006f4:	0002      	movs	r2, r0
 80006f6:	431a      	orrs	r2, r3
 80006f8:	d100      	bne.n	80006fc <__aeabi_dadd+0x44c>
 80006fa:	e0bd      	b.n	8000878 <__aeabi_dadd+0x5c8>
 80006fc:	4662      	mov	r2, ip
 80006fe:	4664      	mov	r4, ip
 8000700:	3a01      	subs	r2, #1
 8000702:	2c01      	cmp	r4, #1
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x458>
 8000706:	e0e5      	b.n	80008d4 <__aeabi_dadd+0x624>
 8000708:	4c85      	ldr	r4, [pc, #532]	; (8000920 <__aeabi_dadd+0x670>)
 800070a:	45a4      	cmp	ip, r4
 800070c:	d058      	beq.n	80007c0 <__aeabi_dadd+0x510>
 800070e:	4694      	mov	ip, r2
 8000710:	e749      	b.n	80005a6 <__aeabi_dadd+0x2f6>
 8000712:	4664      	mov	r4, ip
 8000714:	2220      	movs	r2, #32
 8000716:	1b12      	subs	r2, r2, r4
 8000718:	4644      	mov	r4, r8
 800071a:	4094      	lsls	r4, r2
 800071c:	000f      	movs	r7, r1
 800071e:	46a1      	mov	r9, r4
 8000720:	4664      	mov	r4, ip
 8000722:	4091      	lsls	r1, r2
 8000724:	40e7      	lsrs	r7, r4
 8000726:	464c      	mov	r4, r9
 8000728:	1e4a      	subs	r2, r1, #1
 800072a:	4191      	sbcs	r1, r2
 800072c:	433c      	orrs	r4, r7
 800072e:	4642      	mov	r2, r8
 8000730:	430c      	orrs	r4, r1
 8000732:	4661      	mov	r1, ip
 8000734:	40ca      	lsrs	r2, r1
 8000736:	1880      	adds	r0, r0, r2
 8000738:	e6f4      	b.n	8000524 <__aeabi_dadd+0x274>
 800073a:	4c79      	ldr	r4, [pc, #484]	; (8000920 <__aeabi_dadd+0x670>)
 800073c:	42a2      	cmp	r2, r4
 800073e:	d100      	bne.n	8000742 <__aeabi_dadd+0x492>
 8000740:	e6fd      	b.n	800053e <__aeabi_dadd+0x28e>
 8000742:	1859      	adds	r1, r3, r1
 8000744:	4299      	cmp	r1, r3
 8000746:	419b      	sbcs	r3, r3
 8000748:	4440      	add	r0, r8
 800074a:	425f      	negs	r7, r3
 800074c:	19c7      	adds	r7, r0, r7
 800074e:	07fc      	lsls	r4, r7, #31
 8000750:	0849      	lsrs	r1, r1, #1
 8000752:	0016      	movs	r6, r2
 8000754:	430c      	orrs	r4, r1
 8000756:	087f      	lsrs	r7, r7, #1
 8000758:	e6cf      	b.n	80004fa <__aeabi_dadd+0x24a>
 800075a:	1acc      	subs	r4, r1, r3
 800075c:	42a1      	cmp	r1, r4
 800075e:	41bf      	sbcs	r7, r7
 8000760:	4643      	mov	r3, r8
 8000762:	427f      	negs	r7, r7
 8000764:	1a18      	subs	r0, r3, r0
 8000766:	4655      	mov	r5, sl
 8000768:	1bc7      	subs	r7, r0, r7
 800076a:	e5f7      	b.n	800035c <__aeabi_dadd+0xac>
 800076c:	08c9      	lsrs	r1, r1, #3
 800076e:	077b      	lsls	r3, r7, #29
 8000770:	4655      	mov	r5, sl
 8000772:	430b      	orrs	r3, r1
 8000774:	08f8      	lsrs	r0, r7, #3
 8000776:	e6c8      	b.n	800050a <__aeabi_dadd+0x25a>
 8000778:	2c00      	cmp	r4, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x4ce>
 800077c:	e081      	b.n	8000882 <__aeabi_dadd+0x5d2>
 800077e:	4643      	mov	r3, r8
 8000780:	430b      	orrs	r3, r1
 8000782:	d115      	bne.n	80007b0 <__aeabi_dadd+0x500>
 8000784:	2080      	movs	r0, #128	; 0x80
 8000786:	2500      	movs	r5, #0
 8000788:	0300      	lsls	r0, r0, #12
 800078a:	e6e3      	b.n	8000554 <__aeabi_dadd+0x2a4>
 800078c:	1a5c      	subs	r4, r3, r1
 800078e:	42a3      	cmp	r3, r4
 8000790:	419b      	sbcs	r3, r3
 8000792:	1bc7      	subs	r7, r0, r7
 8000794:	425b      	negs	r3, r3
 8000796:	2601      	movs	r6, #1
 8000798:	1aff      	subs	r7, r7, r3
 800079a:	e5da      	b.n	8000352 <__aeabi_dadd+0xa2>
 800079c:	0742      	lsls	r2, r0, #29
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	08c0      	lsrs	r0, r0, #3
 80007a4:	e6d2      	b.n	800054c <__aeabi_dadd+0x29c>
 80007a6:	0742      	lsls	r2, r0, #29
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	08c0      	lsrs	r0, r0, #3
 80007ae:	e6ac      	b.n	800050a <__aeabi_dadd+0x25a>
 80007b0:	4643      	mov	r3, r8
 80007b2:	4642      	mov	r2, r8
 80007b4:	08c9      	lsrs	r1, r1, #3
 80007b6:	075b      	lsls	r3, r3, #29
 80007b8:	4655      	mov	r5, sl
 80007ba:	430b      	orrs	r3, r1
 80007bc:	08d0      	lsrs	r0, r2, #3
 80007be:	e6c5      	b.n	800054c <__aeabi_dadd+0x29c>
 80007c0:	4643      	mov	r3, r8
 80007c2:	4642      	mov	r2, r8
 80007c4:	075b      	lsls	r3, r3, #29
 80007c6:	08c9      	lsrs	r1, r1, #3
 80007c8:	430b      	orrs	r3, r1
 80007ca:	08d0      	lsrs	r0, r2, #3
 80007cc:	e6be      	b.n	800054c <__aeabi_dadd+0x29c>
 80007ce:	4303      	orrs	r3, r0
 80007d0:	001c      	movs	r4, r3
 80007d2:	1e63      	subs	r3, r4, #1
 80007d4:	419c      	sbcs	r4, r3
 80007d6:	e6fc      	b.n	80005d2 <__aeabi_dadd+0x322>
 80007d8:	0002      	movs	r2, r0
 80007da:	3c20      	subs	r4, #32
 80007dc:	40e2      	lsrs	r2, r4
 80007de:	0014      	movs	r4, r2
 80007e0:	4662      	mov	r2, ip
 80007e2:	2a20      	cmp	r2, #32
 80007e4:	d003      	beq.n	80007ee <__aeabi_dadd+0x53e>
 80007e6:	2540      	movs	r5, #64	; 0x40
 80007e8:	1aad      	subs	r5, r5, r2
 80007ea:	40a8      	lsls	r0, r5
 80007ec:	4303      	orrs	r3, r0
 80007ee:	1e58      	subs	r0, r3, #1
 80007f0:	4183      	sbcs	r3, r0
 80007f2:	4323      	orrs	r3, r4
 80007f4:	e775      	b.n	80006e2 <__aeabi_dadd+0x432>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d0e2      	beq.n	80007c0 <__aeabi_dadd+0x510>
 80007fa:	003a      	movs	r2, r7
 80007fc:	430a      	orrs	r2, r1
 80007fe:	d0cd      	beq.n	800079c <__aeabi_dadd+0x4ec>
 8000800:	0742      	lsls	r2, r0, #29
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	4313      	orrs	r3, r2
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	0312      	lsls	r2, r2, #12
 800080c:	4210      	tst	r0, r2
 800080e:	d006      	beq.n	800081e <__aeabi_dadd+0x56e>
 8000810:	08fc      	lsrs	r4, r7, #3
 8000812:	4214      	tst	r4, r2
 8000814:	d103      	bne.n	800081e <__aeabi_dadd+0x56e>
 8000816:	0020      	movs	r0, r4
 8000818:	08cb      	lsrs	r3, r1, #3
 800081a:	077a      	lsls	r2, r7, #29
 800081c:	4313      	orrs	r3, r2
 800081e:	0f5a      	lsrs	r2, r3, #29
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	0752      	lsls	r2, r2, #29
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	4313      	orrs	r3, r2
 8000828:	e690      	b.n	800054c <__aeabi_dadd+0x29c>
 800082a:	4643      	mov	r3, r8
 800082c:	430b      	orrs	r3, r1
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x582>
 8000830:	e709      	b.n	8000646 <__aeabi_dadd+0x396>
 8000832:	4643      	mov	r3, r8
 8000834:	4642      	mov	r2, r8
 8000836:	08c9      	lsrs	r1, r1, #3
 8000838:	075b      	lsls	r3, r3, #29
 800083a:	4655      	mov	r5, sl
 800083c:	430b      	orrs	r3, r1
 800083e:	08d0      	lsrs	r0, r2, #3
 8000840:	e666      	b.n	8000510 <__aeabi_dadd+0x260>
 8000842:	1acc      	subs	r4, r1, r3
 8000844:	42a1      	cmp	r1, r4
 8000846:	4189      	sbcs	r1, r1
 8000848:	1a3f      	subs	r7, r7, r0
 800084a:	4249      	negs	r1, r1
 800084c:	4655      	mov	r5, sl
 800084e:	2601      	movs	r6, #1
 8000850:	1a7f      	subs	r7, r7, r1
 8000852:	e57e      	b.n	8000352 <__aeabi_dadd+0xa2>
 8000854:	4642      	mov	r2, r8
 8000856:	1a5c      	subs	r4, r3, r1
 8000858:	1a87      	subs	r7, r0, r2
 800085a:	42a3      	cmp	r3, r4
 800085c:	4192      	sbcs	r2, r2
 800085e:	4252      	negs	r2, r2
 8000860:	1abf      	subs	r7, r7, r2
 8000862:	023a      	lsls	r2, r7, #8
 8000864:	d53d      	bpl.n	80008e2 <__aeabi_dadd+0x632>
 8000866:	1acc      	subs	r4, r1, r3
 8000868:	42a1      	cmp	r1, r4
 800086a:	4189      	sbcs	r1, r1
 800086c:	4643      	mov	r3, r8
 800086e:	4249      	negs	r1, r1
 8000870:	1a1f      	subs	r7, r3, r0
 8000872:	4655      	mov	r5, sl
 8000874:	1a7f      	subs	r7, r7, r1
 8000876:	e595      	b.n	80003a4 <__aeabi_dadd+0xf4>
 8000878:	077b      	lsls	r3, r7, #29
 800087a:	08c9      	lsrs	r1, r1, #3
 800087c:	430b      	orrs	r3, r1
 800087e:	08f8      	lsrs	r0, r7, #3
 8000880:	e643      	b.n	800050a <__aeabi_dadd+0x25a>
 8000882:	4644      	mov	r4, r8
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	430c      	orrs	r4, r1
 8000888:	d130      	bne.n	80008ec <__aeabi_dadd+0x63c>
 800088a:	0742      	lsls	r2, r0, #29
 800088c:	4313      	orrs	r3, r2
 800088e:	08c0      	lsrs	r0, r0, #3
 8000890:	e65c      	b.n	800054c <__aeabi_dadd+0x29c>
 8000892:	077b      	lsls	r3, r7, #29
 8000894:	08c9      	lsrs	r1, r1, #3
 8000896:	430b      	orrs	r3, r1
 8000898:	08f8      	lsrs	r0, r7, #3
 800089a:	e639      	b.n	8000510 <__aeabi_dadd+0x260>
 800089c:	185c      	adds	r4, r3, r1
 800089e:	429c      	cmp	r4, r3
 80008a0:	419b      	sbcs	r3, r3
 80008a2:	4440      	add	r0, r8
 80008a4:	425b      	negs	r3, r3
 80008a6:	18c7      	adds	r7, r0, r3
 80008a8:	023b      	lsls	r3, r7, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x5fe>
 80008ac:	e625      	b.n	80004fa <__aeabi_dadd+0x24a>
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <__aeabi_dadd+0x674>)
 80008b0:	2601      	movs	r6, #1
 80008b2:	401f      	ands	r7, r3
 80008b4:	e621      	b.n	80004fa <__aeabi_dadd+0x24a>
 80008b6:	0004      	movs	r4, r0
 80008b8:	3a20      	subs	r2, #32
 80008ba:	40d4      	lsrs	r4, r2
 80008bc:	4662      	mov	r2, ip
 80008be:	2a20      	cmp	r2, #32
 80008c0:	d004      	beq.n	80008cc <__aeabi_dadd+0x61c>
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	4666      	mov	r6, ip
 80008c6:	1b92      	subs	r2, r2, r6
 80008c8:	4090      	lsls	r0, r2
 80008ca:	4303      	orrs	r3, r0
 80008cc:	1e5a      	subs	r2, r3, #1
 80008ce:	4193      	sbcs	r3, r2
 80008d0:	431c      	orrs	r4, r3
 80008d2:	e67e      	b.n	80005d2 <__aeabi_dadd+0x322>
 80008d4:	185c      	adds	r4, r3, r1
 80008d6:	428c      	cmp	r4, r1
 80008d8:	4189      	sbcs	r1, r1
 80008da:	4440      	add	r0, r8
 80008dc:	4249      	negs	r1, r1
 80008de:	1847      	adds	r7, r0, r1
 80008e0:	e6dd      	b.n	800069e <__aeabi_dadd+0x3ee>
 80008e2:	0023      	movs	r3, r4
 80008e4:	433b      	orrs	r3, r7
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x63a>
 80008e8:	e6ad      	b.n	8000646 <__aeabi_dadd+0x396>
 80008ea:	e606      	b.n	80004fa <__aeabi_dadd+0x24a>
 80008ec:	0744      	lsls	r4, r0, #29
 80008ee:	4323      	orrs	r3, r4
 80008f0:	2480      	movs	r4, #128	; 0x80
 80008f2:	08c0      	lsrs	r0, r0, #3
 80008f4:	0324      	lsls	r4, r4, #12
 80008f6:	4220      	tst	r0, r4
 80008f8:	d008      	beq.n	800090c <__aeabi_dadd+0x65c>
 80008fa:	4642      	mov	r2, r8
 80008fc:	08d6      	lsrs	r6, r2, #3
 80008fe:	4226      	tst	r6, r4
 8000900:	d104      	bne.n	800090c <__aeabi_dadd+0x65c>
 8000902:	4655      	mov	r5, sl
 8000904:	0030      	movs	r0, r6
 8000906:	08cb      	lsrs	r3, r1, #3
 8000908:	0751      	lsls	r1, r2, #29
 800090a:	430b      	orrs	r3, r1
 800090c:	0f5a      	lsrs	r2, r3, #29
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	0752      	lsls	r2, r2, #29
 8000914:	4313      	orrs	r3, r2
 8000916:	e619      	b.n	800054c <__aeabi_dadd+0x29c>
 8000918:	2300      	movs	r3, #0
 800091a:	4a01      	ldr	r2, [pc, #4]	; (8000920 <__aeabi_dadd+0x670>)
 800091c:	001f      	movs	r7, r3
 800091e:	e55e      	b.n	80003de <__aeabi_dadd+0x12e>
 8000920:	000007ff 	.word	0x000007ff
 8000924:	ff7fffff 	.word	0xff7fffff

08000928 <__aeabi_ddiv>:
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	4657      	mov	r7, sl
 800092c:	464e      	mov	r6, r9
 800092e:	4645      	mov	r5, r8
 8000930:	46de      	mov	lr, fp
 8000932:	b5e0      	push	{r5, r6, r7, lr}
 8000934:	4681      	mov	r9, r0
 8000936:	0005      	movs	r5, r0
 8000938:	030c      	lsls	r4, r1, #12
 800093a:	0048      	lsls	r0, r1, #1
 800093c:	4692      	mov	sl, r2
 800093e:	001f      	movs	r7, r3
 8000940:	b085      	sub	sp, #20
 8000942:	0b24      	lsrs	r4, r4, #12
 8000944:	0d40      	lsrs	r0, r0, #21
 8000946:	0fce      	lsrs	r6, r1, #31
 8000948:	2800      	cmp	r0, #0
 800094a:	d100      	bne.n	800094e <__aeabi_ddiv+0x26>
 800094c:	e156      	b.n	8000bfc <__aeabi_ddiv+0x2d4>
 800094e:	4bd4      	ldr	r3, [pc, #848]	; (8000ca0 <__aeabi_ddiv+0x378>)
 8000950:	4298      	cmp	r0, r3
 8000952:	d100      	bne.n	8000956 <__aeabi_ddiv+0x2e>
 8000954:	e172      	b.n	8000c3c <__aeabi_ddiv+0x314>
 8000956:	0f6b      	lsrs	r3, r5, #29
 8000958:	00e4      	lsls	r4, r4, #3
 800095a:	431c      	orrs	r4, r3
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	4323      	orrs	r3, r4
 8000962:	4698      	mov	r8, r3
 8000964:	4bcf      	ldr	r3, [pc, #828]	; (8000ca4 <__aeabi_ddiv+0x37c>)
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	469b      	mov	fp, r3
 800096a:	2300      	movs	r3, #0
 800096c:	4699      	mov	r9, r3
 800096e:	4483      	add	fp, r0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	033c      	lsls	r4, r7, #12
 8000974:	007b      	lsls	r3, r7, #1
 8000976:	4650      	mov	r0, sl
 8000978:	0b24      	lsrs	r4, r4, #12
 800097a:	0d5b      	lsrs	r3, r3, #21
 800097c:	0fff      	lsrs	r7, r7, #31
 800097e:	2b00      	cmp	r3, #0
 8000980:	d100      	bne.n	8000984 <__aeabi_ddiv+0x5c>
 8000982:	e11f      	b.n	8000bc4 <__aeabi_ddiv+0x29c>
 8000984:	4ac6      	ldr	r2, [pc, #792]	; (8000ca0 <__aeabi_ddiv+0x378>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d100      	bne.n	800098c <__aeabi_ddiv+0x64>
 800098a:	e162      	b.n	8000c52 <__aeabi_ddiv+0x32a>
 800098c:	49c5      	ldr	r1, [pc, #788]	; (8000ca4 <__aeabi_ddiv+0x37c>)
 800098e:	0f42      	lsrs	r2, r0, #29
 8000990:	468c      	mov	ip, r1
 8000992:	00e4      	lsls	r4, r4, #3
 8000994:	4659      	mov	r1, fp
 8000996:	4314      	orrs	r4, r2
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	4463      	add	r3, ip
 800099c:	0412      	lsls	r2, r2, #16
 800099e:	1acb      	subs	r3, r1, r3
 80009a0:	4314      	orrs	r4, r2
 80009a2:	469b      	mov	fp, r3
 80009a4:	00c2      	lsls	r2, r0, #3
 80009a6:	2000      	movs	r0, #0
 80009a8:	0033      	movs	r3, r6
 80009aa:	407b      	eors	r3, r7
 80009ac:	469a      	mov	sl, r3
 80009ae:	464b      	mov	r3, r9
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d827      	bhi.n	8000a04 <__aeabi_ddiv+0xdc>
 80009b4:	49bc      	ldr	r1, [pc, #752]	; (8000ca8 <__aeabi_ddiv+0x380>)
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	58cb      	ldr	r3, [r1, r3]
 80009ba:	469f      	mov	pc, r3
 80009bc:	46b2      	mov	sl, r6
 80009be:	9b00      	ldr	r3, [sp, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d016      	beq.n	80009f2 <__aeabi_ddiv+0xca>
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d100      	bne.n	80009ca <__aeabi_ddiv+0xa2>
 80009c8:	e28e      	b.n	8000ee8 <__aeabi_ddiv+0x5c0>
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d000      	beq.n	80009d0 <__aeabi_ddiv+0xa8>
 80009ce:	e0d9      	b.n	8000b84 <__aeabi_ddiv+0x25c>
 80009d0:	2300      	movs	r3, #0
 80009d2:	2400      	movs	r4, #0
 80009d4:	2500      	movs	r5, #0
 80009d6:	4652      	mov	r2, sl
 80009d8:	051b      	lsls	r3, r3, #20
 80009da:	4323      	orrs	r3, r4
 80009dc:	07d2      	lsls	r2, r2, #31
 80009de:	4313      	orrs	r3, r2
 80009e0:	0028      	movs	r0, r5
 80009e2:	0019      	movs	r1, r3
 80009e4:	b005      	add	sp, #20
 80009e6:	bcf0      	pop	{r4, r5, r6, r7}
 80009e8:	46bb      	mov	fp, r7
 80009ea:	46b2      	mov	sl, r6
 80009ec:	46a9      	mov	r9, r5
 80009ee:	46a0      	mov	r8, r4
 80009f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f2:	2400      	movs	r4, #0
 80009f4:	2500      	movs	r5, #0
 80009f6:	4baa      	ldr	r3, [pc, #680]	; (8000ca0 <__aeabi_ddiv+0x378>)
 80009f8:	e7ed      	b.n	80009d6 <__aeabi_ddiv+0xae>
 80009fa:	46ba      	mov	sl, r7
 80009fc:	46a0      	mov	r8, r4
 80009fe:	0015      	movs	r5, r2
 8000a00:	9000      	str	r0, [sp, #0]
 8000a02:	e7dc      	b.n	80009be <__aeabi_ddiv+0x96>
 8000a04:	4544      	cmp	r4, r8
 8000a06:	d200      	bcs.n	8000a0a <__aeabi_ddiv+0xe2>
 8000a08:	e1c7      	b.n	8000d9a <__aeabi_ddiv+0x472>
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_ddiv+0xe6>
 8000a0c:	e1c2      	b.n	8000d94 <__aeabi_ddiv+0x46c>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	425b      	negs	r3, r3
 8000a12:	469c      	mov	ip, r3
 8000a14:	002e      	movs	r6, r5
 8000a16:	4640      	mov	r0, r8
 8000a18:	2500      	movs	r5, #0
 8000a1a:	44e3      	add	fp, ip
 8000a1c:	0223      	lsls	r3, r4, #8
 8000a1e:	0e14      	lsrs	r4, r2, #24
 8000a20:	431c      	orrs	r4, r3
 8000a22:	0c1b      	lsrs	r3, r3, #16
 8000a24:	4699      	mov	r9, r3
 8000a26:	0423      	lsls	r3, r4, #16
 8000a28:	0c1f      	lsrs	r7, r3, #16
 8000a2a:	0212      	lsls	r2, r2, #8
 8000a2c:	4649      	mov	r1, r9
 8000a2e:	9200      	str	r2, [sp, #0]
 8000a30:	9701      	str	r7, [sp, #4]
 8000a32:	f7ff fbf9 	bl	8000228 <__aeabi_uidivmod>
 8000a36:	0002      	movs	r2, r0
 8000a38:	437a      	muls	r2, r7
 8000a3a:	040b      	lsls	r3, r1, #16
 8000a3c:	0c31      	lsrs	r1, r6, #16
 8000a3e:	4680      	mov	r8, r0
 8000a40:	4319      	orrs	r1, r3
 8000a42:	428a      	cmp	r2, r1
 8000a44:	d907      	bls.n	8000a56 <__aeabi_ddiv+0x12e>
 8000a46:	2301      	movs	r3, #1
 8000a48:	425b      	negs	r3, r3
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	1909      	adds	r1, r1, r4
 8000a4e:	44e0      	add	r8, ip
 8000a50:	428c      	cmp	r4, r1
 8000a52:	d800      	bhi.n	8000a56 <__aeabi_ddiv+0x12e>
 8000a54:	e207      	b.n	8000e66 <__aeabi_ddiv+0x53e>
 8000a56:	1a88      	subs	r0, r1, r2
 8000a58:	4649      	mov	r1, r9
 8000a5a:	f7ff fbe5 	bl	8000228 <__aeabi_uidivmod>
 8000a5e:	0409      	lsls	r1, r1, #16
 8000a60:	468c      	mov	ip, r1
 8000a62:	0431      	lsls	r1, r6, #16
 8000a64:	4666      	mov	r6, ip
 8000a66:	9a01      	ldr	r2, [sp, #4]
 8000a68:	0c09      	lsrs	r1, r1, #16
 8000a6a:	4342      	muls	r2, r0
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	4331      	orrs	r1, r6
 8000a70:	428a      	cmp	r2, r1
 8000a72:	d904      	bls.n	8000a7e <__aeabi_ddiv+0x156>
 8000a74:	1909      	adds	r1, r1, r4
 8000a76:	3b01      	subs	r3, #1
 8000a78:	428c      	cmp	r4, r1
 8000a7a:	d800      	bhi.n	8000a7e <__aeabi_ddiv+0x156>
 8000a7c:	e1ed      	b.n	8000e5a <__aeabi_ddiv+0x532>
 8000a7e:	1a88      	subs	r0, r1, r2
 8000a80:	4642      	mov	r2, r8
 8000a82:	0412      	lsls	r2, r2, #16
 8000a84:	431a      	orrs	r2, r3
 8000a86:	4690      	mov	r8, r2
 8000a88:	4641      	mov	r1, r8
 8000a8a:	9b00      	ldr	r3, [sp, #0]
 8000a8c:	040e      	lsls	r6, r1, #16
 8000a8e:	0c1b      	lsrs	r3, r3, #16
 8000a90:	001f      	movs	r7, r3
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	9b00      	ldr	r3, [sp, #0]
 8000a96:	0c36      	lsrs	r6, r6, #16
 8000a98:	041b      	lsls	r3, r3, #16
 8000a9a:	0c19      	lsrs	r1, r3, #16
 8000a9c:	000b      	movs	r3, r1
 8000a9e:	4373      	muls	r3, r6
 8000aa0:	0c12      	lsrs	r2, r2, #16
 8000aa2:	437e      	muls	r6, r7
 8000aa4:	9103      	str	r1, [sp, #12]
 8000aa6:	4351      	muls	r1, r2
 8000aa8:	437a      	muls	r2, r7
 8000aaa:	0c1f      	lsrs	r7, r3, #16
 8000aac:	46bc      	mov	ip, r7
 8000aae:	1876      	adds	r6, r6, r1
 8000ab0:	4466      	add	r6, ip
 8000ab2:	42b1      	cmp	r1, r6
 8000ab4:	d903      	bls.n	8000abe <__aeabi_ddiv+0x196>
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	0249      	lsls	r1, r1, #9
 8000aba:	468c      	mov	ip, r1
 8000abc:	4462      	add	r2, ip
 8000abe:	0c31      	lsrs	r1, r6, #16
 8000ac0:	188a      	adds	r2, r1, r2
 8000ac2:	0431      	lsls	r1, r6, #16
 8000ac4:	041e      	lsls	r6, r3, #16
 8000ac6:	0c36      	lsrs	r6, r6, #16
 8000ac8:	198e      	adds	r6, r1, r6
 8000aca:	4290      	cmp	r0, r2
 8000acc:	d302      	bcc.n	8000ad4 <__aeabi_ddiv+0x1ac>
 8000ace:	d112      	bne.n	8000af6 <__aeabi_ddiv+0x1ce>
 8000ad0:	42b5      	cmp	r5, r6
 8000ad2:	d210      	bcs.n	8000af6 <__aeabi_ddiv+0x1ce>
 8000ad4:	4643      	mov	r3, r8
 8000ad6:	1e59      	subs	r1, r3, #1
 8000ad8:	9b00      	ldr	r3, [sp, #0]
 8000ada:	469c      	mov	ip, r3
 8000adc:	4465      	add	r5, ip
 8000ade:	001f      	movs	r7, r3
 8000ae0:	429d      	cmp	r5, r3
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	191b      	adds	r3, r3, r4
 8000ae8:	18c0      	adds	r0, r0, r3
 8000aea:	4284      	cmp	r4, r0
 8000aec:	d200      	bcs.n	8000af0 <__aeabi_ddiv+0x1c8>
 8000aee:	e1a0      	b.n	8000e32 <__aeabi_ddiv+0x50a>
 8000af0:	d100      	bne.n	8000af4 <__aeabi_ddiv+0x1cc>
 8000af2:	e19b      	b.n	8000e2c <__aeabi_ddiv+0x504>
 8000af4:	4688      	mov	r8, r1
 8000af6:	1bae      	subs	r6, r5, r6
 8000af8:	42b5      	cmp	r5, r6
 8000afa:	41ad      	sbcs	r5, r5
 8000afc:	1a80      	subs	r0, r0, r2
 8000afe:	426d      	negs	r5, r5
 8000b00:	1b40      	subs	r0, r0, r5
 8000b02:	4284      	cmp	r4, r0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_ddiv+0x1e0>
 8000b06:	e1d5      	b.n	8000eb4 <__aeabi_ddiv+0x58c>
 8000b08:	4649      	mov	r1, r9
 8000b0a:	f7ff fb8d 	bl	8000228 <__aeabi_uidivmod>
 8000b0e:	9a01      	ldr	r2, [sp, #4]
 8000b10:	040b      	lsls	r3, r1, #16
 8000b12:	4342      	muls	r2, r0
 8000b14:	0c31      	lsrs	r1, r6, #16
 8000b16:	0005      	movs	r5, r0
 8000b18:	4319      	orrs	r1, r3
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	d900      	bls.n	8000b20 <__aeabi_ddiv+0x1f8>
 8000b1e:	e16c      	b.n	8000dfa <__aeabi_ddiv+0x4d2>
 8000b20:	1a88      	subs	r0, r1, r2
 8000b22:	4649      	mov	r1, r9
 8000b24:	f7ff fb80 	bl	8000228 <__aeabi_uidivmod>
 8000b28:	9a01      	ldr	r2, [sp, #4]
 8000b2a:	0436      	lsls	r6, r6, #16
 8000b2c:	4342      	muls	r2, r0
 8000b2e:	0409      	lsls	r1, r1, #16
 8000b30:	0c36      	lsrs	r6, r6, #16
 8000b32:	0003      	movs	r3, r0
 8000b34:	430e      	orrs	r6, r1
 8000b36:	42b2      	cmp	r2, r6
 8000b38:	d900      	bls.n	8000b3c <__aeabi_ddiv+0x214>
 8000b3a:	e153      	b.n	8000de4 <__aeabi_ddiv+0x4bc>
 8000b3c:	9803      	ldr	r0, [sp, #12]
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	0002      	movs	r2, r0
 8000b42:	042d      	lsls	r5, r5, #16
 8000b44:	431d      	orrs	r5, r3
 8000b46:	9f02      	ldr	r7, [sp, #8]
 8000b48:	042b      	lsls	r3, r5, #16
 8000b4a:	0c1b      	lsrs	r3, r3, #16
 8000b4c:	435a      	muls	r2, r3
 8000b4e:	437b      	muls	r3, r7
 8000b50:	469c      	mov	ip, r3
 8000b52:	0c29      	lsrs	r1, r5, #16
 8000b54:	4348      	muls	r0, r1
 8000b56:	0c13      	lsrs	r3, r2, #16
 8000b58:	4484      	add	ip, r0
 8000b5a:	4463      	add	r3, ip
 8000b5c:	4379      	muls	r1, r7
 8000b5e:	4298      	cmp	r0, r3
 8000b60:	d903      	bls.n	8000b6a <__aeabi_ddiv+0x242>
 8000b62:	2080      	movs	r0, #128	; 0x80
 8000b64:	0240      	lsls	r0, r0, #9
 8000b66:	4684      	mov	ip, r0
 8000b68:	4461      	add	r1, ip
 8000b6a:	0c18      	lsrs	r0, r3, #16
 8000b6c:	0412      	lsls	r2, r2, #16
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	0c12      	lsrs	r2, r2, #16
 8000b72:	1841      	adds	r1, r0, r1
 8000b74:	189b      	adds	r3, r3, r2
 8000b76:	428e      	cmp	r6, r1
 8000b78:	d200      	bcs.n	8000b7c <__aeabi_ddiv+0x254>
 8000b7a:	e0ff      	b.n	8000d7c <__aeabi_ddiv+0x454>
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x258>
 8000b7e:	e0fa      	b.n	8000d76 <__aeabi_ddiv+0x44e>
 8000b80:	2301      	movs	r3, #1
 8000b82:	431d      	orrs	r5, r3
 8000b84:	4a49      	ldr	r2, [pc, #292]	; (8000cac <__aeabi_ddiv+0x384>)
 8000b86:	445a      	add	r2, fp
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	dc00      	bgt.n	8000b8e <__aeabi_ddiv+0x266>
 8000b8c:	e0aa      	b.n	8000ce4 <__aeabi_ddiv+0x3bc>
 8000b8e:	076b      	lsls	r3, r5, #29
 8000b90:	d000      	beq.n	8000b94 <__aeabi_ddiv+0x26c>
 8000b92:	e13d      	b.n	8000e10 <__aeabi_ddiv+0x4e8>
 8000b94:	08ed      	lsrs	r5, r5, #3
 8000b96:	4643      	mov	r3, r8
 8000b98:	01db      	lsls	r3, r3, #7
 8000b9a:	d506      	bpl.n	8000baa <__aeabi_ddiv+0x282>
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	4b44      	ldr	r3, [pc, #272]	; (8000cb0 <__aeabi_ddiv+0x388>)
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	00d2      	lsls	r2, r2, #3
 8000ba8:	445a      	add	r2, fp
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <__aeabi_ddiv+0x38c>)
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dd00      	ble.n	8000bb2 <__aeabi_ddiv+0x28a>
 8000bb0:	e71f      	b.n	80009f2 <__aeabi_ddiv+0xca>
 8000bb2:	4643      	mov	r3, r8
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	431d      	orrs	r5, r3
 8000bb8:	4643      	mov	r3, r8
 8000bba:	0552      	lsls	r2, r2, #21
 8000bbc:	025c      	lsls	r4, r3, #9
 8000bbe:	0b24      	lsrs	r4, r4, #12
 8000bc0:	0d53      	lsrs	r3, r2, #21
 8000bc2:	e708      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000bc4:	4652      	mov	r2, sl
 8000bc6:	4322      	orrs	r2, r4
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x2a4>
 8000bca:	e07b      	b.n	8000cc4 <__aeabi_ddiv+0x39c>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_ddiv+0x2aa>
 8000bd0:	e0fa      	b.n	8000dc8 <__aeabi_ddiv+0x4a0>
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	f001 f92c 	bl	8001e30 <__clzsi2>
 8000bd8:	0002      	movs	r2, r0
 8000bda:	3a0b      	subs	r2, #11
 8000bdc:	231d      	movs	r3, #29
 8000bde:	0001      	movs	r1, r0
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	4652      	mov	r2, sl
 8000be4:	3908      	subs	r1, #8
 8000be6:	40da      	lsrs	r2, r3
 8000be8:	408c      	lsls	r4, r1
 8000bea:	4314      	orrs	r4, r2
 8000bec:	4652      	mov	r2, sl
 8000bee:	408a      	lsls	r2, r1
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <__aeabi_ddiv+0x390>)
 8000bf2:	4458      	add	r0, fp
 8000bf4:	469b      	mov	fp, r3
 8000bf6:	4483      	add	fp, r0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	e6d5      	b.n	80009a8 <__aeabi_ddiv+0x80>
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	4323      	orrs	r3, r4
 8000c00:	4698      	mov	r8, r3
 8000c02:	d044      	beq.n	8000c8e <__aeabi_ddiv+0x366>
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0x2e2>
 8000c08:	e0ce      	b.n	8000da8 <__aeabi_ddiv+0x480>
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	f001 f910 	bl	8001e30 <__clzsi2>
 8000c10:	0001      	movs	r1, r0
 8000c12:	0002      	movs	r2, r0
 8000c14:	390b      	subs	r1, #11
 8000c16:	231d      	movs	r3, #29
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	40d9      	lsrs	r1, r3
 8000c20:	3808      	subs	r0, #8
 8000c22:	4084      	lsls	r4, r0
 8000c24:	000b      	movs	r3, r1
 8000c26:	464d      	mov	r5, r9
 8000c28:	4323      	orrs	r3, r4
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	4085      	lsls	r5, r0
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <__aeabi_ddiv+0x394>)
 8000c30:	1a83      	subs	r3, r0, r2
 8000c32:	469b      	mov	fp, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	4699      	mov	r9, r3
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	e69a      	b.n	8000972 <__aeabi_ddiv+0x4a>
 8000c3c:	464b      	mov	r3, r9
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	4698      	mov	r8, r3
 8000c42:	d11d      	bne.n	8000c80 <__aeabi_ddiv+0x358>
 8000c44:	2308      	movs	r3, #8
 8000c46:	4699      	mov	r9, r3
 8000c48:	3b06      	subs	r3, #6
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	4683      	mov	fp, r0
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	e68f      	b.n	8000972 <__aeabi_ddiv+0x4a>
 8000c52:	4652      	mov	r2, sl
 8000c54:	4322      	orrs	r2, r4
 8000c56:	d109      	bne.n	8000c6c <__aeabi_ddiv+0x344>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <__aeabi_ddiv+0x398>)
 8000c60:	4689      	mov	r9, r1
 8000c62:	469c      	mov	ip, r3
 8000c64:	2400      	movs	r4, #0
 8000c66:	2002      	movs	r0, #2
 8000c68:	44e3      	add	fp, ip
 8000c6a:	e69d      	b.n	80009a8 <__aeabi_ddiv+0x80>
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	464a      	mov	r2, r9
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <__aeabi_ddiv+0x398>)
 8000c74:	4691      	mov	r9, r2
 8000c76:	469c      	mov	ip, r3
 8000c78:	4652      	mov	r2, sl
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	44e3      	add	fp, ip
 8000c7e:	e693      	b.n	80009a8 <__aeabi_ddiv+0x80>
 8000c80:	230c      	movs	r3, #12
 8000c82:	4699      	mov	r9, r3
 8000c84:	3b09      	subs	r3, #9
 8000c86:	46a0      	mov	r8, r4
 8000c88:	4683      	mov	fp, r0
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	e671      	b.n	8000972 <__aeabi_ddiv+0x4a>
 8000c8e:	2304      	movs	r3, #4
 8000c90:	4699      	mov	r9, r3
 8000c92:	2300      	movs	r3, #0
 8000c94:	469b      	mov	fp, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	2500      	movs	r5, #0
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	e669      	b.n	8000972 <__aeabi_ddiv+0x4a>
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	000007ff 	.word	0x000007ff
 8000ca4:	fffffc01 	.word	0xfffffc01
 8000ca8:	08006a94 	.word	0x08006a94
 8000cac:	000003ff 	.word	0x000003ff
 8000cb0:	feffffff 	.word	0xfeffffff
 8000cb4:	000007fe 	.word	0x000007fe
 8000cb8:	000003f3 	.word	0x000003f3
 8000cbc:	fffffc0d 	.word	0xfffffc0d
 8000cc0:	fffff801 	.word	0xfffff801
 8000cc4:	4649      	mov	r1, r9
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	4689      	mov	r9, r1
 8000ccc:	2400      	movs	r4, #0
 8000cce:	2001      	movs	r0, #1
 8000cd0:	e66a      	b.n	80009a8 <__aeabi_ddiv+0x80>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2480      	movs	r4, #128	; 0x80
 8000cd6:	469a      	mov	sl, r3
 8000cd8:	2500      	movs	r5, #0
 8000cda:	4b8a      	ldr	r3, [pc, #552]	; (8000f04 <__aeabi_ddiv+0x5dc>)
 8000cdc:	0324      	lsls	r4, r4, #12
 8000cde:	e67a      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000ce0:	2501      	movs	r5, #1
 8000ce2:	426d      	negs	r5, r5
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	2b38      	cmp	r3, #56	; 0x38
 8000cea:	dd00      	ble.n	8000cee <__aeabi_ddiv+0x3c6>
 8000cec:	e670      	b.n	80009d0 <__aeabi_ddiv+0xa8>
 8000cee:	2b1f      	cmp	r3, #31
 8000cf0:	dc00      	bgt.n	8000cf4 <__aeabi_ddiv+0x3cc>
 8000cf2:	e0bf      	b.n	8000e74 <__aeabi_ddiv+0x54c>
 8000cf4:	211f      	movs	r1, #31
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	4641      	mov	r1, r8
 8000cfc:	40d1      	lsrs	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	2b20      	cmp	r3, #32
 8000d02:	d004      	beq.n	8000d0e <__aeabi_ddiv+0x3e6>
 8000d04:	4641      	mov	r1, r8
 8000d06:	4b80      	ldr	r3, [pc, #512]	; (8000f08 <__aeabi_ddiv+0x5e0>)
 8000d08:	445b      	add	r3, fp
 8000d0a:	4099      	lsls	r1, r3
 8000d0c:	430d      	orrs	r5, r1
 8000d0e:	1e6b      	subs	r3, r5, #1
 8000d10:	419d      	sbcs	r5, r3
 8000d12:	2307      	movs	r3, #7
 8000d14:	432a      	orrs	r2, r5
 8000d16:	001d      	movs	r5, r3
 8000d18:	2400      	movs	r4, #0
 8000d1a:	4015      	ands	r5, r2
 8000d1c:	4213      	tst	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x3fa>
 8000d20:	e0d4      	b.n	8000ecc <__aeabi_ddiv+0x5a4>
 8000d22:	210f      	movs	r1, #15
 8000d24:	2300      	movs	r3, #0
 8000d26:	4011      	ands	r1, r2
 8000d28:	2904      	cmp	r1, #4
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0x406>
 8000d2c:	e0cb      	b.n	8000ec6 <__aeabi_ddiv+0x59e>
 8000d2e:	1d11      	adds	r1, r2, #4
 8000d30:	4291      	cmp	r1, r2
 8000d32:	4192      	sbcs	r2, r2
 8000d34:	4252      	negs	r2, r2
 8000d36:	189b      	adds	r3, r3, r2
 8000d38:	000a      	movs	r2, r1
 8000d3a:	0219      	lsls	r1, r3, #8
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_ddiv+0x418>
 8000d3e:	e0c2      	b.n	8000ec6 <__aeabi_ddiv+0x59e>
 8000d40:	2301      	movs	r3, #1
 8000d42:	2400      	movs	r4, #0
 8000d44:	2500      	movs	r5, #0
 8000d46:	e646      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	031b      	lsls	r3, r3, #12
 8000d4e:	4219      	tst	r1, r3
 8000d50:	d008      	beq.n	8000d64 <__aeabi_ddiv+0x43c>
 8000d52:	421c      	tst	r4, r3
 8000d54:	d106      	bne.n	8000d64 <__aeabi_ddiv+0x43c>
 8000d56:	431c      	orrs	r4, r3
 8000d58:	0324      	lsls	r4, r4, #12
 8000d5a:	46ba      	mov	sl, r7
 8000d5c:	0015      	movs	r5, r2
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <__aeabi_ddiv+0x5dc>)
 8000d60:	0b24      	lsrs	r4, r4, #12
 8000d62:	e638      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000d64:	2480      	movs	r4, #128	; 0x80
 8000d66:	4643      	mov	r3, r8
 8000d68:	0324      	lsls	r4, r4, #12
 8000d6a:	431c      	orrs	r4, r3
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	46b2      	mov	sl, r6
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <__aeabi_ddiv+0x5dc>)
 8000d72:	0b24      	lsrs	r4, r4, #12
 8000d74:	e62f      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x454>
 8000d7a:	e703      	b.n	8000b84 <__aeabi_ddiv+0x25c>
 8000d7c:	19a6      	adds	r6, r4, r6
 8000d7e:	1e68      	subs	r0, r5, #1
 8000d80:	42a6      	cmp	r6, r4
 8000d82:	d200      	bcs.n	8000d86 <__aeabi_ddiv+0x45e>
 8000d84:	e08d      	b.n	8000ea2 <__aeabi_ddiv+0x57a>
 8000d86:	428e      	cmp	r6, r1
 8000d88:	d200      	bcs.n	8000d8c <__aeabi_ddiv+0x464>
 8000d8a:	e0a3      	b.n	8000ed4 <__aeabi_ddiv+0x5ac>
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x468>
 8000d8e:	e0b3      	b.n	8000ef8 <__aeabi_ddiv+0x5d0>
 8000d90:	0005      	movs	r5, r0
 8000d92:	e6f5      	b.n	8000b80 <__aeabi_ddiv+0x258>
 8000d94:	42aa      	cmp	r2, r5
 8000d96:	d900      	bls.n	8000d9a <__aeabi_ddiv+0x472>
 8000d98:	e639      	b.n	8000a0e <__aeabi_ddiv+0xe6>
 8000d9a:	4643      	mov	r3, r8
 8000d9c:	07de      	lsls	r6, r3, #31
 8000d9e:	0858      	lsrs	r0, r3, #1
 8000da0:	086b      	lsrs	r3, r5, #1
 8000da2:	431e      	orrs	r6, r3
 8000da4:	07ed      	lsls	r5, r5, #31
 8000da6:	e639      	b.n	8000a1c <__aeabi_ddiv+0xf4>
 8000da8:	4648      	mov	r0, r9
 8000daa:	f001 f841 	bl	8001e30 <__clzsi2>
 8000dae:	0001      	movs	r1, r0
 8000db0:	0002      	movs	r2, r0
 8000db2:	3115      	adds	r1, #21
 8000db4:	3220      	adds	r2, #32
 8000db6:	291c      	cmp	r1, #28
 8000db8:	dc00      	bgt.n	8000dbc <__aeabi_ddiv+0x494>
 8000dba:	e72c      	b.n	8000c16 <__aeabi_ddiv+0x2ee>
 8000dbc:	464b      	mov	r3, r9
 8000dbe:	3808      	subs	r0, #8
 8000dc0:	4083      	lsls	r3, r0
 8000dc2:	2500      	movs	r5, #0
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	e732      	b.n	8000c2e <__aeabi_ddiv+0x306>
 8000dc8:	f001 f832 	bl	8001e30 <__clzsi2>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	001a      	movs	r2, r3
 8000dd0:	3215      	adds	r2, #21
 8000dd2:	3020      	adds	r0, #32
 8000dd4:	2a1c      	cmp	r2, #28
 8000dd6:	dc00      	bgt.n	8000dda <__aeabi_ddiv+0x4b2>
 8000dd8:	e700      	b.n	8000bdc <__aeabi_ddiv+0x2b4>
 8000dda:	4654      	mov	r4, sl
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	409c      	lsls	r4, r3
 8000de2:	e705      	b.n	8000bf0 <__aeabi_ddiv+0x2c8>
 8000de4:	1936      	adds	r6, r6, r4
 8000de6:	3b01      	subs	r3, #1
 8000de8:	42b4      	cmp	r4, r6
 8000dea:	d900      	bls.n	8000dee <__aeabi_ddiv+0x4c6>
 8000dec:	e6a6      	b.n	8000b3c <__aeabi_ddiv+0x214>
 8000dee:	42b2      	cmp	r2, r6
 8000df0:	d800      	bhi.n	8000df4 <__aeabi_ddiv+0x4cc>
 8000df2:	e6a3      	b.n	8000b3c <__aeabi_ddiv+0x214>
 8000df4:	1e83      	subs	r3, r0, #2
 8000df6:	1936      	adds	r6, r6, r4
 8000df8:	e6a0      	b.n	8000b3c <__aeabi_ddiv+0x214>
 8000dfa:	1909      	adds	r1, r1, r4
 8000dfc:	3d01      	subs	r5, #1
 8000dfe:	428c      	cmp	r4, r1
 8000e00:	d900      	bls.n	8000e04 <__aeabi_ddiv+0x4dc>
 8000e02:	e68d      	b.n	8000b20 <__aeabi_ddiv+0x1f8>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	d800      	bhi.n	8000e0a <__aeabi_ddiv+0x4e2>
 8000e08:	e68a      	b.n	8000b20 <__aeabi_ddiv+0x1f8>
 8000e0a:	1e85      	subs	r5, r0, #2
 8000e0c:	1909      	adds	r1, r1, r4
 8000e0e:	e687      	b.n	8000b20 <__aeabi_ddiv+0x1f8>
 8000e10:	230f      	movs	r3, #15
 8000e12:	402b      	ands	r3, r5
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0x4f2>
 8000e18:	e6bc      	b.n	8000b94 <__aeabi_ddiv+0x26c>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	42ab      	cmp	r3, r5
 8000e20:	419b      	sbcs	r3, r3
 8000e22:	3504      	adds	r5, #4
 8000e24:	425b      	negs	r3, r3
 8000e26:	08ed      	lsrs	r5, r5, #3
 8000e28:	4498      	add	r8, r3
 8000e2a:	e6b4      	b.n	8000b96 <__aeabi_ddiv+0x26e>
 8000e2c:	42af      	cmp	r7, r5
 8000e2e:	d900      	bls.n	8000e32 <__aeabi_ddiv+0x50a>
 8000e30:	e660      	b.n	8000af4 <__aeabi_ddiv+0x1cc>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	d804      	bhi.n	8000e40 <__aeabi_ddiv+0x518>
 8000e36:	d000      	beq.n	8000e3a <__aeabi_ddiv+0x512>
 8000e38:	e65c      	b.n	8000af4 <__aeabi_ddiv+0x1cc>
 8000e3a:	42ae      	cmp	r6, r5
 8000e3c:	d800      	bhi.n	8000e40 <__aeabi_ddiv+0x518>
 8000e3e:	e659      	b.n	8000af4 <__aeabi_ddiv+0x1cc>
 8000e40:	2302      	movs	r3, #2
 8000e42:	425b      	negs	r3, r3
 8000e44:	469c      	mov	ip, r3
 8000e46:	9b00      	ldr	r3, [sp, #0]
 8000e48:	44e0      	add	r8, ip
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	4465      	add	r5, ip
 8000e4e:	429d      	cmp	r5, r3
 8000e50:	419b      	sbcs	r3, r3
 8000e52:	425b      	negs	r3, r3
 8000e54:	191b      	adds	r3, r3, r4
 8000e56:	18c0      	adds	r0, r0, r3
 8000e58:	e64d      	b.n	8000af6 <__aeabi_ddiv+0x1ce>
 8000e5a:	428a      	cmp	r2, r1
 8000e5c:	d800      	bhi.n	8000e60 <__aeabi_ddiv+0x538>
 8000e5e:	e60e      	b.n	8000a7e <__aeabi_ddiv+0x156>
 8000e60:	1e83      	subs	r3, r0, #2
 8000e62:	1909      	adds	r1, r1, r4
 8000e64:	e60b      	b.n	8000a7e <__aeabi_ddiv+0x156>
 8000e66:	428a      	cmp	r2, r1
 8000e68:	d800      	bhi.n	8000e6c <__aeabi_ddiv+0x544>
 8000e6a:	e5f4      	b.n	8000a56 <__aeabi_ddiv+0x12e>
 8000e6c:	1e83      	subs	r3, r0, #2
 8000e6e:	4698      	mov	r8, r3
 8000e70:	1909      	adds	r1, r1, r4
 8000e72:	e5f0      	b.n	8000a56 <__aeabi_ddiv+0x12e>
 8000e74:	4925      	ldr	r1, [pc, #148]	; (8000f0c <__aeabi_ddiv+0x5e4>)
 8000e76:	0028      	movs	r0, r5
 8000e78:	4459      	add	r1, fp
 8000e7a:	408d      	lsls	r5, r1
 8000e7c:	4642      	mov	r2, r8
 8000e7e:	408a      	lsls	r2, r1
 8000e80:	1e69      	subs	r1, r5, #1
 8000e82:	418d      	sbcs	r5, r1
 8000e84:	4641      	mov	r1, r8
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	40d9      	lsrs	r1, r3
 8000e8a:	4302      	orrs	r2, r0
 8000e8c:	432a      	orrs	r2, r5
 8000e8e:	000b      	movs	r3, r1
 8000e90:	0751      	lsls	r1, r2, #29
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0x56e>
 8000e94:	e751      	b.n	8000d3a <__aeabi_ddiv+0x412>
 8000e96:	210f      	movs	r1, #15
 8000e98:	4011      	ands	r1, r2
 8000e9a:	2904      	cmp	r1, #4
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_ddiv+0x578>
 8000e9e:	e746      	b.n	8000d2e <__aeabi_ddiv+0x406>
 8000ea0:	e74b      	b.n	8000d3a <__aeabi_ddiv+0x412>
 8000ea2:	0005      	movs	r5, r0
 8000ea4:	428e      	cmp	r6, r1
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_ddiv+0x582>
 8000ea8:	e66a      	b.n	8000b80 <__aeabi_ddiv+0x258>
 8000eaa:	9a00      	ldr	r2, [sp, #0]
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_ddiv+0x58a>
 8000eb0:	e666      	b.n	8000b80 <__aeabi_ddiv+0x258>
 8000eb2:	e667      	b.n	8000b84 <__aeabi_ddiv+0x25c>
 8000eb4:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <__aeabi_ddiv+0x5e8>)
 8000eb6:	445a      	add	r2, fp
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	dc00      	bgt.n	8000ebe <__aeabi_ddiv+0x596>
 8000ebc:	e710      	b.n	8000ce0 <__aeabi_ddiv+0x3b8>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	4498      	add	r8, r3
 8000ec4:	e667      	b.n	8000b96 <__aeabi_ddiv+0x26e>
 8000ec6:	075d      	lsls	r5, r3, #29
 8000ec8:	025b      	lsls	r3, r3, #9
 8000eca:	0b1c      	lsrs	r4, r3, #12
 8000ecc:	08d2      	lsrs	r2, r2, #3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4315      	orrs	r5, r2
 8000ed2:	e580      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000ed4:	9800      	ldr	r0, [sp, #0]
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	0042      	lsls	r2, r0, #1
 8000eda:	4282      	cmp	r2, r0
 8000edc:	41bf      	sbcs	r7, r7
 8000ede:	427f      	negs	r7, r7
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	1936      	adds	r6, r6, r4
 8000ee4:	9200      	str	r2, [sp, #0]
 8000ee6:	e7dd      	b.n	8000ea4 <__aeabi_ddiv+0x57c>
 8000ee8:	2480      	movs	r4, #128	; 0x80
 8000eea:	4643      	mov	r3, r8
 8000eec:	0324      	lsls	r4, r4, #12
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__aeabi_ddiv+0x5dc>)
 8000ef4:	0b24      	lsrs	r4, r4, #12
 8000ef6:	e56e      	b.n	80009d6 <__aeabi_ddiv+0xae>
 8000ef8:	9a00      	ldr	r2, [sp, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3ea      	bcc.n	8000ed4 <__aeabi_ddiv+0x5ac>
 8000efe:	0005      	movs	r5, r0
 8000f00:	e7d3      	b.n	8000eaa <__aeabi_ddiv+0x582>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	000007ff 	.word	0x000007ff
 8000f08:	0000043e 	.word	0x0000043e
 8000f0c:	0000041e 	.word	0x0000041e
 8000f10:	000003ff 	.word	0x000003ff

08000f14 <__eqdf2>:
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	464e      	mov	r6, r9
 8000f18:	4645      	mov	r5, r8
 8000f1a:	46de      	mov	lr, fp
 8000f1c:	4657      	mov	r7, sl
 8000f1e:	4690      	mov	r8, r2
 8000f20:	b5e0      	push	{r5, r6, r7, lr}
 8000f22:	0017      	movs	r7, r2
 8000f24:	031a      	lsls	r2, r3, #12
 8000f26:	0b12      	lsrs	r2, r2, #12
 8000f28:	0005      	movs	r5, r0
 8000f2a:	4684      	mov	ip, r0
 8000f2c:	4819      	ldr	r0, [pc, #100]	; (8000f94 <__eqdf2+0x80>)
 8000f2e:	030e      	lsls	r6, r1, #12
 8000f30:	004c      	lsls	r4, r1, #1
 8000f32:	4691      	mov	r9, r2
 8000f34:	005a      	lsls	r2, r3, #1
 8000f36:	0fdb      	lsrs	r3, r3, #31
 8000f38:	469b      	mov	fp, r3
 8000f3a:	0b36      	lsrs	r6, r6, #12
 8000f3c:	0d64      	lsrs	r4, r4, #21
 8000f3e:	0fc9      	lsrs	r1, r1, #31
 8000f40:	0d52      	lsrs	r2, r2, #21
 8000f42:	4284      	cmp	r4, r0
 8000f44:	d019      	beq.n	8000f7a <__eqdf2+0x66>
 8000f46:	4282      	cmp	r2, r0
 8000f48:	d010      	beq.n	8000f6c <__eqdf2+0x58>
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	4294      	cmp	r4, r2
 8000f4e:	d10e      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f50:	454e      	cmp	r6, r9
 8000f52:	d10c      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f54:	2001      	movs	r0, #1
 8000f56:	45c4      	cmp	ip, r8
 8000f58:	d109      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f5a:	4559      	cmp	r1, fp
 8000f5c:	d017      	beq.n	8000f8e <__eqdf2+0x7a>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d105      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f62:	0030      	movs	r0, r6
 8000f64:	4328      	orrs	r0, r5
 8000f66:	1e43      	subs	r3, r0, #1
 8000f68:	4198      	sbcs	r0, r3
 8000f6a:	e000      	b.n	8000f6e <__eqdf2+0x5a>
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f70:	46bb      	mov	fp, r7
 8000f72:	46b2      	mov	sl, r6
 8000f74:	46a9      	mov	r9, r5
 8000f76:	46a0      	mov	r8, r4
 8000f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7a:	0033      	movs	r3, r6
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	432b      	orrs	r3, r5
 8000f80:	d1f5      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f82:	42a2      	cmp	r2, r4
 8000f84:	d1f3      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f86:	464b      	mov	r3, r9
 8000f88:	433b      	orrs	r3, r7
 8000f8a:	d1f0      	bne.n	8000f6e <__eqdf2+0x5a>
 8000f8c:	e7e2      	b.n	8000f54 <__eqdf2+0x40>
 8000f8e:	2000      	movs	r0, #0
 8000f90:	e7ed      	b.n	8000f6e <__eqdf2+0x5a>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	000007ff 	.word	0x000007ff

08000f98 <__gedf2>:
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9a:	4647      	mov	r7, r8
 8000f9c:	46ce      	mov	lr, r9
 8000f9e:	0004      	movs	r4, r0
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	0016      	movs	r6, r2
 8000fa4:	031b      	lsls	r3, r3, #12
 8000fa6:	0b1b      	lsrs	r3, r3, #12
 8000fa8:	4d2d      	ldr	r5, [pc, #180]	; (8001060 <__gedf2+0xc8>)
 8000faa:	004a      	lsls	r2, r1, #1
 8000fac:	4699      	mov	r9, r3
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	0043      	lsls	r3, r0, #1
 8000fb2:	030f      	lsls	r7, r1, #12
 8000fb4:	46a4      	mov	ip, r4
 8000fb6:	46b0      	mov	r8, r6
 8000fb8:	0b3f      	lsrs	r7, r7, #12
 8000fba:	0d52      	lsrs	r2, r2, #21
 8000fbc:	0fc9      	lsrs	r1, r1, #31
 8000fbe:	0d5b      	lsrs	r3, r3, #21
 8000fc0:	0fc0      	lsrs	r0, r0, #31
 8000fc2:	42aa      	cmp	r2, r5
 8000fc4:	d021      	beq.n	800100a <__gedf2+0x72>
 8000fc6:	42ab      	cmp	r3, r5
 8000fc8:	d013      	beq.n	8000ff2 <__gedf2+0x5a>
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d122      	bne.n	8001014 <__gedf2+0x7c>
 8000fce:	433c      	orrs	r4, r7
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <__gedf2+0x42>
 8000fd4:	464d      	mov	r5, r9
 8000fd6:	432e      	orrs	r6, r5
 8000fd8:	d022      	beq.n	8001020 <__gedf2+0x88>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d010      	beq.n	8001000 <__gedf2+0x68>
 8000fde:	4281      	cmp	r1, r0
 8000fe0:	d022      	beq.n	8001028 <__gedf2+0x90>
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	3901      	subs	r1, #1
 8000fe6:	4008      	ands	r0, r1
 8000fe8:	3801      	subs	r0, #1
 8000fea:	bcc0      	pop	{r6, r7}
 8000fec:	46b9      	mov	r9, r7
 8000fee:	46b0      	mov	r8, r6
 8000ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff2:	464d      	mov	r5, r9
 8000ff4:	432e      	orrs	r6, r5
 8000ff6:	d129      	bne.n	800104c <__gedf2+0xb4>
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d1f0      	bne.n	8000fde <__gedf2+0x46>
 8000ffc:	433c      	orrs	r4, r7
 8000ffe:	d1ee      	bne.n	8000fde <__gedf2+0x46>
 8001000:	2800      	cmp	r0, #0
 8001002:	d1f2      	bne.n	8000fea <__gedf2+0x52>
 8001004:	2001      	movs	r0, #1
 8001006:	4240      	negs	r0, r0
 8001008:	e7ef      	b.n	8000fea <__gedf2+0x52>
 800100a:	003d      	movs	r5, r7
 800100c:	4325      	orrs	r5, r4
 800100e:	d11d      	bne.n	800104c <__gedf2+0xb4>
 8001010:	4293      	cmp	r3, r2
 8001012:	d0ee      	beq.n	8000ff2 <__gedf2+0x5a>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e2      	bne.n	8000fde <__gedf2+0x46>
 8001018:	464c      	mov	r4, r9
 800101a:	4326      	orrs	r6, r4
 800101c:	d1df      	bne.n	8000fde <__gedf2+0x46>
 800101e:	e7e0      	b.n	8000fe2 <__gedf2+0x4a>
 8001020:	2000      	movs	r0, #0
 8001022:	2c00      	cmp	r4, #0
 8001024:	d0e1      	beq.n	8000fea <__gedf2+0x52>
 8001026:	e7dc      	b.n	8000fe2 <__gedf2+0x4a>
 8001028:	429a      	cmp	r2, r3
 800102a:	dc0a      	bgt.n	8001042 <__gedf2+0xaa>
 800102c:	dbe8      	blt.n	8001000 <__gedf2+0x68>
 800102e:	454f      	cmp	r7, r9
 8001030:	d8d7      	bhi.n	8000fe2 <__gedf2+0x4a>
 8001032:	d00e      	beq.n	8001052 <__gedf2+0xba>
 8001034:	2000      	movs	r0, #0
 8001036:	454f      	cmp	r7, r9
 8001038:	d2d7      	bcs.n	8000fea <__gedf2+0x52>
 800103a:	2900      	cmp	r1, #0
 800103c:	d0e2      	beq.n	8001004 <__gedf2+0x6c>
 800103e:	0008      	movs	r0, r1
 8001040:	e7d3      	b.n	8000fea <__gedf2+0x52>
 8001042:	4243      	negs	r3, r0
 8001044:	4158      	adcs	r0, r3
 8001046:	0040      	lsls	r0, r0, #1
 8001048:	3801      	subs	r0, #1
 800104a:	e7ce      	b.n	8000fea <__gedf2+0x52>
 800104c:	2002      	movs	r0, #2
 800104e:	4240      	negs	r0, r0
 8001050:	e7cb      	b.n	8000fea <__gedf2+0x52>
 8001052:	45c4      	cmp	ip, r8
 8001054:	d8c5      	bhi.n	8000fe2 <__gedf2+0x4a>
 8001056:	2000      	movs	r0, #0
 8001058:	45c4      	cmp	ip, r8
 800105a:	d2c6      	bcs.n	8000fea <__gedf2+0x52>
 800105c:	e7ed      	b.n	800103a <__gedf2+0xa2>
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	000007ff 	.word	0x000007ff

08001064 <__ledf2>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	4647      	mov	r7, r8
 8001068:	46ce      	mov	lr, r9
 800106a:	0004      	movs	r4, r0
 800106c:	0018      	movs	r0, r3
 800106e:	0016      	movs	r6, r2
 8001070:	031b      	lsls	r3, r3, #12
 8001072:	0b1b      	lsrs	r3, r3, #12
 8001074:	4d2c      	ldr	r5, [pc, #176]	; (8001128 <__ledf2+0xc4>)
 8001076:	004a      	lsls	r2, r1, #1
 8001078:	4699      	mov	r9, r3
 800107a:	b580      	push	{r7, lr}
 800107c:	0043      	lsls	r3, r0, #1
 800107e:	030f      	lsls	r7, r1, #12
 8001080:	46a4      	mov	ip, r4
 8001082:	46b0      	mov	r8, r6
 8001084:	0b3f      	lsrs	r7, r7, #12
 8001086:	0d52      	lsrs	r2, r2, #21
 8001088:	0fc9      	lsrs	r1, r1, #31
 800108a:	0d5b      	lsrs	r3, r3, #21
 800108c:	0fc0      	lsrs	r0, r0, #31
 800108e:	42aa      	cmp	r2, r5
 8001090:	d00d      	beq.n	80010ae <__ledf2+0x4a>
 8001092:	42ab      	cmp	r3, r5
 8001094:	d010      	beq.n	80010b8 <__ledf2+0x54>
 8001096:	2a00      	cmp	r2, #0
 8001098:	d127      	bne.n	80010ea <__ledf2+0x86>
 800109a:	433c      	orrs	r4, r7
 800109c:	2b00      	cmp	r3, #0
 800109e:	d111      	bne.n	80010c4 <__ledf2+0x60>
 80010a0:	464d      	mov	r5, r9
 80010a2:	432e      	orrs	r6, r5
 80010a4:	d10e      	bne.n	80010c4 <__ledf2+0x60>
 80010a6:	2000      	movs	r0, #0
 80010a8:	2c00      	cmp	r4, #0
 80010aa:	d015      	beq.n	80010d8 <__ledf2+0x74>
 80010ac:	e00e      	b.n	80010cc <__ledf2+0x68>
 80010ae:	003d      	movs	r5, r7
 80010b0:	4325      	orrs	r5, r4
 80010b2:	d110      	bne.n	80010d6 <__ledf2+0x72>
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d118      	bne.n	80010ea <__ledf2+0x86>
 80010b8:	464d      	mov	r5, r9
 80010ba:	432e      	orrs	r6, r5
 80010bc:	d10b      	bne.n	80010d6 <__ledf2+0x72>
 80010be:	2a00      	cmp	r2, #0
 80010c0:	d102      	bne.n	80010c8 <__ledf2+0x64>
 80010c2:	433c      	orrs	r4, r7
 80010c4:	2c00      	cmp	r4, #0
 80010c6:	d00b      	beq.n	80010e0 <__ledf2+0x7c>
 80010c8:	4281      	cmp	r1, r0
 80010ca:	d014      	beq.n	80010f6 <__ledf2+0x92>
 80010cc:	2002      	movs	r0, #2
 80010ce:	3901      	subs	r1, #1
 80010d0:	4008      	ands	r0, r1
 80010d2:	3801      	subs	r0, #1
 80010d4:	e000      	b.n	80010d8 <__ledf2+0x74>
 80010d6:	2002      	movs	r0, #2
 80010d8:	bcc0      	pop	{r6, r7}
 80010da:	46b9      	mov	r9, r7
 80010dc:	46b0      	mov	r8, r6
 80010de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d1f9      	bne.n	80010d8 <__ledf2+0x74>
 80010e4:	2001      	movs	r0, #1
 80010e6:	4240      	negs	r0, r0
 80010e8:	e7f6      	b.n	80010d8 <__ledf2+0x74>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1ec      	bne.n	80010c8 <__ledf2+0x64>
 80010ee:	464c      	mov	r4, r9
 80010f0:	4326      	orrs	r6, r4
 80010f2:	d1e9      	bne.n	80010c8 <__ledf2+0x64>
 80010f4:	e7ea      	b.n	80010cc <__ledf2+0x68>
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dd04      	ble.n	8001104 <__ledf2+0xa0>
 80010fa:	4243      	negs	r3, r0
 80010fc:	4158      	adcs	r0, r3
 80010fe:	0040      	lsls	r0, r0, #1
 8001100:	3801      	subs	r0, #1
 8001102:	e7e9      	b.n	80010d8 <__ledf2+0x74>
 8001104:	429a      	cmp	r2, r3
 8001106:	dbeb      	blt.n	80010e0 <__ledf2+0x7c>
 8001108:	454f      	cmp	r7, r9
 800110a:	d8df      	bhi.n	80010cc <__ledf2+0x68>
 800110c:	d006      	beq.n	800111c <__ledf2+0xb8>
 800110e:	2000      	movs	r0, #0
 8001110:	454f      	cmp	r7, r9
 8001112:	d2e1      	bcs.n	80010d8 <__ledf2+0x74>
 8001114:	2900      	cmp	r1, #0
 8001116:	d0e5      	beq.n	80010e4 <__ledf2+0x80>
 8001118:	0008      	movs	r0, r1
 800111a:	e7dd      	b.n	80010d8 <__ledf2+0x74>
 800111c:	45c4      	cmp	ip, r8
 800111e:	d8d5      	bhi.n	80010cc <__ledf2+0x68>
 8001120:	2000      	movs	r0, #0
 8001122:	45c4      	cmp	ip, r8
 8001124:	d2d8      	bcs.n	80010d8 <__ledf2+0x74>
 8001126:	e7f5      	b.n	8001114 <__ledf2+0xb0>
 8001128:	000007ff 	.word	0x000007ff

0800112c <__aeabi_dmul>:
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4657      	mov	r7, sl
 8001130:	464e      	mov	r6, r9
 8001132:	4645      	mov	r5, r8
 8001134:	46de      	mov	lr, fp
 8001136:	b5e0      	push	{r5, r6, r7, lr}
 8001138:	4698      	mov	r8, r3
 800113a:	030c      	lsls	r4, r1, #12
 800113c:	004b      	lsls	r3, r1, #1
 800113e:	0006      	movs	r6, r0
 8001140:	4692      	mov	sl, r2
 8001142:	b087      	sub	sp, #28
 8001144:	0b24      	lsrs	r4, r4, #12
 8001146:	0d5b      	lsrs	r3, r3, #21
 8001148:	0fcf      	lsrs	r7, r1, #31
 800114a:	2b00      	cmp	r3, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_dmul+0x24>
 800114e:	e15c      	b.n	800140a <__aeabi_dmul+0x2de>
 8001150:	4ad9      	ldr	r2, [pc, #868]	; (80014b8 <__aeabi_dmul+0x38c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d100      	bne.n	8001158 <__aeabi_dmul+0x2c>
 8001156:	e175      	b.n	8001444 <__aeabi_dmul+0x318>
 8001158:	0f42      	lsrs	r2, r0, #29
 800115a:	00e4      	lsls	r4, r4, #3
 800115c:	4314      	orrs	r4, r2
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	0412      	lsls	r2, r2, #16
 8001162:	4314      	orrs	r4, r2
 8001164:	4ad5      	ldr	r2, [pc, #852]	; (80014bc <__aeabi_dmul+0x390>)
 8001166:	00c5      	lsls	r5, r0, #3
 8001168:	4694      	mov	ip, r2
 800116a:	4463      	add	r3, ip
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	4699      	mov	r9, r3
 8001172:	469b      	mov	fp, r3
 8001174:	4643      	mov	r3, r8
 8001176:	4642      	mov	r2, r8
 8001178:	031e      	lsls	r6, r3, #12
 800117a:	0fd2      	lsrs	r2, r2, #31
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4650      	mov	r0, sl
 8001180:	4690      	mov	r8, r2
 8001182:	0b36      	lsrs	r6, r6, #12
 8001184:	0d5b      	lsrs	r3, r3, #21
 8001186:	d100      	bne.n	800118a <__aeabi_dmul+0x5e>
 8001188:	e120      	b.n	80013cc <__aeabi_dmul+0x2a0>
 800118a:	4acb      	ldr	r2, [pc, #812]	; (80014b8 <__aeabi_dmul+0x38c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d100      	bne.n	8001192 <__aeabi_dmul+0x66>
 8001190:	e162      	b.n	8001458 <__aeabi_dmul+0x32c>
 8001192:	49ca      	ldr	r1, [pc, #808]	; (80014bc <__aeabi_dmul+0x390>)
 8001194:	0f42      	lsrs	r2, r0, #29
 8001196:	468c      	mov	ip, r1
 8001198:	9900      	ldr	r1, [sp, #0]
 800119a:	4463      	add	r3, ip
 800119c:	00f6      	lsls	r6, r6, #3
 800119e:	468c      	mov	ip, r1
 80011a0:	4316      	orrs	r6, r2
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	449c      	add	ip, r3
 80011a6:	0412      	lsls	r2, r2, #16
 80011a8:	4663      	mov	r3, ip
 80011aa:	4316      	orrs	r6, r2
 80011ac:	00c2      	lsls	r2, r0, #3
 80011ae:	2000      	movs	r0, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	9900      	ldr	r1, [sp, #0]
 80011b4:	4643      	mov	r3, r8
 80011b6:	3101      	adds	r1, #1
 80011b8:	468c      	mov	ip, r1
 80011ba:	4649      	mov	r1, r9
 80011bc:	407b      	eors	r3, r7
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	290f      	cmp	r1, #15
 80011c2:	d826      	bhi.n	8001212 <__aeabi_dmul+0xe6>
 80011c4:	4bbe      	ldr	r3, [pc, #760]	; (80014c0 <__aeabi_dmul+0x394>)
 80011c6:	0089      	lsls	r1, r1, #2
 80011c8:	5859      	ldr	r1, [r3, r1]
 80011ca:	468f      	mov	pc, r1
 80011cc:	4643      	mov	r3, r8
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	0034      	movs	r4, r6
 80011d2:	0015      	movs	r5, r2
 80011d4:	4683      	mov	fp, r0
 80011d6:	465b      	mov	r3, fp
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d016      	beq.n	800120a <__aeabi_dmul+0xde>
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d100      	bne.n	80011e2 <__aeabi_dmul+0xb6>
 80011e0:	e203      	b.n	80015ea <__aeabi_dmul+0x4be>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d000      	beq.n	80011e8 <__aeabi_dmul+0xbc>
 80011e6:	e0cd      	b.n	8001384 <__aeabi_dmul+0x258>
 80011e8:	2200      	movs	r2, #0
 80011ea:	2400      	movs	r4, #0
 80011ec:	2500      	movs	r5, #0
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	0512      	lsls	r2, r2, #20
 80011f2:	4322      	orrs	r2, r4
 80011f4:	07db      	lsls	r3, r3, #31
 80011f6:	431a      	orrs	r2, r3
 80011f8:	0028      	movs	r0, r5
 80011fa:	0011      	movs	r1, r2
 80011fc:	b007      	add	sp, #28
 80011fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001200:	46bb      	mov	fp, r7
 8001202:	46b2      	mov	sl, r6
 8001204:	46a9      	mov	r9, r5
 8001206:	46a0      	mov	r8, r4
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	2400      	movs	r4, #0
 800120c:	2500      	movs	r5, #0
 800120e:	4aaa      	ldr	r2, [pc, #680]	; (80014b8 <__aeabi_dmul+0x38c>)
 8001210:	e7ed      	b.n	80011ee <__aeabi_dmul+0xc2>
 8001212:	0c28      	lsrs	r0, r5, #16
 8001214:	042d      	lsls	r5, r5, #16
 8001216:	0c2d      	lsrs	r5, r5, #16
 8001218:	002b      	movs	r3, r5
 800121a:	0c11      	lsrs	r1, r2, #16
 800121c:	0412      	lsls	r2, r2, #16
 800121e:	0c12      	lsrs	r2, r2, #16
 8001220:	4353      	muls	r3, r2
 8001222:	4698      	mov	r8, r3
 8001224:	0013      	movs	r3, r2
 8001226:	002f      	movs	r7, r5
 8001228:	4343      	muls	r3, r0
 800122a:	4699      	mov	r9, r3
 800122c:	434f      	muls	r7, r1
 800122e:	444f      	add	r7, r9
 8001230:	46bb      	mov	fp, r7
 8001232:	4647      	mov	r7, r8
 8001234:	000b      	movs	r3, r1
 8001236:	0c3f      	lsrs	r7, r7, #16
 8001238:	46ba      	mov	sl, r7
 800123a:	4343      	muls	r3, r0
 800123c:	44da      	add	sl, fp
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	45d1      	cmp	r9, sl
 8001242:	d904      	bls.n	800124e <__aeabi_dmul+0x122>
 8001244:	2780      	movs	r7, #128	; 0x80
 8001246:	027f      	lsls	r7, r7, #9
 8001248:	46b9      	mov	r9, r7
 800124a:	444b      	add	r3, r9
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	4653      	mov	r3, sl
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	469b      	mov	fp, r3
 8001254:	4653      	mov	r3, sl
 8001256:	041f      	lsls	r7, r3, #16
 8001258:	4643      	mov	r3, r8
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	0c1b      	lsrs	r3, r3, #16
 800125e:	4698      	mov	r8, r3
 8001260:	003b      	movs	r3, r7
 8001262:	4443      	add	r3, r8
 8001264:	9304      	str	r3, [sp, #16]
 8001266:	0c33      	lsrs	r3, r6, #16
 8001268:	0436      	lsls	r6, r6, #16
 800126a:	0c36      	lsrs	r6, r6, #16
 800126c:	4698      	mov	r8, r3
 800126e:	0033      	movs	r3, r6
 8001270:	4343      	muls	r3, r0
 8001272:	4699      	mov	r9, r3
 8001274:	4643      	mov	r3, r8
 8001276:	4343      	muls	r3, r0
 8001278:	002f      	movs	r7, r5
 800127a:	469a      	mov	sl, r3
 800127c:	4643      	mov	r3, r8
 800127e:	4377      	muls	r7, r6
 8001280:	435d      	muls	r5, r3
 8001282:	0c38      	lsrs	r0, r7, #16
 8001284:	444d      	add	r5, r9
 8001286:	1945      	adds	r5, r0, r5
 8001288:	45a9      	cmp	r9, r5
 800128a:	d903      	bls.n	8001294 <__aeabi_dmul+0x168>
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	4699      	mov	r9, r3
 8001292:	44ca      	add	sl, r9
 8001294:	043f      	lsls	r7, r7, #16
 8001296:	0c28      	lsrs	r0, r5, #16
 8001298:	0c3f      	lsrs	r7, r7, #16
 800129a:	042d      	lsls	r5, r5, #16
 800129c:	19ed      	adds	r5, r5, r7
 800129e:	0c27      	lsrs	r7, r4, #16
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	0c24      	lsrs	r4, r4, #16
 80012a4:	0003      	movs	r3, r0
 80012a6:	0020      	movs	r0, r4
 80012a8:	4350      	muls	r0, r2
 80012aa:	437a      	muls	r2, r7
 80012ac:	4691      	mov	r9, r2
 80012ae:	003a      	movs	r2, r7
 80012b0:	4453      	add	r3, sl
 80012b2:	9305      	str	r3, [sp, #20]
 80012b4:	0c03      	lsrs	r3, r0, #16
 80012b6:	469a      	mov	sl, r3
 80012b8:	434a      	muls	r2, r1
 80012ba:	4361      	muls	r1, r4
 80012bc:	4449      	add	r1, r9
 80012be:	4451      	add	r1, sl
 80012c0:	44ab      	add	fp, r5
 80012c2:	4589      	cmp	r9, r1
 80012c4:	d903      	bls.n	80012ce <__aeabi_dmul+0x1a2>
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	025b      	lsls	r3, r3, #9
 80012ca:	4699      	mov	r9, r3
 80012cc:	444a      	add	r2, r9
 80012ce:	0400      	lsls	r0, r0, #16
 80012d0:	0c0b      	lsrs	r3, r1, #16
 80012d2:	0c00      	lsrs	r0, r0, #16
 80012d4:	0409      	lsls	r1, r1, #16
 80012d6:	1809      	adds	r1, r1, r0
 80012d8:	0020      	movs	r0, r4
 80012da:	4699      	mov	r9, r3
 80012dc:	4643      	mov	r3, r8
 80012de:	4370      	muls	r0, r6
 80012e0:	435c      	muls	r4, r3
 80012e2:	437e      	muls	r6, r7
 80012e4:	435f      	muls	r7, r3
 80012e6:	0c03      	lsrs	r3, r0, #16
 80012e8:	4698      	mov	r8, r3
 80012ea:	19a4      	adds	r4, r4, r6
 80012ec:	4444      	add	r4, r8
 80012ee:	444a      	add	r2, r9
 80012f0:	9703      	str	r7, [sp, #12]
 80012f2:	42a6      	cmp	r6, r4
 80012f4:	d904      	bls.n	8001300 <__aeabi_dmul+0x1d4>
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	4698      	mov	r8, r3
 80012fc:	4447      	add	r7, r8
 80012fe:	9703      	str	r7, [sp, #12]
 8001300:	0423      	lsls	r3, r4, #16
 8001302:	9e02      	ldr	r6, [sp, #8]
 8001304:	469a      	mov	sl, r3
 8001306:	9b05      	ldr	r3, [sp, #20]
 8001308:	445e      	add	r6, fp
 800130a:	4698      	mov	r8, r3
 800130c:	42ae      	cmp	r6, r5
 800130e:	41ad      	sbcs	r5, r5
 8001310:	1876      	adds	r6, r6, r1
 8001312:	428e      	cmp	r6, r1
 8001314:	4189      	sbcs	r1, r1
 8001316:	0400      	lsls	r0, r0, #16
 8001318:	0c00      	lsrs	r0, r0, #16
 800131a:	4450      	add	r0, sl
 800131c:	4440      	add	r0, r8
 800131e:	426d      	negs	r5, r5
 8001320:	1947      	adds	r7, r0, r5
 8001322:	46b8      	mov	r8, r7
 8001324:	4693      	mov	fp, r2
 8001326:	4249      	negs	r1, r1
 8001328:	4689      	mov	r9, r1
 800132a:	44c3      	add	fp, r8
 800132c:	44d9      	add	r9, fp
 800132e:	4298      	cmp	r0, r3
 8001330:	4180      	sbcs	r0, r0
 8001332:	45a8      	cmp	r8, r5
 8001334:	41ad      	sbcs	r5, r5
 8001336:	4593      	cmp	fp, r2
 8001338:	4192      	sbcs	r2, r2
 800133a:	4589      	cmp	r9, r1
 800133c:	4189      	sbcs	r1, r1
 800133e:	426d      	negs	r5, r5
 8001340:	4240      	negs	r0, r0
 8001342:	4328      	orrs	r0, r5
 8001344:	0c24      	lsrs	r4, r4, #16
 8001346:	4252      	negs	r2, r2
 8001348:	4249      	negs	r1, r1
 800134a:	430a      	orrs	r2, r1
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	1900      	adds	r0, r0, r4
 8001350:	1880      	adds	r0, r0, r2
 8001352:	18c7      	adds	r7, r0, r3
 8001354:	464b      	mov	r3, r9
 8001356:	0ddc      	lsrs	r4, r3, #23
 8001358:	9b04      	ldr	r3, [sp, #16]
 800135a:	0275      	lsls	r5, r6, #9
 800135c:	431d      	orrs	r5, r3
 800135e:	1e6a      	subs	r2, r5, #1
 8001360:	4195      	sbcs	r5, r2
 8001362:	464b      	mov	r3, r9
 8001364:	0df6      	lsrs	r6, r6, #23
 8001366:	027f      	lsls	r7, r7, #9
 8001368:	4335      	orrs	r5, r6
 800136a:	025a      	lsls	r2, r3, #9
 800136c:	433c      	orrs	r4, r7
 800136e:	4315      	orrs	r5, r2
 8001370:	01fb      	lsls	r3, r7, #7
 8001372:	d400      	bmi.n	8001376 <__aeabi_dmul+0x24a>
 8001374:	e11c      	b.n	80015b0 <__aeabi_dmul+0x484>
 8001376:	2101      	movs	r1, #1
 8001378:	086a      	lsrs	r2, r5, #1
 800137a:	400d      	ands	r5, r1
 800137c:	4315      	orrs	r5, r2
 800137e:	07e2      	lsls	r2, r4, #31
 8001380:	4315      	orrs	r5, r2
 8001382:	0864      	lsrs	r4, r4, #1
 8001384:	494f      	ldr	r1, [pc, #316]	; (80014c4 <__aeabi_dmul+0x398>)
 8001386:	4461      	add	r1, ip
 8001388:	2900      	cmp	r1, #0
 800138a:	dc00      	bgt.n	800138e <__aeabi_dmul+0x262>
 800138c:	e0b0      	b.n	80014f0 <__aeabi_dmul+0x3c4>
 800138e:	076b      	lsls	r3, r5, #29
 8001390:	d009      	beq.n	80013a6 <__aeabi_dmul+0x27a>
 8001392:	220f      	movs	r2, #15
 8001394:	402a      	ands	r2, r5
 8001396:	2a04      	cmp	r2, #4
 8001398:	d005      	beq.n	80013a6 <__aeabi_dmul+0x27a>
 800139a:	1d2a      	adds	r2, r5, #4
 800139c:	42aa      	cmp	r2, r5
 800139e:	41ad      	sbcs	r5, r5
 80013a0:	426d      	negs	r5, r5
 80013a2:	1964      	adds	r4, r4, r5
 80013a4:	0015      	movs	r5, r2
 80013a6:	01e3      	lsls	r3, r4, #7
 80013a8:	d504      	bpl.n	80013b4 <__aeabi_dmul+0x288>
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	4a46      	ldr	r2, [pc, #280]	; (80014c8 <__aeabi_dmul+0x39c>)
 80013ae:	00c9      	lsls	r1, r1, #3
 80013b0:	4014      	ands	r4, r2
 80013b2:	4461      	add	r1, ip
 80013b4:	4a45      	ldr	r2, [pc, #276]	; (80014cc <__aeabi_dmul+0x3a0>)
 80013b6:	4291      	cmp	r1, r2
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dmul+0x290>
 80013ba:	e726      	b.n	800120a <__aeabi_dmul+0xde>
 80013bc:	0762      	lsls	r2, r4, #29
 80013be:	08ed      	lsrs	r5, r5, #3
 80013c0:	0264      	lsls	r4, r4, #9
 80013c2:	0549      	lsls	r1, r1, #21
 80013c4:	4315      	orrs	r5, r2
 80013c6:	0b24      	lsrs	r4, r4, #12
 80013c8:	0d4a      	lsrs	r2, r1, #21
 80013ca:	e710      	b.n	80011ee <__aeabi_dmul+0xc2>
 80013cc:	4652      	mov	r2, sl
 80013ce:	4332      	orrs	r2, r6
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dmul+0x2a8>
 80013d2:	e07f      	b.n	80014d4 <__aeabi_dmul+0x3a8>
 80013d4:	2e00      	cmp	r6, #0
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0x2ae>
 80013d8:	e0dc      	b.n	8001594 <__aeabi_dmul+0x468>
 80013da:	0030      	movs	r0, r6
 80013dc:	f000 fd28 	bl	8001e30 <__clzsi2>
 80013e0:	0002      	movs	r2, r0
 80013e2:	3a0b      	subs	r2, #11
 80013e4:	231d      	movs	r3, #29
 80013e6:	0001      	movs	r1, r0
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	4652      	mov	r2, sl
 80013ec:	3908      	subs	r1, #8
 80013ee:	40da      	lsrs	r2, r3
 80013f0:	408e      	lsls	r6, r1
 80013f2:	4316      	orrs	r6, r2
 80013f4:	4652      	mov	r2, sl
 80013f6:	408a      	lsls	r2, r1
 80013f8:	9b00      	ldr	r3, [sp, #0]
 80013fa:	4935      	ldr	r1, [pc, #212]	; (80014d0 <__aeabi_dmul+0x3a4>)
 80013fc:	1a18      	subs	r0, r3, r0
 80013fe:	0003      	movs	r3, r0
 8001400:	468c      	mov	ip, r1
 8001402:	4463      	add	r3, ip
 8001404:	2000      	movs	r0, #0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	e6d3      	b.n	80011b2 <__aeabi_dmul+0x86>
 800140a:	0025      	movs	r5, r4
 800140c:	4305      	orrs	r5, r0
 800140e:	d04a      	beq.n	80014a6 <__aeabi_dmul+0x37a>
 8001410:	2c00      	cmp	r4, #0
 8001412:	d100      	bne.n	8001416 <__aeabi_dmul+0x2ea>
 8001414:	e0b0      	b.n	8001578 <__aeabi_dmul+0x44c>
 8001416:	0020      	movs	r0, r4
 8001418:	f000 fd0a 	bl	8001e30 <__clzsi2>
 800141c:	0001      	movs	r1, r0
 800141e:	0002      	movs	r2, r0
 8001420:	390b      	subs	r1, #11
 8001422:	231d      	movs	r3, #29
 8001424:	0010      	movs	r0, r2
 8001426:	1a5b      	subs	r3, r3, r1
 8001428:	0031      	movs	r1, r6
 800142a:	0035      	movs	r5, r6
 800142c:	3808      	subs	r0, #8
 800142e:	4084      	lsls	r4, r0
 8001430:	40d9      	lsrs	r1, r3
 8001432:	4085      	lsls	r5, r0
 8001434:	430c      	orrs	r4, r1
 8001436:	4826      	ldr	r0, [pc, #152]	; (80014d0 <__aeabi_dmul+0x3a4>)
 8001438:	1a83      	subs	r3, r0, r2
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2300      	movs	r3, #0
 800143e:	4699      	mov	r9, r3
 8001440:	469b      	mov	fp, r3
 8001442:	e697      	b.n	8001174 <__aeabi_dmul+0x48>
 8001444:	0005      	movs	r5, r0
 8001446:	4325      	orrs	r5, r4
 8001448:	d126      	bne.n	8001498 <__aeabi_dmul+0x36c>
 800144a:	2208      	movs	r2, #8
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2302      	movs	r3, #2
 8001450:	2400      	movs	r4, #0
 8001452:	4691      	mov	r9, r2
 8001454:	469b      	mov	fp, r3
 8001456:	e68d      	b.n	8001174 <__aeabi_dmul+0x48>
 8001458:	4652      	mov	r2, sl
 800145a:	9b00      	ldr	r3, [sp, #0]
 800145c:	4332      	orrs	r2, r6
 800145e:	d110      	bne.n	8001482 <__aeabi_dmul+0x356>
 8001460:	4915      	ldr	r1, [pc, #84]	; (80014b8 <__aeabi_dmul+0x38c>)
 8001462:	2600      	movs	r6, #0
 8001464:	468c      	mov	ip, r1
 8001466:	4463      	add	r3, ip
 8001468:	4649      	mov	r1, r9
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2302      	movs	r3, #2
 800146e:	4319      	orrs	r1, r3
 8001470:	4689      	mov	r9, r1
 8001472:	2002      	movs	r0, #2
 8001474:	e69d      	b.n	80011b2 <__aeabi_dmul+0x86>
 8001476:	465b      	mov	r3, fp
 8001478:	9701      	str	r7, [sp, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d000      	beq.n	8001480 <__aeabi_dmul+0x354>
 800147e:	e6ad      	b.n	80011dc <__aeabi_dmul+0xb0>
 8001480:	e6c3      	b.n	800120a <__aeabi_dmul+0xde>
 8001482:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <__aeabi_dmul+0x38c>)
 8001484:	2003      	movs	r0, #3
 8001486:	4694      	mov	ip, r2
 8001488:	4463      	add	r3, ip
 800148a:	464a      	mov	r2, r9
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2303      	movs	r3, #3
 8001490:	431a      	orrs	r2, r3
 8001492:	4691      	mov	r9, r2
 8001494:	4652      	mov	r2, sl
 8001496:	e68c      	b.n	80011b2 <__aeabi_dmul+0x86>
 8001498:	220c      	movs	r2, #12
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2303      	movs	r3, #3
 800149e:	0005      	movs	r5, r0
 80014a0:	4691      	mov	r9, r2
 80014a2:	469b      	mov	fp, r3
 80014a4:	e666      	b.n	8001174 <__aeabi_dmul+0x48>
 80014a6:	2304      	movs	r3, #4
 80014a8:	4699      	mov	r9, r3
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	2400      	movs	r4, #0
 80014b2:	469b      	mov	fp, r3
 80014b4:	e65e      	b.n	8001174 <__aeabi_dmul+0x48>
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	000007ff 	.word	0x000007ff
 80014bc:	fffffc01 	.word	0xfffffc01
 80014c0:	08006ad4 	.word	0x08006ad4
 80014c4:	000003ff 	.word	0x000003ff
 80014c8:	feffffff 	.word	0xfeffffff
 80014cc:	000007fe 	.word	0x000007fe
 80014d0:	fffffc0d 	.word	0xfffffc0d
 80014d4:	4649      	mov	r1, r9
 80014d6:	2301      	movs	r3, #1
 80014d8:	4319      	orrs	r1, r3
 80014da:	4689      	mov	r9, r1
 80014dc:	2600      	movs	r6, #0
 80014de:	2001      	movs	r0, #1
 80014e0:	e667      	b.n	80011b2 <__aeabi_dmul+0x86>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2480      	movs	r4, #128	; 0x80
 80014e6:	2500      	movs	r5, #0
 80014e8:	4a43      	ldr	r2, [pc, #268]	; (80015f8 <__aeabi_dmul+0x4cc>)
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	0324      	lsls	r4, r4, #12
 80014ee:	e67e      	b.n	80011ee <__aeabi_dmul+0xc2>
 80014f0:	2001      	movs	r0, #1
 80014f2:	1a40      	subs	r0, r0, r1
 80014f4:	2838      	cmp	r0, #56	; 0x38
 80014f6:	dd00      	ble.n	80014fa <__aeabi_dmul+0x3ce>
 80014f8:	e676      	b.n	80011e8 <__aeabi_dmul+0xbc>
 80014fa:	281f      	cmp	r0, #31
 80014fc:	dd5b      	ble.n	80015b6 <__aeabi_dmul+0x48a>
 80014fe:	221f      	movs	r2, #31
 8001500:	0023      	movs	r3, r4
 8001502:	4252      	negs	r2, r2
 8001504:	1a51      	subs	r1, r2, r1
 8001506:	40cb      	lsrs	r3, r1
 8001508:	0019      	movs	r1, r3
 800150a:	2820      	cmp	r0, #32
 800150c:	d003      	beq.n	8001516 <__aeabi_dmul+0x3ea>
 800150e:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <__aeabi_dmul+0x4d0>)
 8001510:	4462      	add	r2, ip
 8001512:	4094      	lsls	r4, r2
 8001514:	4325      	orrs	r5, r4
 8001516:	1e6a      	subs	r2, r5, #1
 8001518:	4195      	sbcs	r5, r2
 800151a:	002a      	movs	r2, r5
 800151c:	430a      	orrs	r2, r1
 800151e:	2107      	movs	r1, #7
 8001520:	000d      	movs	r5, r1
 8001522:	2400      	movs	r4, #0
 8001524:	4015      	ands	r5, r2
 8001526:	4211      	tst	r1, r2
 8001528:	d05b      	beq.n	80015e2 <__aeabi_dmul+0x4b6>
 800152a:	210f      	movs	r1, #15
 800152c:	2400      	movs	r4, #0
 800152e:	4011      	ands	r1, r2
 8001530:	2904      	cmp	r1, #4
 8001532:	d053      	beq.n	80015dc <__aeabi_dmul+0x4b0>
 8001534:	1d11      	adds	r1, r2, #4
 8001536:	4291      	cmp	r1, r2
 8001538:	4192      	sbcs	r2, r2
 800153a:	4252      	negs	r2, r2
 800153c:	18a4      	adds	r4, r4, r2
 800153e:	000a      	movs	r2, r1
 8001540:	0223      	lsls	r3, r4, #8
 8001542:	d54b      	bpl.n	80015dc <__aeabi_dmul+0x4b0>
 8001544:	2201      	movs	r2, #1
 8001546:	2400      	movs	r4, #0
 8001548:	2500      	movs	r5, #0
 800154a:	e650      	b.n	80011ee <__aeabi_dmul+0xc2>
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	031b      	lsls	r3, r3, #12
 8001550:	421c      	tst	r4, r3
 8001552:	d009      	beq.n	8001568 <__aeabi_dmul+0x43c>
 8001554:	421e      	tst	r6, r3
 8001556:	d107      	bne.n	8001568 <__aeabi_dmul+0x43c>
 8001558:	4333      	orrs	r3, r6
 800155a:	031c      	lsls	r4, r3, #12
 800155c:	4643      	mov	r3, r8
 800155e:	0015      	movs	r5, r2
 8001560:	0b24      	lsrs	r4, r4, #12
 8001562:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <__aeabi_dmul+0x4cc>)
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	e642      	b.n	80011ee <__aeabi_dmul+0xc2>
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	4314      	orrs	r4, r2
 800156e:	0324      	lsls	r4, r4, #12
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <__aeabi_dmul+0x4cc>)
 8001572:	0b24      	lsrs	r4, r4, #12
 8001574:	9701      	str	r7, [sp, #4]
 8001576:	e63a      	b.n	80011ee <__aeabi_dmul+0xc2>
 8001578:	f000 fc5a 	bl	8001e30 <__clzsi2>
 800157c:	0001      	movs	r1, r0
 800157e:	0002      	movs	r2, r0
 8001580:	3115      	adds	r1, #21
 8001582:	3220      	adds	r2, #32
 8001584:	291c      	cmp	r1, #28
 8001586:	dc00      	bgt.n	800158a <__aeabi_dmul+0x45e>
 8001588:	e74b      	b.n	8001422 <__aeabi_dmul+0x2f6>
 800158a:	0034      	movs	r4, r6
 800158c:	3808      	subs	r0, #8
 800158e:	2500      	movs	r5, #0
 8001590:	4084      	lsls	r4, r0
 8001592:	e750      	b.n	8001436 <__aeabi_dmul+0x30a>
 8001594:	f000 fc4c 	bl	8001e30 <__clzsi2>
 8001598:	0003      	movs	r3, r0
 800159a:	001a      	movs	r2, r3
 800159c:	3215      	adds	r2, #21
 800159e:	3020      	adds	r0, #32
 80015a0:	2a1c      	cmp	r2, #28
 80015a2:	dc00      	bgt.n	80015a6 <__aeabi_dmul+0x47a>
 80015a4:	e71e      	b.n	80013e4 <__aeabi_dmul+0x2b8>
 80015a6:	4656      	mov	r6, sl
 80015a8:	3b08      	subs	r3, #8
 80015aa:	2200      	movs	r2, #0
 80015ac:	409e      	lsls	r6, r3
 80015ae:	e723      	b.n	80013f8 <__aeabi_dmul+0x2cc>
 80015b0:	9b00      	ldr	r3, [sp, #0]
 80015b2:	469c      	mov	ip, r3
 80015b4:	e6e6      	b.n	8001384 <__aeabi_dmul+0x258>
 80015b6:	4912      	ldr	r1, [pc, #72]	; (8001600 <__aeabi_dmul+0x4d4>)
 80015b8:	0022      	movs	r2, r4
 80015ba:	4461      	add	r1, ip
 80015bc:	002e      	movs	r6, r5
 80015be:	408d      	lsls	r5, r1
 80015c0:	408a      	lsls	r2, r1
 80015c2:	40c6      	lsrs	r6, r0
 80015c4:	1e69      	subs	r1, r5, #1
 80015c6:	418d      	sbcs	r5, r1
 80015c8:	4332      	orrs	r2, r6
 80015ca:	432a      	orrs	r2, r5
 80015cc:	40c4      	lsrs	r4, r0
 80015ce:	0753      	lsls	r3, r2, #29
 80015d0:	d0b6      	beq.n	8001540 <__aeabi_dmul+0x414>
 80015d2:	210f      	movs	r1, #15
 80015d4:	4011      	ands	r1, r2
 80015d6:	2904      	cmp	r1, #4
 80015d8:	d1ac      	bne.n	8001534 <__aeabi_dmul+0x408>
 80015da:	e7b1      	b.n	8001540 <__aeabi_dmul+0x414>
 80015dc:	0765      	lsls	r5, r4, #29
 80015de:	0264      	lsls	r4, r4, #9
 80015e0:	0b24      	lsrs	r4, r4, #12
 80015e2:	08d2      	lsrs	r2, r2, #3
 80015e4:	4315      	orrs	r5, r2
 80015e6:	2200      	movs	r2, #0
 80015e8:	e601      	b.n	80011ee <__aeabi_dmul+0xc2>
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0312      	lsls	r2, r2, #12
 80015ee:	4314      	orrs	r4, r2
 80015f0:	0324      	lsls	r4, r4, #12
 80015f2:	4a01      	ldr	r2, [pc, #4]	; (80015f8 <__aeabi_dmul+0x4cc>)
 80015f4:	0b24      	lsrs	r4, r4, #12
 80015f6:	e5fa      	b.n	80011ee <__aeabi_dmul+0xc2>
 80015f8:	000007ff 	.word	0x000007ff
 80015fc:	0000043e 	.word	0x0000043e
 8001600:	0000041e 	.word	0x0000041e

08001604 <__aeabi_dsub>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	4657      	mov	r7, sl
 8001608:	464e      	mov	r6, r9
 800160a:	4645      	mov	r5, r8
 800160c:	46de      	mov	lr, fp
 800160e:	b5e0      	push	{r5, r6, r7, lr}
 8001610:	001e      	movs	r6, r3
 8001612:	0017      	movs	r7, r2
 8001614:	004a      	lsls	r2, r1, #1
 8001616:	030b      	lsls	r3, r1, #12
 8001618:	0d52      	lsrs	r2, r2, #21
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	4690      	mov	r8, r2
 800161e:	0f42      	lsrs	r2, r0, #29
 8001620:	431a      	orrs	r2, r3
 8001622:	0fcd      	lsrs	r5, r1, #31
 8001624:	4ccd      	ldr	r4, [pc, #820]	; (800195c <__aeabi_dsub+0x358>)
 8001626:	0331      	lsls	r1, r6, #12
 8001628:	00c3      	lsls	r3, r0, #3
 800162a:	4694      	mov	ip, r2
 800162c:	0070      	lsls	r0, r6, #1
 800162e:	0f7a      	lsrs	r2, r7, #29
 8001630:	0a49      	lsrs	r1, r1, #9
 8001632:	00ff      	lsls	r7, r7, #3
 8001634:	469a      	mov	sl, r3
 8001636:	46b9      	mov	r9, r7
 8001638:	0d40      	lsrs	r0, r0, #21
 800163a:	0ff6      	lsrs	r6, r6, #31
 800163c:	4311      	orrs	r1, r2
 800163e:	42a0      	cmp	r0, r4
 8001640:	d100      	bne.n	8001644 <__aeabi_dsub+0x40>
 8001642:	e0b1      	b.n	80017a8 <__aeabi_dsub+0x1a4>
 8001644:	2201      	movs	r2, #1
 8001646:	4056      	eors	r6, r2
 8001648:	46b3      	mov	fp, r6
 800164a:	42b5      	cmp	r5, r6
 800164c:	d100      	bne.n	8001650 <__aeabi_dsub+0x4c>
 800164e:	e088      	b.n	8001762 <__aeabi_dsub+0x15e>
 8001650:	4642      	mov	r2, r8
 8001652:	1a12      	subs	r2, r2, r0
 8001654:	2a00      	cmp	r2, #0
 8001656:	dc00      	bgt.n	800165a <__aeabi_dsub+0x56>
 8001658:	e0ae      	b.n	80017b8 <__aeabi_dsub+0x1b4>
 800165a:	2800      	cmp	r0, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dsub+0x5c>
 800165e:	e0c1      	b.n	80017e4 <__aeabi_dsub+0x1e0>
 8001660:	48be      	ldr	r0, [pc, #760]	; (800195c <__aeabi_dsub+0x358>)
 8001662:	4580      	cmp	r8, r0
 8001664:	d100      	bne.n	8001668 <__aeabi_dsub+0x64>
 8001666:	e151      	b.n	800190c <__aeabi_dsub+0x308>
 8001668:	2080      	movs	r0, #128	; 0x80
 800166a:	0400      	lsls	r0, r0, #16
 800166c:	4301      	orrs	r1, r0
 800166e:	2a38      	cmp	r2, #56	; 0x38
 8001670:	dd00      	ble.n	8001674 <__aeabi_dsub+0x70>
 8001672:	e17b      	b.n	800196c <__aeabi_dsub+0x368>
 8001674:	2a1f      	cmp	r2, #31
 8001676:	dd00      	ble.n	800167a <__aeabi_dsub+0x76>
 8001678:	e1ee      	b.n	8001a58 <__aeabi_dsub+0x454>
 800167a:	2020      	movs	r0, #32
 800167c:	003e      	movs	r6, r7
 800167e:	1a80      	subs	r0, r0, r2
 8001680:	000c      	movs	r4, r1
 8001682:	40d6      	lsrs	r6, r2
 8001684:	40d1      	lsrs	r1, r2
 8001686:	4087      	lsls	r7, r0
 8001688:	4662      	mov	r2, ip
 800168a:	4084      	lsls	r4, r0
 800168c:	1a52      	subs	r2, r2, r1
 800168e:	1e78      	subs	r0, r7, #1
 8001690:	4187      	sbcs	r7, r0
 8001692:	4694      	mov	ip, r2
 8001694:	4334      	orrs	r4, r6
 8001696:	4327      	orrs	r7, r4
 8001698:	1bdc      	subs	r4, r3, r7
 800169a:	42a3      	cmp	r3, r4
 800169c:	419b      	sbcs	r3, r3
 800169e:	4662      	mov	r2, ip
 80016a0:	425b      	negs	r3, r3
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4699      	mov	r9, r3
 80016a6:	464b      	mov	r3, r9
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	d400      	bmi.n	80016ae <__aeabi_dsub+0xaa>
 80016ac:	e118      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 80016ae:	464b      	mov	r3, r9
 80016b0:	0258      	lsls	r0, r3, #9
 80016b2:	0a43      	lsrs	r3, r0, #9
 80016b4:	4699      	mov	r9, r3
 80016b6:	464b      	mov	r3, r9
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dsub+0xba>
 80016bc:	e137      	b.n	800192e <__aeabi_dsub+0x32a>
 80016be:	4648      	mov	r0, r9
 80016c0:	f000 fbb6 	bl	8001e30 <__clzsi2>
 80016c4:	0001      	movs	r1, r0
 80016c6:	3908      	subs	r1, #8
 80016c8:	2320      	movs	r3, #32
 80016ca:	0022      	movs	r2, r4
 80016cc:	4648      	mov	r0, r9
 80016ce:	1a5b      	subs	r3, r3, r1
 80016d0:	40da      	lsrs	r2, r3
 80016d2:	4088      	lsls	r0, r1
 80016d4:	408c      	lsls	r4, r1
 80016d6:	4643      	mov	r3, r8
 80016d8:	4310      	orrs	r0, r2
 80016da:	4588      	cmp	r8, r1
 80016dc:	dd00      	ble.n	80016e0 <__aeabi_dsub+0xdc>
 80016de:	e136      	b.n	800194e <__aeabi_dsub+0x34a>
 80016e0:	1ac9      	subs	r1, r1, r3
 80016e2:	1c4b      	adds	r3, r1, #1
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dsub+0xe6>
 80016e8:	e0ea      	b.n	80018c0 <__aeabi_dsub+0x2bc>
 80016ea:	2220      	movs	r2, #32
 80016ec:	0026      	movs	r6, r4
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	0001      	movs	r1, r0
 80016f2:	4094      	lsls	r4, r2
 80016f4:	40de      	lsrs	r6, r3
 80016f6:	40d8      	lsrs	r0, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	4091      	lsls	r1, r2
 80016fc:	1e62      	subs	r2, r4, #1
 80016fe:	4194      	sbcs	r4, r2
 8001700:	4681      	mov	r9, r0
 8001702:	4698      	mov	r8, r3
 8001704:	4331      	orrs	r1, r6
 8001706:	430c      	orrs	r4, r1
 8001708:	0763      	lsls	r3, r4, #29
 800170a:	d009      	beq.n	8001720 <__aeabi_dsub+0x11c>
 800170c:	230f      	movs	r3, #15
 800170e:	4023      	ands	r3, r4
 8001710:	2b04      	cmp	r3, #4
 8001712:	d005      	beq.n	8001720 <__aeabi_dsub+0x11c>
 8001714:	1d23      	adds	r3, r4, #4
 8001716:	42a3      	cmp	r3, r4
 8001718:	41a4      	sbcs	r4, r4
 800171a:	4264      	negs	r4, r4
 800171c:	44a1      	add	r9, r4
 800171e:	001c      	movs	r4, r3
 8001720:	464b      	mov	r3, r9
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	d400      	bmi.n	8001728 <__aeabi_dsub+0x124>
 8001726:	e0de      	b.n	80018e6 <__aeabi_dsub+0x2e2>
 8001728:	4641      	mov	r1, r8
 800172a:	4b8c      	ldr	r3, [pc, #560]	; (800195c <__aeabi_dsub+0x358>)
 800172c:	3101      	adds	r1, #1
 800172e:	4299      	cmp	r1, r3
 8001730:	d100      	bne.n	8001734 <__aeabi_dsub+0x130>
 8001732:	e0e7      	b.n	8001904 <__aeabi_dsub+0x300>
 8001734:	464b      	mov	r3, r9
 8001736:	488a      	ldr	r0, [pc, #552]	; (8001960 <__aeabi_dsub+0x35c>)
 8001738:	08e4      	lsrs	r4, r4, #3
 800173a:	4003      	ands	r3, r0
 800173c:	0018      	movs	r0, r3
 800173e:	0549      	lsls	r1, r1, #21
 8001740:	075b      	lsls	r3, r3, #29
 8001742:	0240      	lsls	r0, r0, #9
 8001744:	4323      	orrs	r3, r4
 8001746:	0d4a      	lsrs	r2, r1, #21
 8001748:	0b04      	lsrs	r4, r0, #12
 800174a:	0512      	lsls	r2, r2, #20
 800174c:	07ed      	lsls	r5, r5, #31
 800174e:	4322      	orrs	r2, r4
 8001750:	432a      	orrs	r2, r5
 8001752:	0018      	movs	r0, r3
 8001754:	0011      	movs	r1, r2
 8001756:	bcf0      	pop	{r4, r5, r6, r7}
 8001758:	46bb      	mov	fp, r7
 800175a:	46b2      	mov	sl, r6
 800175c:	46a9      	mov	r9, r5
 800175e:	46a0      	mov	r8, r4
 8001760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001762:	4642      	mov	r2, r8
 8001764:	1a12      	subs	r2, r2, r0
 8001766:	2a00      	cmp	r2, #0
 8001768:	dd52      	ble.n	8001810 <__aeabi_dsub+0x20c>
 800176a:	2800      	cmp	r0, #0
 800176c:	d100      	bne.n	8001770 <__aeabi_dsub+0x16c>
 800176e:	e09c      	b.n	80018aa <__aeabi_dsub+0x2a6>
 8001770:	45a0      	cmp	r8, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dsub+0x172>
 8001774:	e0ca      	b.n	800190c <__aeabi_dsub+0x308>
 8001776:	2080      	movs	r0, #128	; 0x80
 8001778:	0400      	lsls	r0, r0, #16
 800177a:	4301      	orrs	r1, r0
 800177c:	2a38      	cmp	r2, #56	; 0x38
 800177e:	dd00      	ble.n	8001782 <__aeabi_dsub+0x17e>
 8001780:	e149      	b.n	8001a16 <__aeabi_dsub+0x412>
 8001782:	2a1f      	cmp	r2, #31
 8001784:	dc00      	bgt.n	8001788 <__aeabi_dsub+0x184>
 8001786:	e197      	b.n	8001ab8 <__aeabi_dsub+0x4b4>
 8001788:	0010      	movs	r0, r2
 800178a:	000e      	movs	r6, r1
 800178c:	3820      	subs	r0, #32
 800178e:	40c6      	lsrs	r6, r0
 8001790:	2a20      	cmp	r2, #32
 8001792:	d004      	beq.n	800179e <__aeabi_dsub+0x19a>
 8001794:	2040      	movs	r0, #64	; 0x40
 8001796:	1a82      	subs	r2, r0, r2
 8001798:	4091      	lsls	r1, r2
 800179a:	430f      	orrs	r7, r1
 800179c:	46b9      	mov	r9, r7
 800179e:	464c      	mov	r4, r9
 80017a0:	1e62      	subs	r2, r4, #1
 80017a2:	4194      	sbcs	r4, r2
 80017a4:	4334      	orrs	r4, r6
 80017a6:	e13a      	b.n	8001a1e <__aeabi_dsub+0x41a>
 80017a8:	000a      	movs	r2, r1
 80017aa:	433a      	orrs	r2, r7
 80017ac:	d028      	beq.n	8001800 <__aeabi_dsub+0x1fc>
 80017ae:	46b3      	mov	fp, r6
 80017b0:	42b5      	cmp	r5, r6
 80017b2:	d02b      	beq.n	800180c <__aeabi_dsub+0x208>
 80017b4:	4a6b      	ldr	r2, [pc, #428]	; (8001964 <__aeabi_dsub+0x360>)
 80017b6:	4442      	add	r2, r8
 80017b8:	2a00      	cmp	r2, #0
 80017ba:	d05d      	beq.n	8001878 <__aeabi_dsub+0x274>
 80017bc:	4642      	mov	r2, r8
 80017be:	4644      	mov	r4, r8
 80017c0:	1a82      	subs	r2, r0, r2
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d000      	beq.n	80017c8 <__aeabi_dsub+0x1c4>
 80017c6:	e0f5      	b.n	80019b4 <__aeabi_dsub+0x3b0>
 80017c8:	4665      	mov	r5, ip
 80017ca:	431d      	orrs	r5, r3
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dsub+0x1cc>
 80017ce:	e19c      	b.n	8001b0a <__aeabi_dsub+0x506>
 80017d0:	1e55      	subs	r5, r2, #1
 80017d2:	2a01      	cmp	r2, #1
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x1d4>
 80017d6:	e1fb      	b.n	8001bd0 <__aeabi_dsub+0x5cc>
 80017d8:	4c60      	ldr	r4, [pc, #384]	; (800195c <__aeabi_dsub+0x358>)
 80017da:	42a2      	cmp	r2, r4
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dsub+0x1dc>
 80017de:	e1bd      	b.n	8001b5c <__aeabi_dsub+0x558>
 80017e0:	002a      	movs	r2, r5
 80017e2:	e0f0      	b.n	80019c6 <__aeabi_dsub+0x3c2>
 80017e4:	0008      	movs	r0, r1
 80017e6:	4338      	orrs	r0, r7
 80017e8:	d100      	bne.n	80017ec <__aeabi_dsub+0x1e8>
 80017ea:	e0c3      	b.n	8001974 <__aeabi_dsub+0x370>
 80017ec:	1e50      	subs	r0, r2, #1
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dsub+0x1f0>
 80017f2:	e1a8      	b.n	8001b46 <__aeabi_dsub+0x542>
 80017f4:	4c59      	ldr	r4, [pc, #356]	; (800195c <__aeabi_dsub+0x358>)
 80017f6:	42a2      	cmp	r2, r4
 80017f8:	d100      	bne.n	80017fc <__aeabi_dsub+0x1f8>
 80017fa:	e087      	b.n	800190c <__aeabi_dsub+0x308>
 80017fc:	0002      	movs	r2, r0
 80017fe:	e736      	b.n	800166e <__aeabi_dsub+0x6a>
 8001800:	2201      	movs	r2, #1
 8001802:	4056      	eors	r6, r2
 8001804:	46b3      	mov	fp, r6
 8001806:	42b5      	cmp	r5, r6
 8001808:	d000      	beq.n	800180c <__aeabi_dsub+0x208>
 800180a:	e721      	b.n	8001650 <__aeabi_dsub+0x4c>
 800180c:	4a55      	ldr	r2, [pc, #340]	; (8001964 <__aeabi_dsub+0x360>)
 800180e:	4442      	add	r2, r8
 8001810:	2a00      	cmp	r2, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dsub+0x212>
 8001814:	e0b5      	b.n	8001982 <__aeabi_dsub+0x37e>
 8001816:	4642      	mov	r2, r8
 8001818:	4644      	mov	r4, r8
 800181a:	1a82      	subs	r2, r0, r2
 800181c:	2c00      	cmp	r4, #0
 800181e:	d100      	bne.n	8001822 <__aeabi_dsub+0x21e>
 8001820:	e138      	b.n	8001a94 <__aeabi_dsub+0x490>
 8001822:	4e4e      	ldr	r6, [pc, #312]	; (800195c <__aeabi_dsub+0x358>)
 8001824:	42b0      	cmp	r0, r6
 8001826:	d100      	bne.n	800182a <__aeabi_dsub+0x226>
 8001828:	e1de      	b.n	8001be8 <__aeabi_dsub+0x5e4>
 800182a:	2680      	movs	r6, #128	; 0x80
 800182c:	4664      	mov	r4, ip
 800182e:	0436      	lsls	r6, r6, #16
 8001830:	4334      	orrs	r4, r6
 8001832:	46a4      	mov	ip, r4
 8001834:	2a38      	cmp	r2, #56	; 0x38
 8001836:	dd00      	ble.n	800183a <__aeabi_dsub+0x236>
 8001838:	e196      	b.n	8001b68 <__aeabi_dsub+0x564>
 800183a:	2a1f      	cmp	r2, #31
 800183c:	dd00      	ble.n	8001840 <__aeabi_dsub+0x23c>
 800183e:	e224      	b.n	8001c8a <__aeabi_dsub+0x686>
 8001840:	2620      	movs	r6, #32
 8001842:	1ab4      	subs	r4, r6, r2
 8001844:	46a2      	mov	sl, r4
 8001846:	4664      	mov	r4, ip
 8001848:	4656      	mov	r6, sl
 800184a:	40b4      	lsls	r4, r6
 800184c:	46a1      	mov	r9, r4
 800184e:	001c      	movs	r4, r3
 8001850:	464e      	mov	r6, r9
 8001852:	40d4      	lsrs	r4, r2
 8001854:	4326      	orrs	r6, r4
 8001856:	0034      	movs	r4, r6
 8001858:	4656      	mov	r6, sl
 800185a:	40b3      	lsls	r3, r6
 800185c:	1e5e      	subs	r6, r3, #1
 800185e:	41b3      	sbcs	r3, r6
 8001860:	431c      	orrs	r4, r3
 8001862:	4663      	mov	r3, ip
 8001864:	40d3      	lsrs	r3, r2
 8001866:	18c9      	adds	r1, r1, r3
 8001868:	19e4      	adds	r4, r4, r7
 800186a:	42bc      	cmp	r4, r7
 800186c:	41bf      	sbcs	r7, r7
 800186e:	427f      	negs	r7, r7
 8001870:	46b9      	mov	r9, r7
 8001872:	4680      	mov	r8, r0
 8001874:	4489      	add	r9, r1
 8001876:	e0d8      	b.n	8001a2a <__aeabi_dsub+0x426>
 8001878:	4640      	mov	r0, r8
 800187a:	4c3b      	ldr	r4, [pc, #236]	; (8001968 <__aeabi_dsub+0x364>)
 800187c:	3001      	adds	r0, #1
 800187e:	4220      	tst	r0, r4
 8001880:	d000      	beq.n	8001884 <__aeabi_dsub+0x280>
 8001882:	e0b4      	b.n	80019ee <__aeabi_dsub+0x3ea>
 8001884:	4640      	mov	r0, r8
 8001886:	2800      	cmp	r0, #0
 8001888:	d000      	beq.n	800188c <__aeabi_dsub+0x288>
 800188a:	e144      	b.n	8001b16 <__aeabi_dsub+0x512>
 800188c:	4660      	mov	r0, ip
 800188e:	4318      	orrs	r0, r3
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x290>
 8001892:	e190      	b.n	8001bb6 <__aeabi_dsub+0x5b2>
 8001894:	0008      	movs	r0, r1
 8001896:	4338      	orrs	r0, r7
 8001898:	d000      	beq.n	800189c <__aeabi_dsub+0x298>
 800189a:	e1aa      	b.n	8001bf2 <__aeabi_dsub+0x5ee>
 800189c:	4661      	mov	r1, ip
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	0749      	lsls	r1, r1, #29
 80018a2:	430b      	orrs	r3, r1
 80018a4:	4661      	mov	r1, ip
 80018a6:	08cc      	lsrs	r4, r1, #3
 80018a8:	e027      	b.n	80018fa <__aeabi_dsub+0x2f6>
 80018aa:	0008      	movs	r0, r1
 80018ac:	4338      	orrs	r0, r7
 80018ae:	d061      	beq.n	8001974 <__aeabi_dsub+0x370>
 80018b0:	1e50      	subs	r0, r2, #1
 80018b2:	2a01      	cmp	r2, #1
 80018b4:	d100      	bne.n	80018b8 <__aeabi_dsub+0x2b4>
 80018b6:	e139      	b.n	8001b2c <__aeabi_dsub+0x528>
 80018b8:	42a2      	cmp	r2, r4
 80018ba:	d027      	beq.n	800190c <__aeabi_dsub+0x308>
 80018bc:	0002      	movs	r2, r0
 80018be:	e75d      	b.n	800177c <__aeabi_dsub+0x178>
 80018c0:	0002      	movs	r2, r0
 80018c2:	391f      	subs	r1, #31
 80018c4:	40ca      	lsrs	r2, r1
 80018c6:	0011      	movs	r1, r2
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d003      	beq.n	80018d4 <__aeabi_dsub+0x2d0>
 80018cc:	2240      	movs	r2, #64	; 0x40
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4098      	lsls	r0, r3
 80018d2:	4304      	orrs	r4, r0
 80018d4:	1e63      	subs	r3, r4, #1
 80018d6:	419c      	sbcs	r4, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	4699      	mov	r9, r3
 80018dc:	4698      	mov	r8, r3
 80018de:	430c      	orrs	r4, r1
 80018e0:	0763      	lsls	r3, r4, #29
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x2e2>
 80018e4:	e712      	b.n	800170c <__aeabi_dsub+0x108>
 80018e6:	464b      	mov	r3, r9
 80018e8:	464a      	mov	r2, r9
 80018ea:	08e4      	lsrs	r4, r4, #3
 80018ec:	075b      	lsls	r3, r3, #29
 80018ee:	4323      	orrs	r3, r4
 80018f0:	08d4      	lsrs	r4, r2, #3
 80018f2:	4642      	mov	r2, r8
 80018f4:	4919      	ldr	r1, [pc, #100]	; (800195c <__aeabi_dsub+0x358>)
 80018f6:	428a      	cmp	r2, r1
 80018f8:	d00e      	beq.n	8001918 <__aeabi_dsub+0x314>
 80018fa:	0324      	lsls	r4, r4, #12
 80018fc:	0552      	lsls	r2, r2, #21
 80018fe:	0b24      	lsrs	r4, r4, #12
 8001900:	0d52      	lsrs	r2, r2, #21
 8001902:	e722      	b.n	800174a <__aeabi_dsub+0x146>
 8001904:	000a      	movs	r2, r1
 8001906:	2400      	movs	r4, #0
 8001908:	2300      	movs	r3, #0
 800190a:	e71e      	b.n	800174a <__aeabi_dsub+0x146>
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	4662      	mov	r2, ip
 8001910:	0752      	lsls	r2, r2, #29
 8001912:	4313      	orrs	r3, r2
 8001914:	4662      	mov	r2, ip
 8001916:	08d4      	lsrs	r4, r2, #3
 8001918:	001a      	movs	r2, r3
 800191a:	4322      	orrs	r2, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x31c>
 800191e:	e1fc      	b.n	8001d1a <__aeabi_dsub+0x716>
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	0312      	lsls	r2, r2, #12
 8001924:	4314      	orrs	r4, r2
 8001926:	0324      	lsls	r4, r4, #12
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <__aeabi_dsub+0x358>)
 800192a:	0b24      	lsrs	r4, r4, #12
 800192c:	e70d      	b.n	800174a <__aeabi_dsub+0x146>
 800192e:	0020      	movs	r0, r4
 8001930:	f000 fa7e 	bl	8001e30 <__clzsi2>
 8001934:	0001      	movs	r1, r0
 8001936:	3118      	adds	r1, #24
 8001938:	291f      	cmp	r1, #31
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x33a>
 800193c:	e6c4      	b.n	80016c8 <__aeabi_dsub+0xc4>
 800193e:	3808      	subs	r0, #8
 8001940:	4084      	lsls	r4, r0
 8001942:	4643      	mov	r3, r8
 8001944:	0020      	movs	r0, r4
 8001946:	2400      	movs	r4, #0
 8001948:	4588      	cmp	r8, r1
 800194a:	dc00      	bgt.n	800194e <__aeabi_dsub+0x34a>
 800194c:	e6c8      	b.n	80016e0 <__aeabi_dsub+0xdc>
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__aeabi_dsub+0x35c>)
 8001950:	1a5b      	subs	r3, r3, r1
 8001952:	4010      	ands	r0, r2
 8001954:	4698      	mov	r8, r3
 8001956:	4681      	mov	r9, r0
 8001958:	e6d6      	b.n	8001708 <__aeabi_dsub+0x104>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	ff7fffff 	.word	0xff7fffff
 8001964:	fffff801 	.word	0xfffff801
 8001968:	000007fe 	.word	0x000007fe
 800196c:	430f      	orrs	r7, r1
 800196e:	1e7a      	subs	r2, r7, #1
 8001970:	4197      	sbcs	r7, r2
 8001972:	e691      	b.n	8001698 <__aeabi_dsub+0x94>
 8001974:	4661      	mov	r1, ip
 8001976:	08db      	lsrs	r3, r3, #3
 8001978:	0749      	lsls	r1, r1, #29
 800197a:	430b      	orrs	r3, r1
 800197c:	4661      	mov	r1, ip
 800197e:	08cc      	lsrs	r4, r1, #3
 8001980:	e7b8      	b.n	80018f4 <__aeabi_dsub+0x2f0>
 8001982:	4640      	mov	r0, r8
 8001984:	4cd3      	ldr	r4, [pc, #844]	; (8001cd4 <__aeabi_dsub+0x6d0>)
 8001986:	3001      	adds	r0, #1
 8001988:	4220      	tst	r0, r4
 800198a:	d000      	beq.n	800198e <__aeabi_dsub+0x38a>
 800198c:	e0a2      	b.n	8001ad4 <__aeabi_dsub+0x4d0>
 800198e:	4640      	mov	r0, r8
 8001990:	2800      	cmp	r0, #0
 8001992:	d000      	beq.n	8001996 <__aeabi_dsub+0x392>
 8001994:	e101      	b.n	8001b9a <__aeabi_dsub+0x596>
 8001996:	4660      	mov	r0, ip
 8001998:	4318      	orrs	r0, r3
 800199a:	d100      	bne.n	800199e <__aeabi_dsub+0x39a>
 800199c:	e15e      	b.n	8001c5c <__aeabi_dsub+0x658>
 800199e:	0008      	movs	r0, r1
 80019a0:	4338      	orrs	r0, r7
 80019a2:	d000      	beq.n	80019a6 <__aeabi_dsub+0x3a2>
 80019a4:	e15f      	b.n	8001c66 <__aeabi_dsub+0x662>
 80019a6:	4661      	mov	r1, ip
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	0749      	lsls	r1, r1, #29
 80019ac:	430b      	orrs	r3, r1
 80019ae:	4661      	mov	r1, ip
 80019b0:	08cc      	lsrs	r4, r1, #3
 80019b2:	e7a2      	b.n	80018fa <__aeabi_dsub+0x2f6>
 80019b4:	4dc8      	ldr	r5, [pc, #800]	; (8001cd8 <__aeabi_dsub+0x6d4>)
 80019b6:	42a8      	cmp	r0, r5
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x3b8>
 80019ba:	e0cf      	b.n	8001b5c <__aeabi_dsub+0x558>
 80019bc:	2580      	movs	r5, #128	; 0x80
 80019be:	4664      	mov	r4, ip
 80019c0:	042d      	lsls	r5, r5, #16
 80019c2:	432c      	orrs	r4, r5
 80019c4:	46a4      	mov	ip, r4
 80019c6:	2a38      	cmp	r2, #56	; 0x38
 80019c8:	dc56      	bgt.n	8001a78 <__aeabi_dsub+0x474>
 80019ca:	2a1f      	cmp	r2, #31
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dsub+0x3cc>
 80019ce:	e0d1      	b.n	8001b74 <__aeabi_dsub+0x570>
 80019d0:	2520      	movs	r5, #32
 80019d2:	001e      	movs	r6, r3
 80019d4:	1aad      	subs	r5, r5, r2
 80019d6:	4664      	mov	r4, ip
 80019d8:	40ab      	lsls	r3, r5
 80019da:	40ac      	lsls	r4, r5
 80019dc:	40d6      	lsrs	r6, r2
 80019de:	1e5d      	subs	r5, r3, #1
 80019e0:	41ab      	sbcs	r3, r5
 80019e2:	4334      	orrs	r4, r6
 80019e4:	4323      	orrs	r3, r4
 80019e6:	4664      	mov	r4, ip
 80019e8:	40d4      	lsrs	r4, r2
 80019ea:	1b09      	subs	r1, r1, r4
 80019ec:	e049      	b.n	8001a82 <__aeabi_dsub+0x47e>
 80019ee:	4660      	mov	r0, ip
 80019f0:	1bdc      	subs	r4, r3, r7
 80019f2:	1a46      	subs	r6, r0, r1
 80019f4:	42a3      	cmp	r3, r4
 80019f6:	4180      	sbcs	r0, r0
 80019f8:	4240      	negs	r0, r0
 80019fa:	4681      	mov	r9, r0
 80019fc:	0030      	movs	r0, r6
 80019fe:	464e      	mov	r6, r9
 8001a00:	1b80      	subs	r0, r0, r6
 8001a02:	4681      	mov	r9, r0
 8001a04:	0200      	lsls	r0, r0, #8
 8001a06:	d476      	bmi.n	8001af6 <__aeabi_dsub+0x4f2>
 8001a08:	464b      	mov	r3, r9
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_dsub+0x40c>
 8001a0e:	e652      	b.n	80016b6 <__aeabi_dsub+0xb2>
 8001a10:	2400      	movs	r4, #0
 8001a12:	2500      	movs	r5, #0
 8001a14:	e771      	b.n	80018fa <__aeabi_dsub+0x2f6>
 8001a16:	4339      	orrs	r1, r7
 8001a18:	000c      	movs	r4, r1
 8001a1a:	1e62      	subs	r2, r4, #1
 8001a1c:	4194      	sbcs	r4, r2
 8001a1e:	18e4      	adds	r4, r4, r3
 8001a20:	429c      	cmp	r4, r3
 8001a22:	419b      	sbcs	r3, r3
 8001a24:	425b      	negs	r3, r3
 8001a26:	4463      	add	r3, ip
 8001a28:	4699      	mov	r9, r3
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	d400      	bmi.n	8001a32 <__aeabi_dsub+0x42e>
 8001a30:	e756      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 8001a32:	2301      	movs	r3, #1
 8001a34:	469c      	mov	ip, r3
 8001a36:	4ba8      	ldr	r3, [pc, #672]	; (8001cd8 <__aeabi_dsub+0x6d4>)
 8001a38:	44e0      	add	r8, ip
 8001a3a:	4598      	cmp	r8, r3
 8001a3c:	d038      	beq.n	8001ab0 <__aeabi_dsub+0x4ac>
 8001a3e:	464b      	mov	r3, r9
 8001a40:	48a6      	ldr	r0, [pc, #664]	; (8001cdc <__aeabi_dsub+0x6d8>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	4003      	ands	r3, r0
 8001a46:	0018      	movs	r0, r3
 8001a48:	0863      	lsrs	r3, r4, #1
 8001a4a:	4014      	ands	r4, r2
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	07c3      	lsls	r3, r0, #31
 8001a50:	431c      	orrs	r4, r3
 8001a52:	0843      	lsrs	r3, r0, #1
 8001a54:	4699      	mov	r9, r3
 8001a56:	e657      	b.n	8001708 <__aeabi_dsub+0x104>
 8001a58:	0010      	movs	r0, r2
 8001a5a:	000e      	movs	r6, r1
 8001a5c:	3820      	subs	r0, #32
 8001a5e:	40c6      	lsrs	r6, r0
 8001a60:	2a20      	cmp	r2, #32
 8001a62:	d004      	beq.n	8001a6e <__aeabi_dsub+0x46a>
 8001a64:	2040      	movs	r0, #64	; 0x40
 8001a66:	1a82      	subs	r2, r0, r2
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	430f      	orrs	r7, r1
 8001a6c:	46b9      	mov	r9, r7
 8001a6e:	464f      	mov	r7, r9
 8001a70:	1e7a      	subs	r2, r7, #1
 8001a72:	4197      	sbcs	r7, r2
 8001a74:	4337      	orrs	r7, r6
 8001a76:	e60f      	b.n	8001698 <__aeabi_dsub+0x94>
 8001a78:	4662      	mov	r2, ip
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	4193      	sbcs	r3, r2
 8001a82:	1afc      	subs	r4, r7, r3
 8001a84:	42a7      	cmp	r7, r4
 8001a86:	41bf      	sbcs	r7, r7
 8001a88:	427f      	negs	r7, r7
 8001a8a:	1bcb      	subs	r3, r1, r7
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	465d      	mov	r5, fp
 8001a90:	4680      	mov	r8, r0
 8001a92:	e608      	b.n	80016a6 <__aeabi_dsub+0xa2>
 8001a94:	4666      	mov	r6, ip
 8001a96:	431e      	orrs	r6, r3
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x498>
 8001a9a:	e0be      	b.n	8001c1a <__aeabi_dsub+0x616>
 8001a9c:	1e56      	subs	r6, r2, #1
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x4a0>
 8001aa2:	e109      	b.n	8001cb8 <__aeabi_dsub+0x6b4>
 8001aa4:	4c8c      	ldr	r4, [pc, #560]	; (8001cd8 <__aeabi_dsub+0x6d4>)
 8001aa6:	42a2      	cmp	r2, r4
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x4a8>
 8001aaa:	e119      	b.n	8001ce0 <__aeabi_dsub+0x6dc>
 8001aac:	0032      	movs	r2, r6
 8001aae:	e6c1      	b.n	8001834 <__aeabi_dsub+0x230>
 8001ab0:	4642      	mov	r2, r8
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e648      	b.n	800174a <__aeabi_dsub+0x146>
 8001ab8:	2020      	movs	r0, #32
 8001aba:	000c      	movs	r4, r1
 8001abc:	1a80      	subs	r0, r0, r2
 8001abe:	003e      	movs	r6, r7
 8001ac0:	4087      	lsls	r7, r0
 8001ac2:	4084      	lsls	r4, r0
 8001ac4:	40d6      	lsrs	r6, r2
 8001ac6:	1e78      	subs	r0, r7, #1
 8001ac8:	4187      	sbcs	r7, r0
 8001aca:	40d1      	lsrs	r1, r2
 8001acc:	4334      	orrs	r4, r6
 8001ace:	433c      	orrs	r4, r7
 8001ad0:	448c      	add	ip, r1
 8001ad2:	e7a4      	b.n	8001a1e <__aeabi_dsub+0x41a>
 8001ad4:	4a80      	ldr	r2, [pc, #512]	; (8001cd8 <__aeabi_dsub+0x6d4>)
 8001ad6:	4290      	cmp	r0, r2
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x4d8>
 8001ada:	e0e9      	b.n	8001cb0 <__aeabi_dsub+0x6ac>
 8001adc:	19df      	adds	r7, r3, r7
 8001ade:	429f      	cmp	r7, r3
 8001ae0:	419b      	sbcs	r3, r3
 8001ae2:	4461      	add	r1, ip
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	18c9      	adds	r1, r1, r3
 8001ae8:	07cc      	lsls	r4, r1, #31
 8001aea:	087f      	lsrs	r7, r7, #1
 8001aec:	084b      	lsrs	r3, r1, #1
 8001aee:	4699      	mov	r9, r3
 8001af0:	4680      	mov	r8, r0
 8001af2:	433c      	orrs	r4, r7
 8001af4:	e6f4      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 8001af6:	1afc      	subs	r4, r7, r3
 8001af8:	42a7      	cmp	r7, r4
 8001afa:	41bf      	sbcs	r7, r7
 8001afc:	4663      	mov	r3, ip
 8001afe:	427f      	negs	r7, r7
 8001b00:	1ac9      	subs	r1, r1, r3
 8001b02:	1bcb      	subs	r3, r1, r7
 8001b04:	4699      	mov	r9, r3
 8001b06:	465d      	mov	r5, fp
 8001b08:	e5d5      	b.n	80016b6 <__aeabi_dsub+0xb2>
 8001b0a:	08ff      	lsrs	r7, r7, #3
 8001b0c:	074b      	lsls	r3, r1, #29
 8001b0e:	465d      	mov	r5, fp
 8001b10:	433b      	orrs	r3, r7
 8001b12:	08cc      	lsrs	r4, r1, #3
 8001b14:	e6ee      	b.n	80018f4 <__aeabi_dsub+0x2f0>
 8001b16:	4662      	mov	r2, ip
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x51a>
 8001b1c:	e082      	b.n	8001c24 <__aeabi_dsub+0x620>
 8001b1e:	000b      	movs	r3, r1
 8001b20:	433b      	orrs	r3, r7
 8001b22:	d11b      	bne.n	8001b5c <__aeabi_dsub+0x558>
 8001b24:	2480      	movs	r4, #128	; 0x80
 8001b26:	2500      	movs	r5, #0
 8001b28:	0324      	lsls	r4, r4, #12
 8001b2a:	e6f9      	b.n	8001920 <__aeabi_dsub+0x31c>
 8001b2c:	19dc      	adds	r4, r3, r7
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	419b      	sbcs	r3, r3
 8001b32:	4461      	add	r1, ip
 8001b34:	4689      	mov	r9, r1
 8001b36:	425b      	negs	r3, r3
 8001b38:	4499      	add	r9, r3
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	d444      	bmi.n	8001bca <__aeabi_dsub+0x5c6>
 8001b40:	2301      	movs	r3, #1
 8001b42:	4698      	mov	r8, r3
 8001b44:	e6cc      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 8001b46:	1bdc      	subs	r4, r3, r7
 8001b48:	4662      	mov	r2, ip
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	419b      	sbcs	r3, r3
 8001b4e:	1a51      	subs	r1, r2, r1
 8001b50:	425b      	negs	r3, r3
 8001b52:	1acb      	subs	r3, r1, r3
 8001b54:	4699      	mov	r9, r3
 8001b56:	2301      	movs	r3, #1
 8001b58:	4698      	mov	r8, r3
 8001b5a:	e5a4      	b.n	80016a6 <__aeabi_dsub+0xa2>
 8001b5c:	08ff      	lsrs	r7, r7, #3
 8001b5e:	074b      	lsls	r3, r1, #29
 8001b60:	465d      	mov	r5, fp
 8001b62:	433b      	orrs	r3, r7
 8001b64:	08cc      	lsrs	r4, r1, #3
 8001b66:	e6d7      	b.n	8001918 <__aeabi_dsub+0x314>
 8001b68:	4662      	mov	r2, ip
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	0014      	movs	r4, r2
 8001b6e:	1e63      	subs	r3, r4, #1
 8001b70:	419c      	sbcs	r4, r3
 8001b72:	e679      	b.n	8001868 <__aeabi_dsub+0x264>
 8001b74:	0015      	movs	r5, r2
 8001b76:	4664      	mov	r4, ip
 8001b78:	3d20      	subs	r5, #32
 8001b7a:	40ec      	lsrs	r4, r5
 8001b7c:	46a0      	mov	r8, r4
 8001b7e:	2a20      	cmp	r2, #32
 8001b80:	d005      	beq.n	8001b8e <__aeabi_dsub+0x58a>
 8001b82:	2540      	movs	r5, #64	; 0x40
 8001b84:	4664      	mov	r4, ip
 8001b86:	1aaa      	subs	r2, r5, r2
 8001b88:	4094      	lsls	r4, r2
 8001b8a:	4323      	orrs	r3, r4
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	4654      	mov	r4, sl
 8001b90:	1e63      	subs	r3, r4, #1
 8001b92:	419c      	sbcs	r4, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	4323      	orrs	r3, r4
 8001b98:	e773      	b.n	8001a82 <__aeabi_dsub+0x47e>
 8001b9a:	4662      	mov	r2, ip
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	d023      	beq.n	8001be8 <__aeabi_dsub+0x5e4>
 8001ba0:	000a      	movs	r2, r1
 8001ba2:	433a      	orrs	r2, r7
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dsub+0x5a4>
 8001ba6:	e0a0      	b.n	8001cea <__aeabi_dsub+0x6e6>
 8001ba8:	4662      	mov	r2, ip
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	0752      	lsls	r2, r2, #29
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	08d4      	lsrs	r4, r2, #3
 8001bb4:	e6b0      	b.n	8001918 <__aeabi_dsub+0x314>
 8001bb6:	000b      	movs	r3, r1
 8001bb8:	433b      	orrs	r3, r7
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x5ba>
 8001bbc:	e728      	b.n	8001a10 <__aeabi_dsub+0x40c>
 8001bbe:	08ff      	lsrs	r7, r7, #3
 8001bc0:	074b      	lsls	r3, r1, #29
 8001bc2:	465d      	mov	r5, fp
 8001bc4:	433b      	orrs	r3, r7
 8001bc6:	08cc      	lsrs	r4, r1, #3
 8001bc8:	e697      	b.n	80018fa <__aeabi_dsub+0x2f6>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	4698      	mov	r8, r3
 8001bce:	e736      	b.n	8001a3e <__aeabi_dsub+0x43a>
 8001bd0:	1afc      	subs	r4, r7, r3
 8001bd2:	42a7      	cmp	r7, r4
 8001bd4:	41bf      	sbcs	r7, r7
 8001bd6:	4663      	mov	r3, ip
 8001bd8:	427f      	negs	r7, r7
 8001bda:	1ac9      	subs	r1, r1, r3
 8001bdc:	1bcb      	subs	r3, r1, r7
 8001bde:	4699      	mov	r9, r3
 8001be0:	2301      	movs	r3, #1
 8001be2:	465d      	mov	r5, fp
 8001be4:	4698      	mov	r8, r3
 8001be6:	e55e      	b.n	80016a6 <__aeabi_dsub+0xa2>
 8001be8:	074b      	lsls	r3, r1, #29
 8001bea:	08ff      	lsrs	r7, r7, #3
 8001bec:	433b      	orrs	r3, r7
 8001bee:	08cc      	lsrs	r4, r1, #3
 8001bf0:	e692      	b.n	8001918 <__aeabi_dsub+0x314>
 8001bf2:	1bdc      	subs	r4, r3, r7
 8001bf4:	4660      	mov	r0, ip
 8001bf6:	42a3      	cmp	r3, r4
 8001bf8:	41b6      	sbcs	r6, r6
 8001bfa:	1a40      	subs	r0, r0, r1
 8001bfc:	4276      	negs	r6, r6
 8001bfe:	1b80      	subs	r0, r0, r6
 8001c00:	4681      	mov	r9, r0
 8001c02:	0200      	lsls	r0, r0, #8
 8001c04:	d560      	bpl.n	8001cc8 <__aeabi_dsub+0x6c4>
 8001c06:	1afc      	subs	r4, r7, r3
 8001c08:	42a7      	cmp	r7, r4
 8001c0a:	41bf      	sbcs	r7, r7
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	427f      	negs	r7, r7
 8001c10:	1ac9      	subs	r1, r1, r3
 8001c12:	1bcb      	subs	r3, r1, r7
 8001c14:	4699      	mov	r9, r3
 8001c16:	465d      	mov	r5, fp
 8001c18:	e576      	b.n	8001708 <__aeabi_dsub+0x104>
 8001c1a:	08ff      	lsrs	r7, r7, #3
 8001c1c:	074b      	lsls	r3, r1, #29
 8001c1e:	433b      	orrs	r3, r7
 8001c20:	08cc      	lsrs	r4, r1, #3
 8001c22:	e667      	b.n	80018f4 <__aeabi_dsub+0x2f0>
 8001c24:	000a      	movs	r2, r1
 8001c26:	08db      	lsrs	r3, r3, #3
 8001c28:	433a      	orrs	r2, r7
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x62a>
 8001c2c:	e66f      	b.n	800190e <__aeabi_dsub+0x30a>
 8001c2e:	4662      	mov	r2, ip
 8001c30:	0752      	lsls	r2, r2, #29
 8001c32:	4313      	orrs	r3, r2
 8001c34:	4662      	mov	r2, ip
 8001c36:	08d4      	lsrs	r4, r2, #3
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0312      	lsls	r2, r2, #12
 8001c3c:	4214      	tst	r4, r2
 8001c3e:	d007      	beq.n	8001c50 <__aeabi_dsub+0x64c>
 8001c40:	08c8      	lsrs	r0, r1, #3
 8001c42:	4210      	tst	r0, r2
 8001c44:	d104      	bne.n	8001c50 <__aeabi_dsub+0x64c>
 8001c46:	465d      	mov	r5, fp
 8001c48:	0004      	movs	r4, r0
 8001c4a:	08fb      	lsrs	r3, r7, #3
 8001c4c:	0749      	lsls	r1, r1, #29
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	0f5a      	lsrs	r2, r3, #29
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	0752      	lsls	r2, r2, #29
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	e65d      	b.n	8001918 <__aeabi_dsub+0x314>
 8001c5c:	074b      	lsls	r3, r1, #29
 8001c5e:	08ff      	lsrs	r7, r7, #3
 8001c60:	433b      	orrs	r3, r7
 8001c62:	08cc      	lsrs	r4, r1, #3
 8001c64:	e649      	b.n	80018fa <__aeabi_dsub+0x2f6>
 8001c66:	19dc      	adds	r4, r3, r7
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	419b      	sbcs	r3, r3
 8001c6c:	4461      	add	r1, ip
 8001c6e:	4689      	mov	r9, r1
 8001c70:	425b      	negs	r3, r3
 8001c72:	4499      	add	r9, r3
 8001c74:	464b      	mov	r3, r9
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	d400      	bmi.n	8001c7c <__aeabi_dsub+0x678>
 8001c7a:	e631      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 8001c7c:	464a      	mov	r2, r9
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <__aeabi_dsub+0x6d8>)
 8001c80:	401a      	ands	r2, r3
 8001c82:	2301      	movs	r3, #1
 8001c84:	4691      	mov	r9, r2
 8001c86:	4698      	mov	r8, r3
 8001c88:	e62a      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 8001c8a:	0016      	movs	r6, r2
 8001c8c:	4664      	mov	r4, ip
 8001c8e:	3e20      	subs	r6, #32
 8001c90:	40f4      	lsrs	r4, r6
 8001c92:	46a0      	mov	r8, r4
 8001c94:	2a20      	cmp	r2, #32
 8001c96:	d005      	beq.n	8001ca4 <__aeabi_dsub+0x6a0>
 8001c98:	2640      	movs	r6, #64	; 0x40
 8001c9a:	4664      	mov	r4, ip
 8001c9c:	1ab2      	subs	r2, r6, r2
 8001c9e:	4094      	lsls	r4, r2
 8001ca0:	4323      	orrs	r3, r4
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4654      	mov	r4, sl
 8001ca6:	1e63      	subs	r3, r4, #1
 8001ca8:	419c      	sbcs	r4, r3
 8001caa:	4643      	mov	r3, r8
 8001cac:	431c      	orrs	r4, r3
 8001cae:	e5db      	b.n	8001868 <__aeabi_dsub+0x264>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e548      	b.n	800174a <__aeabi_dsub+0x146>
 8001cb8:	19dc      	adds	r4, r3, r7
 8001cba:	42bc      	cmp	r4, r7
 8001cbc:	41bf      	sbcs	r7, r7
 8001cbe:	4461      	add	r1, ip
 8001cc0:	4689      	mov	r9, r1
 8001cc2:	427f      	negs	r7, r7
 8001cc4:	44b9      	add	r9, r7
 8001cc6:	e738      	b.n	8001b3a <__aeabi_dsub+0x536>
 8001cc8:	464b      	mov	r3, r9
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x6cc>
 8001cce:	e69f      	b.n	8001a10 <__aeabi_dsub+0x40c>
 8001cd0:	e606      	b.n	80018e0 <__aeabi_dsub+0x2dc>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	000007fe 	.word	0x000007fe
 8001cd8:	000007ff 	.word	0x000007ff
 8001cdc:	ff7fffff 	.word	0xff7fffff
 8001ce0:	08ff      	lsrs	r7, r7, #3
 8001ce2:	074b      	lsls	r3, r1, #29
 8001ce4:	433b      	orrs	r3, r7
 8001ce6:	08cc      	lsrs	r4, r1, #3
 8001ce8:	e616      	b.n	8001918 <__aeabi_dsub+0x314>
 8001cea:	4662      	mov	r2, ip
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	0752      	lsls	r2, r2, #29
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	08d4      	lsrs	r4, r2, #3
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	0312      	lsls	r2, r2, #12
 8001cfa:	4214      	tst	r4, r2
 8001cfc:	d007      	beq.n	8001d0e <__aeabi_dsub+0x70a>
 8001cfe:	08c8      	lsrs	r0, r1, #3
 8001d00:	4210      	tst	r0, r2
 8001d02:	d104      	bne.n	8001d0e <__aeabi_dsub+0x70a>
 8001d04:	465d      	mov	r5, fp
 8001d06:	0004      	movs	r4, r0
 8001d08:	08fb      	lsrs	r3, r7, #3
 8001d0a:	0749      	lsls	r1, r1, #29
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	0f5a      	lsrs	r2, r3, #29
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	0752      	lsls	r2, r2, #29
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	e5fe      	b.n	8001918 <__aeabi_dsub+0x314>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4a01      	ldr	r2, [pc, #4]	; (8001d24 <__aeabi_dsub+0x720>)
 8001d1e:	001c      	movs	r4, r3
 8001d20:	e513      	b.n	800174a <__aeabi_dsub+0x146>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000007ff 	.word	0x000007ff

08001d28 <__aeabi_dcmpun>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	0005      	movs	r5, r0
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <__aeabi_dcmpun+0x38>)
 8001d2e:	031c      	lsls	r4, r3, #12
 8001d30:	0016      	movs	r6, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	030a      	lsls	r2, r1, #12
 8001d36:	0049      	lsls	r1, r1, #1
 8001d38:	0b12      	lsrs	r2, r2, #12
 8001d3a:	0d49      	lsrs	r1, r1, #21
 8001d3c:	0b24      	lsrs	r4, r4, #12
 8001d3e:	0d5b      	lsrs	r3, r3, #21
 8001d40:	4281      	cmp	r1, r0
 8001d42:	d008      	beq.n	8001d56 <__aeabi_dcmpun+0x2e>
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <__aeabi_dcmpun+0x38>)
 8001d46:	2000      	movs	r0, #0
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d103      	bne.n	8001d54 <__aeabi_dcmpun+0x2c>
 8001d4c:	0020      	movs	r0, r4
 8001d4e:	4330      	orrs	r0, r6
 8001d50:	1e43      	subs	r3, r0, #1
 8001d52:	4198      	sbcs	r0, r3
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
 8001d56:	2001      	movs	r0, #1
 8001d58:	432a      	orrs	r2, r5
 8001d5a:	d1fb      	bne.n	8001d54 <__aeabi_dcmpun+0x2c>
 8001d5c:	e7f2      	b.n	8001d44 <__aeabi_dcmpun+0x1c>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__aeabi_d2iz>:
 8001d64:	000a      	movs	r2, r1
 8001d66:	b530      	push	{r4, r5, lr}
 8001d68:	4c13      	ldr	r4, [pc, #76]	; (8001db8 <__aeabi_d2iz+0x54>)
 8001d6a:	0053      	lsls	r3, r2, #1
 8001d6c:	0309      	lsls	r1, r1, #12
 8001d6e:	0005      	movs	r5, r0
 8001d70:	0b09      	lsrs	r1, r1, #12
 8001d72:	2000      	movs	r0, #0
 8001d74:	0d5b      	lsrs	r3, r3, #21
 8001d76:	0fd2      	lsrs	r2, r2, #31
 8001d78:	42a3      	cmp	r3, r4
 8001d7a:	dd04      	ble.n	8001d86 <__aeabi_d2iz+0x22>
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <__aeabi_d2iz+0x58>)
 8001d7e:	4283      	cmp	r3, r0
 8001d80:	dd02      	ble.n	8001d88 <__aeabi_d2iz+0x24>
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <__aeabi_d2iz+0x5c>)
 8001d84:	18d0      	adds	r0, r2, r3
 8001d86:	bd30      	pop	{r4, r5, pc}
 8001d88:	2080      	movs	r0, #128	; 0x80
 8001d8a:	0340      	lsls	r0, r0, #13
 8001d8c:	4301      	orrs	r1, r0
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <__aeabi_d2iz+0x60>)
 8001d90:	1ac0      	subs	r0, r0, r3
 8001d92:	281f      	cmp	r0, #31
 8001d94:	dd08      	ble.n	8001da8 <__aeabi_d2iz+0x44>
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <__aeabi_d2iz+0x64>)
 8001d98:	1ac3      	subs	r3, r0, r3
 8001d9a:	40d9      	lsrs	r1, r3
 8001d9c:	000b      	movs	r3, r1
 8001d9e:	4258      	negs	r0, r3
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d1f0      	bne.n	8001d86 <__aeabi_d2iz+0x22>
 8001da4:	0018      	movs	r0, r3
 8001da6:	e7ee      	b.n	8001d86 <__aeabi_d2iz+0x22>
 8001da8:	4c08      	ldr	r4, [pc, #32]	; (8001dcc <__aeabi_d2iz+0x68>)
 8001daa:	40c5      	lsrs	r5, r0
 8001dac:	46a4      	mov	ip, r4
 8001dae:	4463      	add	r3, ip
 8001db0:	4099      	lsls	r1, r3
 8001db2:	000b      	movs	r3, r1
 8001db4:	432b      	orrs	r3, r5
 8001db6:	e7f2      	b.n	8001d9e <__aeabi_d2iz+0x3a>
 8001db8:	000003fe 	.word	0x000003fe
 8001dbc:	0000041d 	.word	0x0000041d
 8001dc0:	7fffffff 	.word	0x7fffffff
 8001dc4:	00000433 	.word	0x00000433
 8001dc8:	00000413 	.word	0x00000413
 8001dcc:	fffffbed 	.word	0xfffffbed

08001dd0 <__aeabi_i2d>:
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d016      	beq.n	8001e04 <__aeabi_i2d+0x34>
 8001dd6:	17c3      	asrs	r3, r0, #31
 8001dd8:	18c5      	adds	r5, r0, r3
 8001dda:	405d      	eors	r5, r3
 8001ddc:	0fc4      	lsrs	r4, r0, #31
 8001dde:	0028      	movs	r0, r5
 8001de0:	f000 f826 	bl	8001e30 <__clzsi2>
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <__aeabi_i2d+0x5c>)
 8001de6:	1a12      	subs	r2, r2, r0
 8001de8:	280a      	cmp	r0, #10
 8001dea:	dc16      	bgt.n	8001e1a <__aeabi_i2d+0x4a>
 8001dec:	0003      	movs	r3, r0
 8001dee:	002e      	movs	r6, r5
 8001df0:	3315      	adds	r3, #21
 8001df2:	409e      	lsls	r6, r3
 8001df4:	230b      	movs	r3, #11
 8001df6:	1a18      	subs	r0, r3, r0
 8001df8:	40c5      	lsrs	r5, r0
 8001dfa:	0552      	lsls	r2, r2, #21
 8001dfc:	032d      	lsls	r5, r5, #12
 8001dfe:	0b2d      	lsrs	r5, r5, #12
 8001e00:	0d53      	lsrs	r3, r2, #21
 8001e02:	e003      	b.n	8001e0c <__aeabi_i2d+0x3c>
 8001e04:	2400      	movs	r4, #0
 8001e06:	2300      	movs	r3, #0
 8001e08:	2500      	movs	r5, #0
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	051b      	lsls	r3, r3, #20
 8001e0e:	432b      	orrs	r3, r5
 8001e10:	07e4      	lsls	r4, r4, #31
 8001e12:	4323      	orrs	r3, r4
 8001e14:	0030      	movs	r0, r6
 8001e16:	0019      	movs	r1, r3
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
 8001e1a:	380b      	subs	r0, #11
 8001e1c:	4085      	lsls	r5, r0
 8001e1e:	0552      	lsls	r2, r2, #21
 8001e20:	032d      	lsls	r5, r5, #12
 8001e22:	2600      	movs	r6, #0
 8001e24:	0b2d      	lsrs	r5, r5, #12
 8001e26:	0d53      	lsrs	r3, r2, #21
 8001e28:	e7f0      	b.n	8001e0c <__aeabi_i2d+0x3c>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	0000041e 	.word	0x0000041e

08001e30 <__clzsi2>:
 8001e30:	211c      	movs	r1, #28
 8001e32:	2301      	movs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	4298      	cmp	r0, r3
 8001e38:	d301      	bcc.n	8001e3e <__clzsi2+0xe>
 8001e3a:	0c00      	lsrs	r0, r0, #16
 8001e3c:	3910      	subs	r1, #16
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	4298      	cmp	r0, r3
 8001e42:	d301      	bcc.n	8001e48 <__clzsi2+0x18>
 8001e44:	0a00      	lsrs	r0, r0, #8
 8001e46:	3908      	subs	r1, #8
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	4298      	cmp	r0, r3
 8001e4c:	d301      	bcc.n	8001e52 <__clzsi2+0x22>
 8001e4e:	0900      	lsrs	r0, r0, #4
 8001e50:	3904      	subs	r1, #4
 8001e52:	a202      	add	r2, pc, #8	; (adr r2, 8001e5c <__clzsi2+0x2c>)
 8001e54:	5c10      	ldrb	r0, [r2, r0]
 8001e56:	1840      	adds	r0, r0, r1
 8001e58:	4770      	bx	lr
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	02020304 	.word	0x02020304
 8001e60:	01010101 	.word	0x01010101
	...

08001e6c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e72:	f000 fcb7 	bl	80027e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e76:	f000 f863 	bl	8001f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7a:	f000 f951 	bl	8002120 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e7e:	f000 f8c1 	bl	8002004 <MX_I2C1_Init>
  MX_DMA_Init();
 8001e82:	f000 f92f 	bl	80020e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e86:	f000 f8fd 	bl	8002084 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <main+0xb8>)
 8001e90:	0019      	movs	r1, r3
 8001e92:	0010      	movs	r0, r2
 8001e94:	f001 f8f9 	bl	800308a <HAL_GPIO_TogglePin>
	pause_sec(1.0);
 8001e98:	23fe      	movs	r3, #254	; 0xfe
 8001e9a:	059b      	lsls	r3, r3, #22
 8001e9c:	1c18      	adds	r0, r3, #0
 8001e9e:	f000 f9b7 	bl	8002210 <pause_sec>
//
//	sprintf (buffer, "%d \r \n", bin);
//	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);

//
	getTime();
 8001ea2:	f000 fa2f 	bl	8002304 <getTime>
	int epochTime = epochFromTime(time);
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <main+0xbc>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	f000 fa82 	bl	80023b4 <epochFromTime>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	607b      	str	r3, [r7, #4]
	sprintf (buffer, "%02d:%02d:%02d \r \n", time.hour, time.minutes, time.seconds);
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <main+0xbc>)
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <main+0xbc>)
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	001c      	movs	r4, r3
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <main+0xbc>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4919      	ldr	r1, [pc, #100]	; (8001f2c <main+0xc0>)
 8001ec6:	481a      	ldr	r0, [pc, #104]	; (8001f30 <main+0xc4>)
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	0023      	movs	r3, r4
 8001ecc:	f003 fa62 	bl	8005394 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8001ed0:	23fa      	movs	r3, #250	; 0xfa
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4916      	ldr	r1, [pc, #88]	; (8001f30 <main+0xc4>)
 8001ed6:	4817      	ldr	r0, [pc, #92]	; (8001f34 <main+0xc8>)
 8001ed8:	220e      	movs	r2, #14
 8001eda:	f002 fadf 	bl	800449c <HAL_UART_Transmit>

	sprintf (buffer, "%02d-%02d-20%02d \r \n", time.dayofmonth, time.month, time.year);
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <main+0xbc>)
 8001ee0:	791b      	ldrb	r3, [r3, #4]
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <main+0xbc>)
 8001ee6:	795b      	ldrb	r3, [r3, #5]
 8001ee8:	001c      	movs	r4, r3
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <main+0xbc>)
 8001eec:	799b      	ldrb	r3, [r3, #6]
 8001eee:	4912      	ldr	r1, [pc, #72]	; (8001f38 <main+0xcc>)
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <main+0xc4>)
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	0023      	movs	r3, r4
 8001ef6:	f003 fa4d 	bl	8005394 <siprintf>
	//Transmit data via UART
	//Blocking! fine for small buffers
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8001efa:	23fa      	movs	r3, #250	; 0xfa
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	490c      	ldr	r1, [pc, #48]	; (8001f30 <main+0xc4>)
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <main+0xc8>)
 8001f02:	220e      	movs	r2, #14
 8001f04:	f002 faca 	bl	800449c <HAL_UART_Transmit>

	sprintf (buffer, "%d \r \n", epochTime);
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	490c      	ldr	r1, [pc, #48]	; (8001f3c <main+0xd0>)
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <main+0xc4>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f003 fa40 	bl	8005394 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8001f14:	23fa      	movs	r3, #250	; 0xfa
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4905      	ldr	r1, [pc, #20]	; (8001f30 <main+0xc4>)
 8001f1a:	4806      	ldr	r0, [pc, #24]	; (8001f34 <main+0xc8>)
 8001f1c:	220e      	movs	r2, #14
 8001f1e:	f002 fabd 	bl	800449c <HAL_UART_Transmit>
  {
 8001f22:	e7b2      	b.n	8001e8a <main+0x1e>
 8001f24:	48000800 	.word	0x48000800
 8001f28:	200001b0 	.word	0x200001b0
 8001f2c:	08006a40 	.word	0x08006a40
 8001f30:	200001a0 	.word	0x200001a0
 8001f34:	200000d8 	.word	0x200000d8
 8001f38:	08006a54 	.word	0x08006a54
 8001f3c:	08006a6c 	.word	0x08006a6c

08001f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b097      	sub	sp, #92	; 0x5c
 8001f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f46:	2428      	movs	r4, #40	; 0x28
 8001f48:	193b      	adds	r3, r7, r4
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	2330      	movs	r3, #48	; 0x30
 8001f4e:	001a      	movs	r2, r3
 8001f50:	2100      	movs	r1, #0
 8001f52:	f003 fa17 	bl	8005384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f56:	2318      	movs	r3, #24
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	001a      	movs	r2, r3
 8001f60:	2100      	movs	r1, #0
 8001f62:	f003 fa0f 	bl	8005384 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	0018      	movs	r0, r3
 8001f6a:	2314      	movs	r3, #20
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f003 fa08 	bl	8005384 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f74:	0021      	movs	r1, r4
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	2201      	movs	r2, #1
 8001f80:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	2210      	movs	r2, #16
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	22a0      	movs	r2, #160	; 0xa0
 8001f98:	0392      	lsls	r2, r2, #14
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f001 fcdb 	bl	8003960 <HAL_RCC_OscConfig>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <SystemClock_Config+0x72>
  {
	  Error_Handler();
 8001fae:	f000 fa8d 	bl	80024cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb2:	2118      	movs	r1, #24
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc6:	187b      	adds	r3, r7, r1
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	2101      	movs	r1, #1
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f001 ffdf 	bl	8003f94 <HAL_RCC_ClockConfig>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fda:	f000 fa77 	bl	80024cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	0018      	movs	r0, r3
 8001fee:	f002 f923 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001ff6:	f000 fa69 	bl	80024cc <Error_Handler>
  }
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b017      	add	sp, #92	; 0x5c
 8002000:	bd90      	pop	{r4, r7, pc}
	...

08002004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_I2C1_Init+0x74>)
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <MX_I2C1_Init+0x78>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_I2C1_Init+0x74>)
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <MX_I2C1_Init+0x7c>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_I2C1_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <MX_I2C1_Init+0x74>)
 800201c:	2201      	movs	r2, #1
 800201e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_I2C1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_I2C1_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_I2C1_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_I2C1_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_I2C1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_I2C1_Init+0x74>)
 8002040:	0018      	movs	r0, r3
 8002042:	f001 f83d 	bl	80030c0 <HAL_I2C_Init>
 8002046:	1e03      	subs	r3, r0, #0
 8002048:	d001      	beq.n	800204e <MX_I2C1_Init+0x4a>
  {
	  Error_Handler();
 800204a:	f000 fa3f 	bl	80024cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_I2C1_Init+0x74>)
 8002050:	2100      	movs	r1, #0
 8002052:	0018      	movs	r0, r3
 8002054:	f001 fbec 	bl	8003830 <HAL_I2CEx_ConfigAnalogFilter>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d001      	beq.n	8002060 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800205c:	f000 fa36 	bl	80024cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <MX_I2C1_Init+0x74>)
 8002062:	2100      	movs	r1, #0
 8002064:	0018      	movs	r0, r3
 8002066:	f001 fc2f 	bl	80038c8 <HAL_I2CEx_ConfigDigitalFilter>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800206e:	f000 fa2d 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000008c 	.word	0x2000008c
 800207c:	40005400 	.word	0x40005400
 8002080:	2000090e 	.word	0x2000090e

08002084 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_USART2_UART_Init+0x58>)
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <MX_USART2_UART_Init+0x5c>)
 800208c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <MX_USART2_UART_Init+0x58>)
 8002090:	2296      	movs	r2, #150	; 0x96
 8002092:	0192      	lsls	r2, r2, #6
 8002094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_USART2_UART_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_USART2_UART_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <MX_USART2_UART_Init+0x58>)
 80020c8:	0018      	movs	r0, r3
 80020ca:	f002 f993 	bl	80043f4 <HAL_UART_Init>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020d2:	f000 f9fb 	bl	80024cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000d8 	.word	0x200000d8
 80020e0:	40004400 	.word	0x40004400

080020e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_DMA_Init+0x38>)
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MX_DMA_Init+0x38>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_DMA_Init+0x38>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	200b      	movs	r0, #11
 8002108:	f000 fc7c 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800210c:	200b      	movs	r0, #11
 800210e:	f000 fc8e 	bl	8002a2e <HAL_NVIC_EnableIRQ>

}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	40021000 	.word	0x40021000

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	2414      	movs	r4, #20
 8002128:	193b      	adds	r3, r7, r4
 800212a:	0018      	movs	r0, r3
 800212c:	2314      	movs	r3, #20
 800212e:	001a      	movs	r2, r3
 8002130:	2100      	movs	r1, #0
 8002132:	f003 f927 	bl	8005384 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <MX_GPIO_Init+0xe8>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	03c9      	lsls	r1, r1, #15
 8002140:	430a      	orrs	r2, r1
 8002142:	615a      	str	r2, [r3, #20]
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	03db      	lsls	r3, r3, #15
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0289      	lsls	r1, r1, #10
 800215c:	430a      	orrs	r2, r1
 800215e:	615a      	str	r2, [r3, #20]
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0309      	lsls	r1, r1, #12
 8002178:	430a      	orrs	r2, r1
 800217a:	615a      	str	r2, [r3, #20]
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <MX_GPIO_Init+0xe8>)
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	031b      	lsls	r3, r3, #12
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <MX_GPIO_Init+0xe8>)
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_GPIO_Init+0xe8>)
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	02c9      	lsls	r1, r1, #11
 8002194:	430a      	orrs	r2, r1
 8002196:	615a      	str	r2, [r3, #20]
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_GPIO_Init+0xe8>)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	02db      	lsls	r3, r3, #11
 80021a0:	4013      	ands	r3, r2
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80021a6:	23c0      	movs	r3, #192	; 0xc0
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4818      	ldr	r0, [pc, #96]	; (800220c <MX_GPIO_Init+0xec>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	0019      	movs	r1, r3
 80021b0:	f000 ff4e 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021ba:	193b      	adds	r3, r7, r4
 80021bc:	2290      	movs	r2, #144	; 0x90
 80021be:	0352      	lsls	r2, r2, #13
 80021c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c8:	193a      	adds	r2, r7, r4
 80021ca:	2390      	movs	r3, #144	; 0x90
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	0011      	movs	r1, r2
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 fdcd 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80021d6:	0021      	movs	r1, r4
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	22c0      	movs	r2, #192	; 0xc0
 80021dc:	0092      	lsls	r2, r2, #2
 80021de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2201      	movs	r2, #1
 80021e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <MX_GPIO_Init+0xec>)
 80021f6:	0019      	movs	r1, r3
 80021f8:	0010      	movs	r0, r2
 80021fa:	f000 fdb9 	bl	8002d70 <HAL_GPIO_Init>

}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b00b      	add	sp, #44	; 0x2c
 8002204:	bd90      	pop	{r4, r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	40021000 	.word	0x40021000
 800220c:	48000800 	.word	0x48000800

08002210 <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	/* Delay program execution for x seconds */
	//TO DO:
	//TASK 2
	//Make sure you've defined DELAY1 and DELAY2 in the private define section
	volatile int i, j;
			for(i=0; i <= DELAY1; i++){
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e00d      	b.n	800223a <pause_sec+0x2a>
				for(j=0; j <= DELAY2; j++);
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	e002      	b.n	800222a <pause_sec+0x1a>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	23c8      	movs	r3, #200	; 0xc8
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	429a      	cmp	r2, r3
 8002232:	ddf7      	ble.n	8002224 <pause_sec+0x14>
			for(i=0; i <= DELAY1; i++){
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a03      	ldr	r2, [pc, #12]	; (800224c <pause_sec+0x3c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	dded      	ble.n	800221e <pause_sec+0xe>
			}
	//YOUR CODE HERE
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b004      	add	sp, #16
 800224a:	bd80      	pop	{r7, pc}
 800224c:	00002328 	.word	0x00002328

08002250 <bcdToDec>:

	    return (uint8_t)( (val/10*16) + (val%10) );;
}

int bcdToDec(uint8_t val)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	0002      	movs	r2, r0
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	701a      	strb	r2, [r3, #0]
    /* Convert binary coded decimal to normal decimal numbers */
	//TO DO:
	//TASK 3
	//Complete the BCD to decimal function
	uint8_t* values = val;
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	60bb      	str	r3, [r7, #8]
	int length = sizeof(values);
 8002262:	2304      	movs	r3, #4
 8002264:	617b      	str	r3, [r7, #20]
	int sum = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
	for (int i = 0; i <= sizeof(values); i++ )
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e033      	b.n	80022d8 <bcdToDec+0x88>
	{
		sum+=values[length]*pow(2, length);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	18d3      	adds	r3, r2, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff fda9 	bl	8001dd0 <__aeabi_i2d>
 800227e:	0004      	movs	r4, r0
 8002280:	000d      	movs	r5, r1
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff fda4 	bl	8001dd0 <__aeabi_i2d>
 8002288:	0002      	movs	r2, r0
 800228a:	000b      	movs	r3, r1
 800228c:	2000      	movs	r0, #0
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	05c9      	lsls	r1, r1, #23
 8002292:	f003 fce9 	bl	8005c68 <pow>
 8002296:	0002      	movs	r2, r0
 8002298:	000b      	movs	r3, r1
 800229a:	0020      	movs	r0, r4
 800229c:	0029      	movs	r1, r5
 800229e:	f7fe ff45 	bl	800112c <__aeabi_dmul>
 80022a2:	0002      	movs	r2, r0
 80022a4:	000b      	movs	r3, r1
 80022a6:	0014      	movs	r4, r2
 80022a8:	001d      	movs	r5, r3
 80022aa:	6938      	ldr	r0, [r7, #16]
 80022ac:	f7ff fd90 	bl	8001dd0 <__aeabi_i2d>
 80022b0:	0002      	movs	r2, r0
 80022b2:	000b      	movs	r3, r1
 80022b4:	0020      	movs	r0, r4
 80022b6:	0029      	movs	r1, r5
 80022b8:	f7fd fffa 	bl	80002b0 <__aeabi_dadd>
 80022bc:	0002      	movs	r2, r0
 80022be:	000b      	movs	r3, r1
 80022c0:	0010      	movs	r0, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	f7ff fd4e 	bl	8001d64 <__aeabi_d2iz>
 80022c8:	0003      	movs	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]
		length--;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i <= sizeof(values); i++ )
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3301      	adds	r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d9c8      	bls.n	8002270 <bcdToDec+0x20>

	}

	return (int)( (val/16*10) + (val%16) );
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	001a      	movs	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	0019      	movs	r1, r3
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	220f      	movs	r2, #15
 80022f8:	4013      	ands	r3, r2
 80022fa:	18cb      	adds	r3, r1, r3
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b006      	add	sp, #24
 8002302:	bdb0      	pop	{r4, r5, r7, pc}

08002304 <getTime>:
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, set_time, 7, 1000);

}

void getTime (void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	//fill in the address of the RTC, the address of the first register to write and the size of each register
	//The function and RTC supports multi-read. That means we can give the function a buffer and first address
	//and it will read 1 byte of data, increment the register address, write another byte and so on
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, get_time, 7, 1000);
 800230a:	4828      	ldr	r0, [pc, #160]	; (80023ac <getTime+0xa8>)
 800230c:	23fa      	movs	r3, #250	; 0xfa
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	2307      	movs	r3, #7
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	003b      	movs	r3, r7
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	2200      	movs	r2, #0
 800231e:	21d0      	movs	r1, #208	; 0xd0
 8002320:	f000 ff64 	bl	80031ec <HAL_I2C_Mem_Read>


	//YOUR CODE HERE

		time.seconds = bcdToDec(get_time[0]);
 8002324:	003b      	movs	r3, r7
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff91 	bl	8002250 <bcdToDec>
 800232e:	0003      	movs	r3, r0
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <getTime+0xac>)
 8002334:	701a      	strb	r2, [r3, #0]
		time.minutes = bcdToDec(get_time[1]);
 8002336:	003b      	movs	r3, r7
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff ff88 	bl	8002250 <bcdToDec>
 8002340:	0003      	movs	r3, r0
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <getTime+0xac>)
 8002346:	705a      	strb	r2, [r3, #1]
		time.hour = bcdToDec(get_time[2]);
 8002348:	003b      	movs	r3, r7
 800234a:	789b      	ldrb	r3, [r3, #2]
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff ff7f 	bl	8002250 <bcdToDec>
 8002352:	0003      	movs	r3, r0
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <getTime+0xac>)
 8002358:	709a      	strb	r2, [r3, #2]
		time.dayofweek = bcdToDec(get_time[3]);
 800235a:	003b      	movs	r3, r7
 800235c:	78db      	ldrb	r3, [r3, #3]
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff ff76 	bl	8002250 <bcdToDec>
 8002364:	0003      	movs	r3, r0
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <getTime+0xac>)
 800236a:	70da      	strb	r2, [r3, #3]
		time.dayofmonth = bcdToDec(get_time[4]);
 800236c:	003b      	movs	r3, r7
 800236e:	791b      	ldrb	r3, [r3, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff ff6d 	bl	8002250 <bcdToDec>
 8002376:	0003      	movs	r3, r0
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <getTime+0xac>)
 800237c:	711a      	strb	r2, [r3, #4]
		time.month = bcdToDec(get_time[5]);
 800237e:	003b      	movs	r3, r7
 8002380:	795b      	ldrb	r3, [r3, #5]
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff ff64 	bl	8002250 <bcdToDec>
 8002388:	0003      	movs	r3, r0
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <getTime+0xac>)
 800238e:	715a      	strb	r2, [r3, #5]
		time.year = bcdToDec(get_time[6]);
 8002390:	003b      	movs	r3, r7
 8002392:	799b      	ldrb	r3, [r3, #6]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff ff5b 	bl	8002250 <bcdToDec>
 800239a:	0003      	movs	r3, r0
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <getTime+0xac>)
 80023a0:	719a      	strb	r2, [r3, #6]
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	2000008c 	.word	0x2000008c
 80023b0:	200001b0 	.word	0x200001b0

080023b4 <epochFromTime>:

int epochFromTime(TIME t){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	003b      	movs	r3, r7
 80023bc:	6018      	str	r0, [r3, #0]
 80023be:	6059      	str	r1, [r3, #4]
	//It is define above as EPOCH_2022. You can work from that and ignore the effects of leap years/seconds

	//YOUR CODE HERE
	//check how many days have passed between months, days and year

	int months = t.month - 1; //checks how many months has passed since January
 80023c0:	003b      	movs	r3, r7
 80023c2:	795b      	ldrb	r3, [r3, #5]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
	int day = t.dayofmonth; //equal to the day of the month
 80023c8:	003b      	movs	r3, r7
 80023ca:	791b      	ldrb	r3, [r3, #4]
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
	switch(months){
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	2b0b      	cmp	r3, #11
 80023d2:	d835      	bhi.n	8002440 <epochFromTime+0x8c>
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	009a      	lsls	r2, r3, #2
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <epochFromTime+0x10c>)
 80023da:	18d3      	adds	r3, r2, r3
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	469f      	mov	pc, r3
	case 0:
		day+=0;
		break;
	case 1: //Feb
		day += 31;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	331f      	adds	r3, #31
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023e6:	e02b      	b.n	8002440 <epochFromTime+0x8c>
	case 2: //Mar
		day += 59;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	333b      	adds	r3, #59	; 0x3b
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023ee:	e027      	b.n	8002440 <epochFromTime+0x8c>
	case 3: // Apr
		day += 90;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	335a      	adds	r3, #90	; 0x5a
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023f6:	e023      	b.n	8002440 <epochFromTime+0x8c>
	case 4: // May
		day += 120;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3378      	adds	r3, #120	; 0x78
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023fe:	e01f      	b.n	8002440 <epochFromTime+0x8c>
	case 5: //June
			day += 151;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3397      	adds	r3, #151	; 0x97
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002406:	e01b      	b.n	8002440 <epochFromTime+0x8c>
	case 6: //July
			day += 181;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	33b5      	adds	r3, #181	; 0xb5
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800240e:	e017      	b.n	8002440 <epochFromTime+0x8c>
	case 7: //Aug
			day += 212;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	33d4      	adds	r3, #212	; 0xd4
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002416:	e013      	b.n	8002440 <epochFromTime+0x8c>
	case 8: //Sept
			day += 242;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	33f2      	adds	r3, #242	; 0xf2
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800241e:	e00f      	b.n	8002440 <epochFromTime+0x8c>
	case 9: //Oct
			day += 272;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3311      	adds	r3, #17
 8002424:	33ff      	adds	r3, #255	; 0xff
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002428:	e00a      	b.n	8002440 <epochFromTime+0x8c>
	case 10: //Nov
			day += 304;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3331      	adds	r3, #49	; 0x31
 800242e:	33ff      	adds	r3, #255	; 0xff
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002432:	e005      	b.n	8002440 <epochFromTime+0x8c>
	case 11: //Dec
			day += 334;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	334f      	adds	r3, #79	; 0x4f
 8002438:	33ff      	adds	r3, #255	; 0xff
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800243c:	e000      	b.n	8002440 <epochFromTime+0x8c>
		break;
 800243e:	46c0      	nop			; (mov r8, r8)

	}
	//calculate the number of seconds for the days calculated above
	int daySeconds = day*86400;
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	0013      	movs	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	189b      	adds	r3, r3, r2
 8002448:	011a      	lsls	r2, r3, #4
 800244a:	1ad2      	subs	r2, r2, r3
 800244c:	0113      	lsls	r3, r2, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	01db      	lsls	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
	int hourSeconds = t.hour*3600;
 8002454:	003b      	movs	r3, r7
 8002456:	789b      	ldrb	r3, [r3, #2]
 8002458:	001a      	movs	r2, r3
 800245a:	0013      	movs	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	011a      	lsls	r2, r3, #4
 8002462:	1ad2      	subs	r2, r2, r3
 8002464:	0113      	lsls	r3, r2, #4
 8002466:	001a      	movs	r2, r3
 8002468:	61ba      	str	r2, [r7, #24]
	int minSeconds = t.minutes*60;
 800246a:	003b      	movs	r3, r7
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	001a      	movs	r2, r3
 8002470:	0013      	movs	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	617b      	str	r3, [r7, #20]
	int numYears = time.year - 22;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <epochFromTime+0x110>)
 800247c:	799b      	ldrb	r3, [r3, #6]
 800247e:	3b16      	subs	r3, #22
 8002480:	613b      	str	r3, [r7, #16]
	int yearSeconds = numYears*31536000;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	0013      	movs	r3, r2
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	189b      	adds	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	189b      	adds	r3, r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	189b      	adds	r3, r3, r2
 8002492:	011a      	lsls	r2, r3, #4
 8002494:	1ad2      	subs	r2, r2, r3
 8002496:	01d3      	lsls	r3, r2, #7
 8002498:	001a      	movs	r2, r3
 800249a:	60fa      	str	r2, [r7, #12]
	int epoch = EPOCH_2022 + t.seconds + daySeconds + hourSeconds + minSeconds + yearSeconds;
 800249c:	003b      	movs	r3, r7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <epochFromTime+0x114>)
 80024a2:	189a      	adds	r2, r3, r2
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	18d2      	adds	r2, r2, r3
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	18d2      	adds	r2, r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	18d3      	adds	r3, r2, r3
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	18d3      	adds	r3, r2, r3
 80024b4:	60bb      	str	r3, [r7, #8]

	/*
	 *COMPLETE THE SWITCH CASE OR INSERT YOUR OWN LOGIC
	 */

	return epoch;
 80024b6:	68bb      	ldr	r3, [r7, #8]
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b00a      	add	sp, #40	; 0x28
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	08006b14 	.word	0x08006b14
 80024c4:	200001b0 	.word	0x200001b0
 80024c8:	61cf7d60 	.word	0x61cf7d60

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1);
 80024d4:	e7fe      	b.n	80024d4 <Error_Handler+0x8>
	...

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_MspInit+0x44>)
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_MspInit+0x44>)
 80024e4:	2101      	movs	r1, #1
 80024e6:	430a      	orrs	r2, r1
 80024e8:	619a      	str	r2, [r3, #24]
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_MspInit+0x44>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_MspInit+0x44>)
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_MspInit+0x44>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0549      	lsls	r1, r1, #21
 8002500:	430a      	orrs	r2, r1
 8002502:	61da      	str	r2, [r3, #28]
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_MspInit+0x44>)
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	055b      	lsls	r3, r3, #21
 800250c:	4013      	ands	r3, r2
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b08b      	sub	sp, #44	; 0x2c
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	2414      	movs	r4, #20
 800252a:	193b      	adds	r3, r7, r4
 800252c:	0018      	movs	r0, r3
 800252e:	2314      	movs	r3, #20
 8002530:	001a      	movs	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	f002 ff26 	bl	8005384 <memset>
  if(hi2c->Instance==I2C1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_I2C_MspInit+0x90>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d131      	bne.n	80025a6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_I2C_MspInit+0x94>)
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_I2C_MspInit+0x94>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	02c9      	lsls	r1, r1, #11
 800254c:	430a      	orrs	r2, r1
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_I2C_MspInit+0x94>)
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	02db      	lsls	r3, r3, #11
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800255e:	0021      	movs	r1, r4
 8002560:	187b      	adds	r3, r7, r1
 8002562:	22c0      	movs	r2, #192	; 0xc0
 8002564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2212      	movs	r2, #18
 800256a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2203      	movs	r2, #3
 8002576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2201      	movs	r2, #1
 800257c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	187b      	adds	r3, r7, r1
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <HAL_I2C_MspInit+0x98>)
 8002582:	0019      	movs	r1, r3
 8002584:	0010      	movs	r0, r2
 8002586:	f000 fbf3 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_I2C_MspInit+0x94>)
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_I2C_MspInit+0x94>)
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0389      	lsls	r1, r1, #14
 8002594:	430a      	orrs	r2, r1
 8002596:	61da      	str	r2, [r3, #28]
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_I2C_MspInit+0x94>)
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	039b      	lsls	r3, r3, #14
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b00b      	add	sp, #44	; 0x2c
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40005400 	.word	0x40005400
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000400 	.word	0x48000400

080025bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	2414      	movs	r4, #20
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	0018      	movs	r0, r3
 80025ca:	2314      	movs	r3, #20
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f002 fed8 	bl	8005384 <memset>
  if(huart->Instance==USART2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a33      	ldr	r2, [pc, #204]	; (80026a8 <HAL_UART_MspInit+0xec>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d160      	bne.n	80026a0 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025de:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_UART_MspInit+0xf0>)
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_UART_MspInit+0xf0>)
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0289      	lsls	r1, r1, #10
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_UART_MspInit+0xf0>)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_UART_MspInit+0xf0>)
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_UART_MspInit+0xf0>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0289      	lsls	r1, r1, #10
 8002604:	430a      	orrs	r2, r1
 8002606:	615a      	str	r2, [r3, #20]
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_UART_MspInit+0xf0>)
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002616:	0021      	movs	r1, r4
 8002618:	187b      	adds	r3, r7, r1
 800261a:	220c      	movs	r2, #12
 800261c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2202      	movs	r2, #2
 8002622:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2203      	movs	r2, #3
 800262e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2201      	movs	r2, #1
 8002634:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	187a      	adds	r2, r7, r1
 8002638:	2390      	movs	r3, #144	; 0x90
 800263a:	05db      	lsls	r3, r3, #23
 800263c:	0011      	movs	r1, r2
 800263e:	0018      	movs	r0, r3
 8002640:	f000 fb96 	bl	8002d70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_UART_MspInit+0xf8>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 800264c:	2210      	movs	r2, #16
 800264e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002676:	0018      	movs	r0, r3
 8002678:	f000 f9f6 	bl	8002a68 <HAL_DMA_Init>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8002680:	f7ff ff24 	bl	80024cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 8002688:	66da      	str	r2, [r3, #108]	; 0x6c
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_UART_MspInit+0xf4>)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	201c      	movs	r0, #28
 8002696:	f000 f9b5 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800269a:	201c      	movs	r0, #28
 800269c:	f000 f9c7 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b00b      	add	sp, #44	; 0x2c
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	40004400 	.word	0x40004400
 80026ac:	40021000 	.word	0x40021000
 80026b0:	2000015c 	.word	0x2000015c
 80026b4:	40020044 	.word	0x40020044

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <NMI_Handler+0x4>

080026be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <HardFault_Handler+0x4>

080026c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026dc:	f000 f8ca 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <DMA1_Channel4_5_IRQHandler+0x14>)
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 fa7f 	bl	8002bf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	2000015c 	.word	0x2000015c

08002700 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <USART2_IRQHandler+0x14>)
 8002706:	0018      	movs	r0, r3
 8002708:	f001 ff72 	bl	80045f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	200000d8 	.word	0x200000d8

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <_sbrk+0x5c>)
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <_sbrk+0x60>)
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <_sbrk+0x64>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <_sbrk+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002748:	f002 fdf2 	bl	8005330 <__errno>
 800274c:	0003      	movs	r3, r0
 800274e:	220c      	movs	r2, #12
 8002750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002752:	2301      	movs	r3, #1
 8002754:	425b      	negs	r3, r3
 8002756:	e009      	b.n	800276c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	18d2      	adds	r2, r2, r3
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <_sbrk+0x64>)
 8002768:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b006      	add	sp, #24
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20002000 	.word	0x20002000
 8002778:	00000400 	.word	0x00000400
 800277c:	200001b8 	.word	0x200001b8
 8002780:	200001d0 	.word	0x200001d0

08002784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002792:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002796:	490e      	ldr	r1, [pc, #56]	; (80027d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <LoopForever+0xe>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027ac:	4c0b      	ldr	r4, [pc, #44]	; (80027dc <LoopForever+0x16>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027ba:	f7ff ffe3 	bl	8002784 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80027be:	f002 fdbd 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027c2:	f7ff fb53 	bl	8001e6c <main>

080027c6 <LoopForever>:

LoopForever:
    b LoopForever
 80027c6:	e7fe      	b.n	80027c6 <LoopForever>
  ldr   r0, =_estack
 80027c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027d4:	08006bc8 	.word	0x08006bc8
  ldr r2, =_sbss
 80027d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027dc:	200001d0 	.word	0x200001d0

080027e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC1_COMP_IRQHandler>
	...

080027e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <HAL_Init+0x24>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_Init+0x24>)
 80027ee:	2110      	movs	r1, #16
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f000 f809 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fa:	f7ff fe6d 	bl	80024d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40022000 	.word	0x40022000

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_InitTick+0x5c>)
 8002816:	681c      	ldr	r4, [r3, #0]
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_InitTick+0x60>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	0019      	movs	r1, r3
 800281e:	23fa      	movs	r3, #250	; 0xfa
 8002820:	0098      	lsls	r0, r3, #2
 8002822:	f7fd fc7b 	bl	800011c <__udivsi3>
 8002826:	0003      	movs	r3, r0
 8002828:	0019      	movs	r1, r3
 800282a:	0020      	movs	r0, r4
 800282c:	f7fd fc76 	bl	800011c <__udivsi3>
 8002830:	0003      	movs	r3, r0
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f90b 	bl	8002a4e <HAL_SYSTICK_Config>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d001      	beq.n	8002840 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e00f      	b.n	8002860 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d80b      	bhi.n	800285e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	2301      	movs	r3, #1
 800284a:	425b      	negs	r3, r3
 800284c:	2200      	movs	r2, #0
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f8d8 	bl	8002a04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_InitTick+0x64>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b003      	add	sp, #12
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	20000000 	.word	0x20000000
 800286c:	20000008 	.word	0x20000008
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_IncTick+0x1c>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	001a      	movs	r2, r3
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_IncTick+0x20>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	18d2      	adds	r2, r2, r3
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_IncTick+0x20>)
 8002886:	601a      	str	r2, [r3, #0]
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	20000008 	.word	0x20000008
 8002894:	200001bc 	.word	0x200001bc

08002898 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_GetTick+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	200001bc 	.word	0x200001bc

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b7f      	cmp	r3, #127	; 0x7f
 80028be:	d809      	bhi.n	80028d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	001a      	movs	r2, r3
 80028c6:	231f      	movs	r3, #31
 80028c8:	401a      	ands	r2, r3
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <__NVIC_EnableIRQ+0x30>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	4091      	lsls	r1, r2
 80028d0:	000a      	movs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
  }
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	0002      	movs	r2, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b7f      	cmp	r3, #127	; 0x7f
 80028f4:	d828      	bhi.n	8002948 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <__NVIC_SetPriority+0xd4>)
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	33c0      	adds	r3, #192	; 0xc0
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	589b      	ldr	r3, [r3, r2]
 8002906:	1dfa      	adds	r2, r7, #7
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	0011      	movs	r1, r2
 800290c:	2203      	movs	r2, #3
 800290e:	400a      	ands	r2, r1
 8002910:	00d2      	lsls	r2, r2, #3
 8002912:	21ff      	movs	r1, #255	; 0xff
 8002914:	4091      	lsls	r1, r2
 8002916:	000a      	movs	r2, r1
 8002918:	43d2      	mvns	r2, r2
 800291a:	401a      	ands	r2, r3
 800291c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	401a      	ands	r2, r3
 8002926:	1dfb      	adds	r3, r7, #7
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	2303      	movs	r3, #3
 800292e:	4003      	ands	r3, r0
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002934:	481f      	ldr	r0, [pc, #124]	; (80029b4 <__NVIC_SetPriority+0xd4>)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b25b      	sxtb	r3, r3
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	430a      	orrs	r2, r1
 8002940:	33c0      	adds	r3, #192	; 0xc0
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002946:	e031      	b.n	80029ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <__NVIC_SetPriority+0xd8>)
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	0019      	movs	r1, r3
 8002950:	230f      	movs	r3, #15
 8002952:	400b      	ands	r3, r1
 8002954:	3b08      	subs	r3, #8
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3306      	adds	r3, #6
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	3304      	adds	r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1dfa      	adds	r2, r7, #7
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	0011      	movs	r1, r2
 8002968:	2203      	movs	r2, #3
 800296a:	400a      	ands	r2, r1
 800296c:	00d2      	lsls	r2, r2, #3
 800296e:	21ff      	movs	r1, #255	; 0xff
 8002970:	4091      	lsls	r1, r2
 8002972:	000a      	movs	r2, r1
 8002974:	43d2      	mvns	r2, r2
 8002976:	401a      	ands	r2, r3
 8002978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	22ff      	movs	r2, #255	; 0xff
 8002980:	401a      	ands	r2, r3
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	2303      	movs	r3, #3
 800298a:	4003      	ands	r3, r0
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <__NVIC_SetPriority+0xd8>)
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	001c      	movs	r4, r3
 8002998:	230f      	movs	r3, #15
 800299a:	4023      	ands	r3, r4
 800299c:	3b08      	subs	r3, #8
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	430a      	orrs	r2, r1
 80029a2:	3306      	adds	r3, #6
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	18c3      	adds	r3, r0, r3
 80029a8:	3304      	adds	r3, #4
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b003      	add	sp, #12
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	045b      	lsls	r3, r3, #17
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d301      	bcc.n	80029d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d0:	2301      	movs	r3, #1
 80029d2:	e010      	b.n	80029f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <SysTick_Config+0x44>)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	3a01      	subs	r2, #1
 80029da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029dc:	2301      	movs	r3, #1
 80029de:	425b      	negs	r3, r3
 80029e0:	2103      	movs	r1, #3
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff ff7c 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <SysTick_Config+0x44>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <SysTick_Config+0x44>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	e000e010 	.word	0xe000e010

08002a04 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	210f      	movs	r1, #15
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff ff5d 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	0002      	movs	r2, r0
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff ff33 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff ffaf 	bl	80029bc <SysTick_Config>
 8002a5e:	0003      	movs	r3, r0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e036      	b.n	8002aec <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2221      	movs	r2, #33	; 0x21
 8002a82:	2102      	movs	r1, #2
 8002a84:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_DMA_Init+0x8c>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f932 	bl	8002d38 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2221      	movs	r2, #33	; 0x21
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}  
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	ffffc00f 	.word	0xffffc00f

08002af8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2221      	movs	r2, #33	; 0x21
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d008      	beq.n	8002b1e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e020      	b.n	8002b60 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	210e      	movs	r1, #14
 8002b2a:	438a      	bics	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	438a      	bics	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2101      	movs	r1, #1
 8002b48:	4091      	lsls	r1, r2
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2221      	movs	r2, #33	; 0x21
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	210f      	movs	r1, #15
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2221      	movs	r2, #33	; 0x21
 8002b7c:	5c9b      	ldrb	r3, [r3, r2]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d006      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2204      	movs	r2, #4
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e028      	b.n	8002be4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	210e      	movs	r1, #14
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4091      	lsls	r1, r2
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	0010      	movs	r0, r2
 8002be2:	4798      	blx	r3
    } 
  }
  return status;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2204      	movs	r2, #4
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	d024      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x72>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d020      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d107      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2104      	movs	r1, #4
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	2104      	movs	r1, #4
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d100      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x66>
 8002c56:	e06a      	b.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	0010      	movs	r0, r2
 8002c60:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c62:	e064      	b.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2202      	movs	r2, #2
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4013      	ands	r3, r2
 8002c72:	d02b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0xda>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d027      	beq.n	8002ccc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2220      	movs	r2, #32
 8002c84:	4013      	ands	r3, r2
 8002c86:	d10b      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	210a      	movs	r1, #10
 8002c94:	438a      	bics	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2221      	movs	r2, #33	; 0x21
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2102      	movs	r1, #2
 8002caa:	4091      	lsls	r1, r2
 8002cac:	000a      	movs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d036      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002cca:	e030      	b.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d028      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d024      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	210e      	movs	r1, #14
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4091      	lsls	r1, r2
 8002d00:	000a      	movs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2221      	movs	r2, #33	; 0x21
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	0010      	movs	r0, r2
 8002d2a:	4798      	blx	r3
    }
   }
}  
 8002d2c:	e7ff      	b.n	8002d2e <HAL_DMA_IRQHandler+0x13c>
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <DMA_CalcBaseAndBitshift+0x30>)
 8002d46:	4694      	mov	ip, r2
 8002d48:	4463      	add	r3, ip
 8002d4a:	2114      	movs	r1, #20
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fd f9e5 	bl	800011c <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <DMA_CalcBaseAndBitshift+0x34>)
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	bffdfff8 	.word	0xbffdfff8
 8002d6c:	40020000 	.word	0x40020000

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	e14f      	b.n	8003020 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4091      	lsls	r1, r2
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d100      	bne.n	8002d98 <HAL_GPIO_Init+0x28>
 8002d96:	e140      	b.n	800301a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d005      	beq.n	8002db0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d130      	bne.n	8002e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	0013      	movs	r3, r2
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	0013      	movs	r3, r2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de6:	2201      	movs	r2, #1
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
 8002dec:	0013      	movs	r3, r2
 8002dee:	43da      	mvns	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
 8002e04:	0013      	movs	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2203      	movs	r2, #3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d017      	beq.n	8002e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	0013      	movs	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2203      	movs	r2, #3
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d123      	bne.n	8002ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	58d3      	ldr	r3, [r2, r3]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	409a      	lsls	r2, r3
 8002e74:	0013      	movs	r3, r2
 8002e76:	43da      	mvns	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2107      	movs	r1, #7
 8002e86:	400b      	ands	r3, r1
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	08da      	lsrs	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3208      	adds	r2, #8
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	6939      	ldr	r1, [r7, #16]
 8002ea0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	0013      	movs	r3, r2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d100      	bne.n	8002ee4 <HAL_GPIO_Init+0x174>
 8002ee2:	e09a      	b.n	800301a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee4:	4b54      	ldr	r3, [pc, #336]	; (8003038 <HAL_GPIO_Init+0x2c8>)
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_GPIO_Init+0x2c8>)
 8002eea:	2101      	movs	r1, #1
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
 8002ef0:	4b51      	ldr	r3, [pc, #324]	; (8003038 <HAL_GPIO_Init+0x2c8>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002efc:	4a4f      	ldr	r2, [pc, #316]	; (800303c <HAL_GPIO_Init+0x2cc>)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	589b      	ldr	r3, [r3, r2]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4013      	ands	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	409a      	lsls	r2, r3
 8002f16:	0013      	movs	r3, r2
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	2390      	movs	r3, #144	; 0x90
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x1e2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a44      	ldr	r2, [pc, #272]	; (8003040 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x1de>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_GPIO_Init+0x2d4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x1da>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <HAL_GPIO_Init+0x2d8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x1d6>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e006      	b.n	8002f54 <HAL_GPIO_Init+0x1e4>
 8002f46:	2305      	movs	r3, #5
 8002f48:	e004      	b.n	8002f54 <HAL_GPIO_Init+0x1e4>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e002      	b.n	8002f54 <HAL_GPIO_Init+0x1e4>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x1e4>
 8002f52:	2300      	movs	r3, #0
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	2103      	movs	r1, #3
 8002f58:	400a      	ands	r2, r1
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f64:	4935      	ldr	r1, [pc, #212]	; (800303c <HAL_GPIO_Init+0x2cc>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	025b      	lsls	r3, r3, #9
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc6:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	035b      	lsls	r3, r3, #13
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	039b      	lsls	r3, r3, #14
 8003008:	4013      	ands	r3, r2
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_GPIO_Init+0x2dc>)
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3301      	adds	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	40da      	lsrs	r2, r3
 8003028:	1e13      	subs	r3, r2, #0
 800302a:	d000      	beq.n	800302e <HAL_GPIO_Init+0x2be>
 800302c:	e6a8      	b.n	8002d80 <HAL_GPIO_Init+0x10>
  } 
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b006      	add	sp, #24
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	40010000 	.word	0x40010000
 8003040:	48000400 	.word	0x48000400
 8003044:	48000800 	.word	0x48000800
 8003048:	48000c00 	.word	0x48000c00
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	0008      	movs	r0, r1
 800305a:	0011      	movs	r1, r2
 800305c:	1cbb      	adds	r3, r7, #2
 800305e:	1c02      	adds	r2, r0, #0
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	1c7b      	adds	r3, r7, #1
 8003064:	1c0a      	adds	r2, r1, #0
 8003066:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003068:	1c7b      	adds	r3, r7, #1
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003070:	1cbb      	adds	r3, r7, #2
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307a:	1cbb      	adds	r3, r7, #2
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b002      	add	sp, #8
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	000a      	movs	r2, r1
 8003094:	1cbb      	adds	r3, r7, #2
 8003096:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800309e:	1cbb      	adds	r3, r7, #2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	1cb9      	adds	r1, r7, #2
 80030ae:	8809      	ldrh	r1, [r1, #0]
 80030b0:	400b      	ands	r3, r1
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e082      	b.n	80031d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2241      	movs	r2, #65	; 0x41
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2240      	movs	r2, #64	; 0x40
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff fa19 	bl	8002520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2241      	movs	r2, #65	; 0x41
 80030f2:	2124      	movs	r1, #36	; 0x24
 80030f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	438a      	bics	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4934      	ldr	r1, [pc, #208]	; (80031e0 <HAL_I2C_Init+0x120>)
 8003110:	400a      	ands	r2, r1
 8003112:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4931      	ldr	r1, [pc, #196]	; (80031e4 <HAL_I2C_Init+0x124>)
 8003120:	400a      	ands	r2, r1
 8003122:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0209      	lsls	r1, r1, #8
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	e007      	b.n	800314e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2184      	movs	r1, #132	; 0x84
 8003148:	0209      	lsls	r1, r1, #8
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d104      	bne.n	8003160 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	491f      	ldr	r1, [pc, #124]	; (80031e8 <HAL_I2C_Init+0x128>)
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	491a      	ldr	r1, [pc, #104]	; (80031e4 <HAL_I2C_Init+0x124>)
 800317c:	400a      	ands	r2, r1
 800317e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	431a      	orrs	r2, r3
 800318a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69d9      	ldr	r1, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2241      	movs	r2, #65	; 0x41
 80031c4:	2120      	movs	r1, #32
 80031c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2242      	movs	r2, #66	; 0x42
 80031d2:	2100      	movs	r1, #0
 80031d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	f0ffffff 	.word	0xf0ffffff
 80031e4:	ffff7fff 	.word	0xffff7fff
 80031e8:	02008000 	.word	0x02008000

080031ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	000c      	movs	r4, r1
 80031f6:	0010      	movs	r0, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	230a      	movs	r3, #10
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	1c22      	adds	r2, r4, #0
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	2308      	movs	r3, #8
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	1c02      	adds	r2, r0, #0
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	1c0a      	adds	r2, r1, #0
 800320e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2241      	movs	r2, #65	; 0x41
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d000      	beq.n	800321e <HAL_I2C_Mem_Read+0x32>
 800321c:	e110      	b.n	8003440 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_I2C_Mem_Read+0x42>
 8003224:	232c      	movs	r3, #44	; 0x2c
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e103      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2240      	movs	r2, #64	; 0x40
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_I2C_Mem_Read+0x5c>
 8003244:	2302      	movs	r3, #2
 8003246:	e0fc      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003250:	f7ff fb22 	bl	8002898 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	0219      	lsls	r1, r3, #8
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2319      	movs	r3, #25
 8003264:	2201      	movs	r2, #1
 8003266:	f000 f979 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 800326a:	1e03      	subs	r3, r0, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e7      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2241      	movs	r2, #65	; 0x41
 8003276:	2122      	movs	r1, #34	; 0x22
 8003278:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2242      	movs	r2, #66	; 0x42
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	222c      	movs	r2, #44	; 0x2c
 8003292:	18ba      	adds	r2, r7, r2
 8003294:	8812      	ldrh	r2, [r2, #0]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	1dbb      	adds	r3, r7, #6
 80032a0:	881c      	ldrh	r4, [r3, #0]
 80032a2:	2308      	movs	r3, #8
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	230a      	movs	r3, #10
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	8819      	ldrh	r1, [r3, #0]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	0023      	movs	r3, r4
 80032ba:	f000 f8cb 	bl	8003454 <I2C_RequestMemoryRead>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d005      	beq.n	80032ce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0b9      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2bff      	cmp	r3, #255	; 0xff
 80032d6:	d911      	bls.n	80032fc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	22ff      	movs	r2, #255	; 0xff
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	045c      	lsls	r4, r3, #17
 80032e8:	230a      	movs	r3, #10
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	8819      	ldrh	r1, [r3, #0]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	4b56      	ldr	r3, [pc, #344]	; (800344c <HAL_I2C_Mem_Read+0x260>)
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	0023      	movs	r3, r4
 80032f6:	f000 fa65 	bl	80037c4 <I2C_TransferConfig>
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	049c      	lsls	r4, r3, #18
 8003310:	230a      	movs	r3, #10
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	8819      	ldrh	r1, [r3, #0]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	4b4c      	ldr	r3, [pc, #304]	; (800344c <HAL_I2C_Mem_Read+0x260>)
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f000 fa51 	bl	80037c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	0013      	movs	r3, r2
 800332c:	2200      	movs	r2, #0
 800332e:	2104      	movs	r1, #4
 8003330:	f000 f914 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e082      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d03a      	beq.n	80033ee <HAL_I2C_Mem_Read+0x202>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d136      	bne.n	80033ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	0013      	movs	r3, r2
 800338a:	2200      	movs	r2, #0
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	f000 f8e5 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e053      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2bff      	cmp	r3, #255	; 0xff
 80033a2:	d911      	bls.n	80033c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	045c      	lsls	r4, r3, #17
 80033b4:	230a      	movs	r3, #10
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	8819      	ldrh	r1, [r3, #0]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	0023      	movs	r3, r4
 80033c2:	f000 f9ff 	bl	80037c4 <I2C_TransferConfig>
 80033c6:	e012      	b.n	80033ee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	049c      	lsls	r4, r3, #18
 80033dc:	230a      	movs	r3, #10
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	8819      	ldrh	r1, [r3, #0]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	0023      	movs	r3, r4
 80033ea:	f000 f9eb 	bl	80037c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d194      	bne.n	8003322 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f92a 	bl	8003658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003404:	1e03      	subs	r3, r0, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e01a      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2220      	movs	r2, #32
 8003412:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	490c      	ldr	r1, [pc, #48]	; (8003450 <HAL_I2C_Mem_Read+0x264>)
 8003420:	400a      	ands	r2, r1
 8003422:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2241      	movs	r2, #65	; 0x41
 8003428:	2120      	movs	r1, #32
 800342a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2242      	movs	r2, #66	; 0x42
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b007      	add	sp, #28
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	80002400 	.word	0x80002400
 8003450:	fe00e800 	.word	0xfe00e800

08003454 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	000c      	movs	r4, r1
 800345e:	0010      	movs	r0, r2
 8003460:	0019      	movs	r1, r3
 8003462:	250a      	movs	r5, #10
 8003464:	197b      	adds	r3, r7, r5
 8003466:	1c22      	adds	r2, r4, #0
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	2308      	movs	r3, #8
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	1c02      	adds	r2, r0, #0
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	1dbb      	adds	r3, r7, #6
 8003474:	1c0a      	adds	r2, r1, #0
 8003476:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003478:	1dbb      	adds	r3, r7, #6
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	197b      	adds	r3, r7, r5
 8003480:	8819      	ldrh	r1, [r3, #0]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <I2C_RequestMemoryRead+0xc0>)
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	f000 f99b 	bl	80037c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f8a0 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e033      	b.n	800350a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a2:	1dbb      	adds	r3, r7, #6
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034aa:	2308      	movs	r3, #8
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
 80034b8:	e019      	b.n	80034ee <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ba:	2308      	movs	r3, #8
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	6a39      	ldr	r1, [r7, #32]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f881 	bl	80035da <I2C_WaitOnTXISFlagUntilTimeout>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d001      	beq.n	80034e0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e014      	b.n	800350a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e0:	2308      	movs	r3, #8
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a3a      	ldr	r2, [r7, #32]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	0013      	movs	r3, r2
 80034f8:	2200      	movs	r2, #0
 80034fa:	2140      	movs	r1, #64	; 0x40
 80034fc:	f000 f82e 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bdb0      	pop	{r4, r5, r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	80002000 	.word	0x80002000

08003518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2202      	movs	r2, #2
 8003528:	4013      	ands	r3, r2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d103      	bne.n	8003536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2201      	movs	r2, #1
 800353e:	4013      	ands	r3, r2
 8003540:	2b01      	cmp	r3, #1
 8003542:	d007      	beq.n	8003554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	619a      	str	r2, [r3, #24]
  }
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	1dfb      	adds	r3, r7, #7
 800356a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356c:	e021      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	d01e      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003574:	f7ff f990 	bl	8002898 <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d113      	bne.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	2220      	movs	r2, #32
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2241      	movs	r2, #65	; 0x41
 800359a:	2120      	movs	r1, #32
 800359c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2242      	movs	r2, #66	; 0x42
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00f      	b.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	425a      	negs	r2, r3
 80035c2:	4153      	adcs	r3, r2
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	001a      	movs	r2, r3
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d0ce      	beq.n	800356e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}

080035da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e6:	e02b      	b.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 f86e 	bl	80036d0 <I2C_IsAcknowledgeFailed>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d001      	beq.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e029      	b.n	8003650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3301      	adds	r3, #1
 8003600:	d01e      	beq.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7ff f949 	bl	8002898 <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	2220      	movs	r2, #32
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2241      	movs	r2, #65	; 0x41
 8003628:	2120      	movs	r1, #32
 800362a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2242      	movs	r2, #66	; 0x42
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	2100      	movs	r1, #0
 800363a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e007      	b.n	8003650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d1cc      	bne.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003664:	e028      	b.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0018      	movs	r0, r3
 800366e:	f000 f82f 	bl	80036d0 <I2C_IsAcknowledgeFailed>
 8003672:	1e03      	subs	r3, r0, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e026      	b.n	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7ff f90d 	bl	8002898 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d113      	bne.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	2220      	movs	r2, #32
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2241      	movs	r2, #65	; 0x41
 80036a0:	2120      	movs	r1, #32
 80036a2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2242      	movs	r2, #66	; 0x42
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2240      	movs	r2, #64	; 0x40
 80036b0:	2100      	movs	r1, #0
 80036b2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e007      	b.n	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2220      	movs	r2, #32
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d1cf      	bne.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b004      	add	sp, #16
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2210      	movs	r2, #16
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d164      	bne.n	80037b4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	049b      	lsls	r3, r3, #18
 80036f4:	401a      	ands	r2, r3
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	049b      	lsls	r3, r3, #18
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d02b      	beq.n	8003756 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	01c9      	lsls	r1, r1, #7
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003710:	e021      	b.n	8003756 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	d01e      	beq.n	8003756 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7ff f8be 	bl	8002898 <HAL_GetTick>
 800371c:	0002      	movs	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_IsAcknowledgeFailed+0x5e>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	2220      	movs	r2, #32
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2241      	movs	r2, #65	; 0x41
 800373e:	2120      	movs	r1, #32
 8003740:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2242      	movs	r2, #66	; 0x42
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2240      	movs	r2, #64	; 0x40
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e02f      	b.n	80037b6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2220      	movs	r2, #32
 800375e:	4013      	ands	r3, r2
 8003760:	2b20      	cmp	r3, #32
 8003762:	d1d6      	bne.n	8003712 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2210      	movs	r2, #16
 800376a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2220      	movs	r2, #32
 8003772:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff fece 	bl	8003518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	490e      	ldr	r1, [pc, #56]	; (80037c0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003788:	400a      	ands	r2, r1
 800378a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2204      	movs	r2, #4
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2241      	movs	r2, #65	; 0x41
 800379c:	2120      	movs	r1, #32
 800379e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2242      	movs	r2, #66	; 0x42
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	0018      	movs	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	fe00e800 	.word	0xfe00e800

080037c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	0008      	movs	r0, r1
 80037ce:	0011      	movs	r1, r2
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	240a      	movs	r4, #10
 80037d4:	193b      	adds	r3, r7, r4
 80037d6:	1c02      	adds	r2, r0, #0
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	2009      	movs	r0, #9
 80037dc:	183b      	adds	r3, r7, r0
 80037de:	1c0a      	adds	r2, r1, #0
 80037e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	0d51      	lsrs	r1, r2, #21
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	00d2      	lsls	r2, r2, #3
 80037f0:	400a      	ands	r2, r1
 80037f2:	490e      	ldr	r1, [pc, #56]	; (800382c <I2C_TransferConfig+0x68>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	43d2      	mvns	r2, r2
 80037f8:	401a      	ands	r2, r3
 80037fa:	0011      	movs	r1, r2
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	059b      	lsls	r3, r3, #22
 8003802:	0d9a      	lsrs	r2, r3, #22
 8003804:	183b      	adds	r3, r7, r0
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	0418      	lsls	r0, r3, #16
 800380a:	23ff      	movs	r3, #255	; 0xff
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	4003      	ands	r3, r0
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	431a      	orrs	r2, r3
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b005      	add	sp, #20
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	03ff63ff 	.word	0x03ff63ff

08003830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	d138      	bne.n	80038b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003850:	2302      	movs	r3, #2
 8003852:	e032      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	2101      	movs	r1, #1
 800385a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2241      	movs	r2, #65	; 0x41
 8003860:	2124      	movs	r1, #36	; 0x24
 8003862:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	438a      	bics	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4911      	ldr	r1, [pc, #68]	; (80038c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003880:	400a      	ands	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2241      	movs	r2, #65	; 0x41
 80038a8:	2120      	movs	r1, #32
 80038aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	ffffefff 	.word	0xffffefff

080038c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2241      	movs	r2, #65	; 0x41
 80038d6:	5c9b      	ldrb	r3, [r3, r2]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d139      	bne.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2240      	movs	r2, #64	; 0x40
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e033      	b.n	8003954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	2101      	movs	r1, #1
 80038f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2241      	movs	r2, #65	; 0x41
 80038f8:	2124      	movs	r1, #36	; 0x24
 80038fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	438a      	bics	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2241      	movs	r2, #65	; 0x41
 8003942:	2120      	movs	r1, #32
 8003944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2240      	movs	r2, #64	; 0x40
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}
 800395c:	fffff0ff 	.word	0xfffff0ff

08003960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e301      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	d100      	bne.n	800397e <HAL_RCC_OscConfig+0x1e>
 800397c:	e08d      	b.n	8003a9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800397e:	4bc3      	ldr	r3, [pc, #780]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	220c      	movs	r2, #12
 8003984:	4013      	ands	r3, r2
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00e      	beq.n	80039a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800398a:	4bc0      	ldr	r3, [pc, #768]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	220c      	movs	r2, #12
 8003990:	4013      	ands	r3, r2
 8003992:	2b08      	cmp	r3, #8
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x64>
 8003996:	4bbd      	ldr	r3, [pc, #756]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	025b      	lsls	r3, r3, #9
 800399e:	401a      	ands	r2, r3
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	025b      	lsls	r3, r3, #9
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4bb8      	ldr	r3, [pc, #736]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	029b      	lsls	r3, r3, #10
 80039b0:	4013      	ands	r3, r2
 80039b2:	d100      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56>
 80039b4:	e070      	b.n	8003a98 <HAL_RCC_OscConfig+0x138>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d000      	beq.n	80039c0 <HAL_RCC_OscConfig+0x60>
 80039be:	e06b      	b.n	8003a98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e2d8      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x7c>
 80039cc:	4baf      	ldr	r3, [pc, #700]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4bae      	ldr	r3, [pc, #696]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e02f      	b.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x9e>
 80039e4:	4ba9      	ldr	r3, [pc, #676]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4ba8      	ldr	r3, [pc, #672]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039ea:	49a9      	ldr	r1, [pc, #676]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	4ba6      	ldr	r3, [pc, #664]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4ba5      	ldr	r3, [pc, #660]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 80039f6:	49a7      	ldr	r1, [pc, #668]	; (8003c94 <HAL_RCC_OscConfig+0x334>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e01e      	b.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10e      	bne.n	8003a24 <HAL_RCC_OscConfig+0xc4>
 8003a06:	4ba1      	ldr	r3, [pc, #644]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4ba0      	ldr	r3, [pc, #640]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	02c9      	lsls	r1, r1, #11
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	4b9d      	ldr	r3, [pc, #628]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b9c      	ldr	r3, [pc, #624]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	0249      	lsls	r1, r1, #9
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0xdc>
 8003a24:	4b99      	ldr	r3, [pc, #612]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	4999      	ldr	r1, [pc, #612]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b95      	ldr	r3, [pc, #596]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	4997      	ldr	r1, [pc, #604]	; (8003c94 <HAL_RCC_OscConfig+0x334>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d014      	beq.n	8003a6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fe ff28 	bl	8002898 <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4e:	f7fe ff23 	bl	8002898 <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e28a      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a60:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	029b      	lsls	r3, r3, #10
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0xee>
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fe ff13 	bl	8002898 <HAL_GetTick>
 8003a72:	0003      	movs	r3, r0
 8003a74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe ff0e 	bl	8002898 <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e275      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b80      	ldr	r3, [pc, #512]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	4013      	ands	r3, r2
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x118>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x146>
 8003aa4:	e069      	b.n	8003b7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003aa6:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	220c      	movs	r2, #12
 8003aac:	4013      	ands	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ab0:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	220c      	movs	r2, #12
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x196>
 8003abc:	4b73      	ldr	r3, [pc, #460]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d116      	bne.n	8003af6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac8:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e24b      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b6b      	ldr	r3, [pc, #428]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	22f8      	movs	r2, #248	; 0xf8
 8003ae4:	4393      	bics	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00da      	lsls	r2, r3, #3
 8003aee:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af4:	e041      	b.n	8003b7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d024      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afe:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b62      	ldr	r3, [pc, #392]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fec5 	bl	8002898 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fec0 	bl	8002898 <HAL_GetTick>
 8003b18:	0002      	movs	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e227      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d0f1      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	22f8      	movs	r2, #248	; 0xf8
 8003b36:	4393      	bics	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00da      	lsls	r2, r3, #3
 8003b40:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	2101      	movs	r1, #1
 8003b50:	438a      	bics	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fea0 	bl	8002898 <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fe9b 	bl	8002898 <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e202      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b70:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2202      	movs	r2, #2
 8003b76:	4013      	ands	r3, r2
 8003b78:	d1f1      	bne.n	8003b5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4013      	ands	r3, r2
 8003b82:	d036      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d019      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	430a      	orrs	r2, r1
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fe fe7e 	bl	8002898 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fe fe79 	bl	8002898 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1e0      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x242>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc4:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	438a      	bics	r2, r1
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe fe64 	bl	8002898 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fe5f 	bl	8002898 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1c6      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d1f1      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <HAL_RCC_OscConfig+0x29e>
 8003bfc:	e0b4      	b.n	8003d68 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfe:	201f      	movs	r0, #31
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	055b      	lsls	r3, r3, #21
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d110      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0549      	lsls	r1, r1, #21
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	61da      	str	r2, [r3, #28]
 8003c20:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	055b      	lsls	r3, r3, #21
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d11a      	bne.n	8003c76 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	0049      	lsls	r1, r1, #1
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fe23 	bl	8002898 <HAL_GetTick>
 8003c52:	0003      	movs	r3, r0
 8003c54:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c58:	f7fe fe1e 	bl	8002898 <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e185      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_OscConfig+0x338>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4013      	ands	r3, r2
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10e      	bne.n	8003c9c <HAL_RCC_OscConfig+0x33c>
 8003c7e:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <HAL_RCC_OscConfig+0x32c>)
 8003c84:	2101      	movs	r1, #1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	621a      	str	r2, [r3, #32]
 8003c8a:	e035      	b.n	8003cf8 <HAL_RCC_OscConfig+0x398>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	fffeffff 	.word	0xfffeffff
 8003c94:	fffbffff 	.word	0xfffbffff
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCC_OscConfig+0x35e>
 8003ca4:	4bb6      	ldr	r3, [pc, #728]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	4bb5      	ldr	r3, [pc, #724]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	621a      	str	r2, [r3, #32]
 8003cb0:	4bb3      	ldr	r3, [pc, #716]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	4bb2      	ldr	r3, [pc, #712]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	438a      	bics	r2, r1
 8003cba:	621a      	str	r2, [r3, #32]
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x398>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x380>
 8003cc6:	4bae      	ldr	r3, [pc, #696]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	4bad      	ldr	r3, [pc, #692]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ccc:	2104      	movs	r1, #4
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	621a      	str	r2, [r3, #32]
 8003cd2:	4bab      	ldr	r3, [pc, #684]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	4baa      	ldr	r3, [pc, #680]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	621a      	str	r2, [r3, #32]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x398>
 8003ce0:	4ba7      	ldr	r3, [pc, #668]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	4ba6      	ldr	r3, [pc, #664]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	621a      	str	r2, [r3, #32]
 8003cec:	4ba4      	ldr	r3, [pc, #656]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	4ba3      	ldr	r3, [pc, #652]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003cf2:	2104      	movs	r1, #4
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d014      	beq.n	8003d2a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fe fdca 	bl	8002898 <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	e009      	b.n	8003d1e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fe fdc5 	bl	8002898 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	4a9b      	ldr	r2, [pc, #620]	; (8003f84 <HAL_RCC_OscConfig+0x624>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e12b      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b98      	ldr	r3, [pc, #608]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x3aa>
 8003d28:	e013      	b.n	8003d52 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fdb5 	bl	8002898 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e009      	b.n	8003d48 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fe fdb0 	bl	8002898 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	4a91      	ldr	r2, [pc, #580]	; (8003f84 <HAL_RCC_OscConfig+0x624>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e116      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d48:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d52:	231f      	movs	r3, #31
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b88      	ldr	r3, [pc, #544]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	4b87      	ldr	r3, [pc, #540]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d62:	4989      	ldr	r1, [pc, #548]	; (8003f88 <HAL_RCC_OscConfig+0x628>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d063      	beq.n	8003e3a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	4b80      	ldr	r3, [pc, #512]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d80:	2104      	movs	r1, #4
 8003d82:	430a      	orrs	r2, r1
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d86:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	4b7d      	ldr	r3, [pc, #500]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fd81 	bl	8002898 <HAL_GetTick>
 8003d96:	0003      	movs	r3, r0
 8003d98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d9c:	f7fe fd7c 	bl	8002898 <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0e3      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dae:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	2202      	movs	r2, #2
 8003db4:	4013      	ands	r3, r2
 8003db6:	d0f1      	beq.n	8003d9c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003db8:	4b71      	ldr	r3, [pc, #452]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	22f8      	movs	r2, #248	; 0xf8
 8003dbe:	4393      	bics	r3, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	00da      	lsls	r2, r3, #3
 8003dc8:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dce:	e034      	b.n	8003e3a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	3305      	adds	r3, #5
 8003dd6:	d111      	bne.n	8003dfc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ddc:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dde:	2104      	movs	r1, #4
 8003de0:	438a      	bics	r2, r1
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	22f8      	movs	r2, #248	; 0xf8
 8003dea:	4393      	bics	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	00da      	lsls	r2, r3, #3
 8003df4:	4b62      	ldr	r3, [pc, #392]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003df6:	430a      	orrs	r2, r1
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dfa:	e01e      	b.n	8003e3a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dfc:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e00:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e02:	2104      	movs	r1, #4
 8003e04:	430a      	orrs	r2, r1
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e08:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0c:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	438a      	bics	r2, r1
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fe fd40 	bl	8002898 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e1e:	f7fe fd3b 	bl	8002898 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0a2      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f1      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4e4>
 8003e42:	e097      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e44:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	220c      	movs	r2, #12
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d100      	bne.n	8003e52 <HAL_RCC_OscConfig+0x4f2>
 8003e50:	e06b      	b.n	8003f2a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d14c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e60:	494a      	ldr	r1, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x62c>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe fd17 	bl	8002898 <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fd12 	bl	8002898 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e079      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e82:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	049b      	lsls	r3, r3, #18
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	220f      	movs	r2, #15
 8003e94:	4393      	bics	r3, r2
 8003e96:	0019      	movs	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <HAL_RCC_OscConfig+0x630>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	0449      	lsls	r1, r1, #17
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fce5 	bl	8002898 <HAL_GetTick>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe fce0 	bl	8002898 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e047      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	049b      	lsls	r3, r3, #18
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x574>
 8003ef2:	e03f      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003efa:	4924      	ldr	r1, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x62c>)
 8003efc:	400a      	ands	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fe fcca 	bl	8002898 <HAL_GetTick>
 8003f04:	0003      	movs	r3, r0
 8003f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fe fcc5 	bl	8002898 <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e02c      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	049b      	lsls	r3, r3, #18
 8003f24:	4013      	ands	r3, r2
 8003f26:	d1f0      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5aa>
 8003f28:	e024      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01f      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_OscConfig+0x620>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d10e      	bne.n	8003f70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	220f      	movs	r2, #15
 8003f56:	401a      	ands	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	23f0      	movs	r3, #240	; 0xf0
 8003f64:	039b      	lsls	r3, r3, #14
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b008      	add	sp, #32
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	40021000 	.word	0x40021000
 8003f84:	00001388 	.word	0x00001388
 8003f88:	efffffff 	.word	0xefffffff
 8003f8c:	feffffff 	.word	0xfeffffff
 8003f90:	ffc2ffff 	.word	0xffc2ffff

08003f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b3      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d911      	bls.n	8003fda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b58      	ldr	r3, [pc, #352]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	4b55      	ldr	r3, [pc, #340]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc8:	4b53      	ldr	r3, [pc, #332]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e09a      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d015      	beq.n	8004010 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	4013      	ands	r3, r2
 8003fec:	d006      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fee:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8003ff4:	21e0      	movs	r1, #224	; 0xe0
 8003ff6:	00c9      	lsls	r1, r1, #3
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	22f0      	movs	r2, #240	; 0xf0
 8004002:	4393      	bics	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b44      	ldr	r3, [pc, #272]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2201      	movs	r2, #1
 8004016:	4013      	ands	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	4013      	ands	r3, r2
 800402c:	d114      	bne.n	8004058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06e      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	049b      	lsls	r3, r3, #18
 8004042:	4013      	ands	r3, r2
 8004044:	d108      	bne.n	8004058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e062      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2202      	movs	r2, #2
 8004050:	4013      	ands	r3, r2
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e05b      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004058:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2203      	movs	r2, #3
 800405e:	4393      	bics	r3, r2
 8004060:	0019      	movs	r1, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406c:	f7fe fc14 	bl	8002898 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004074:	e009      	b.n	800408a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004076:	f7fe fc0f 	bl	8002898 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <HAL_RCC_ClockConfig+0x18c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e042      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	220c      	movs	r2, #12
 8004090:	401a      	ands	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1ec      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d211      	bcs.n	80040ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4393      	bics	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040bc:	4b16      	ldr	r3, [pc, #88]	; (8004118 <HAL_RCC_ClockConfig+0x184>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e020      	b.n	8004110 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2204      	movs	r2, #4
 80040d4:	4013      	ands	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_RCC_ClockConfig+0x190>)
 80040de:	4013      	ands	r3, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040ec:	f000 f820 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040f0:	0001      	movs	r1, r0
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_ClockConfig+0x188>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	220f      	movs	r2, #15
 80040fa:	4013      	ands	r3, r2
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x194>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	000a      	movs	r2, r1
 8004102:	40da      	lsrs	r2, r3
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x198>)
 8004106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fe fb7f 	bl	800280c <HAL_InitTick>
  
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b004      	add	sp, #16
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40022000 	.word	0x40022000
 800411c:	40021000 	.word	0x40021000
 8004120:	00001388 	.word	0x00001388
 8004124:	fffff8ff 	.word	0xfffff8ff
 8004128:	08006b44 	.word	0x08006b44
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b08f      	sub	sp, #60	; 0x3c
 8004134:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004136:	2314      	movs	r3, #20
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800413c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800413e:	c313      	stmia	r3!, {r0, r1, r4}
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	4a29      	ldr	r2, [pc, #164]	; (80041ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004148:	ca13      	ldmia	r2!, {r0, r1, r4}
 800414a:	c313      	stmia	r3!, {r0, r1, r4}
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	2300      	movs	r3, #0
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
 8004158:	2300      	movs	r3, #0
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	220c      	movs	r2, #12
 800416e:	4013      	ands	r3, r2
 8004170:	2b04      	cmp	r3, #4
 8004172:	d002      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x4a>
 8004174:	2b08      	cmp	r3, #8
 8004176:	d003      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x50>
 8004178:	e02d      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800417e:	e02d      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	0c9b      	lsrs	r3, r3, #18
 8004184:	220f      	movs	r2, #15
 8004186:	4013      	ands	r3, r2
 8004188:	2214      	movs	r2, #20
 800418a:	18ba      	adds	r2, r7, r2
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004190:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	220f      	movs	r2, #15
 8004196:	4013      	ands	r3, r2
 8004198:	1d3a      	adds	r2, r7, #4
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800419e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	025b      	lsls	r3, r3, #9
 80041a4:	4013      	ands	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041aa:	4812      	ldr	r0, [pc, #72]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041ac:	f7fb ffb6 	bl	800011c <__udivsi3>
 80041b0:	0003      	movs	r3, r0
 80041b2:	001a      	movs	r2, r3
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	4353      	muls	r3, r2
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	e009      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041be:	000a      	movs	r2, r1
 80041c0:	0152      	lsls	r2, r2, #5
 80041c2:	1a52      	subs	r2, r2, r1
 80041c4:	0193      	lsls	r3, r2, #6
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	185b      	adds	r3, r3, r1
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041d4:	e002      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b00f      	add	sp, #60	; 0x3c
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	08006a74 	.word	0x08006a74
 80041ec:	08006a84 	.word	0x08006a84
 80041f0:	40021000 	.word	0x40021000
 80041f4:	007a1200 	.word	0x007a1200

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b02      	ldr	r3, [pc, #8]	; (8004208 <HAL_RCC_GetHCLKFreq+0x10>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004210:	f7ff fff2 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004214:	0001      	movs	r1, r0
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	2207      	movs	r2, #7
 800421e:	4013      	ands	r3, r2
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	40d9      	lsrs	r1, r3
 8004226:	000b      	movs	r3, r1
}    
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	40021000 	.word	0x40021000
 8004234:	08006b54 	.word	0x08006b54

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	4013      	ands	r3, r2
 8004252:	d100      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004254:	e08e      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004256:	2017      	movs	r0, #23
 8004258:	183b      	adds	r3, r7, r0
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b5f      	ldr	r3, [pc, #380]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	055b      	lsls	r3, r3, #21
 8004266:	4013      	ands	r3, r2
 8004268:	d110      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	4b5c      	ldr	r3, [pc, #368]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	4b5b      	ldr	r3, [pc, #364]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	0549      	lsls	r1, r1, #21
 8004274:	430a      	orrs	r2, r1
 8004276:	61da      	str	r2, [r3, #28]
 8004278:	4b58      	ldr	r3, [pc, #352]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	055b      	lsls	r3, r3, #21
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	183b      	adds	r3, r7, r0
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	4b54      	ldr	r3, [pc, #336]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4013      	ands	r3, r2
 8004296:	d11a      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004298:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	0049      	lsls	r1, r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a6:	f7fe faf7 	bl	8002898 <HAL_GetTick>
 80042aa:	0003      	movs	r3, r0
 80042ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	e008      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b0:	f7fe faf2 	bl	8002898 <HAL_GetTick>
 80042b4:	0002      	movs	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e087      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4013      	ands	r3, r2
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ce:	4b43      	ldr	r3, [pc, #268]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	23c0      	movs	r3, #192	; 0xc0
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4013      	ands	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d034      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	23c0      	movs	r3, #192	; 0xc0
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4013      	ands	r3, r2
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d02c      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f0:	4b3a      	ldr	r3, [pc, #232]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4a3b      	ldr	r2, [pc, #236]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	4b37      	ldr	r3, [pc, #220]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	0249      	lsls	r1, r1, #9
 8004304:	430a      	orrs	r2, r1
 8004306:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	4b33      	ldr	r3, [pc, #204]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430e:	4936      	ldr	r1, [pc, #216]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004310:	400a      	ands	r2, r1
 8004312:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	4013      	ands	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fe fab9 	bl	8002898 <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	e009      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fe fab4 	bl	8002898 <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	4a2d      	ldr	r2, [pc, #180]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e048      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	4b26      	ldr	r3, [pc, #152]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	2202      	movs	r2, #2
 8004346:	4013      	ands	r3, r2
 8004348:	d0f0      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004350:	4013      	ands	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800435a:	430a      	orrs	r2, r1
 800435c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800435e:	2317      	movs	r3, #23
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436e:	4920      	ldr	r1, [pc, #128]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	400a      	ands	r2, r1
 8004372:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	2203      	movs	r2, #3
 8004384:	4393      	bics	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438e:	430a      	orrs	r2, r1
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2220      	movs	r2, #32
 8004398:	4013      	ands	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	2210      	movs	r2, #16
 80043a2:	4393      	bics	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ac:	430a      	orrs	r2, r1
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4013      	ands	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043bc:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	2240      	movs	r2, #64	; 0x40
 80043c2:	4393      	bics	r3, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b006      	add	sp, #24
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40007000 	.word	0x40007000
 80043e4:	fffffcff 	.word	0xfffffcff
 80043e8:	fffeffff 	.word	0xfffeffff
 80043ec:	00001388 	.word	0x00001388
 80043f0:	efffffff 	.word	0xefffffff

080043f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e044      	b.n	8004490 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2274      	movs	r2, #116	; 0x74
 8004412:	2100      	movs	r1, #0
 8004414:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fe f8cf 	bl	80025bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2224      	movs	r2, #36	; 0x24
 8004422:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	438a      	bics	r2, r1
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0018      	movs	r0, r3
 8004438:	f000 fbce 	bl	8004bd8 <UART_SetConfig>
 800443c:	0003      	movs	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e024      	b.n	8004490 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fd01 	bl	8004e58 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	490d      	ldr	r1, [pc, #52]	; (8004498 <HAL_UART_Init+0xa4>)
 8004462:	400a      	ands	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	212a      	movs	r1, #42	; 0x2a
 8004472:	438a      	bics	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	430a      	orrs	r2, r1
 8004484:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 fd99 	bl	8004fc0 <UART_CheckIdleState>
 800448e:	0003      	movs	r3, r0
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}
 8004498:	ffffb7ff 	.word	0xffffb7ff

0800449c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	1dbb      	adds	r3, r7, #6
 80044aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d000      	beq.n	80044b6 <HAL_UART_Transmit+0x1a>
 80044b4:	e096      	b.n	80045e4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_UART_Transmit+0x28>
 80044bc:	1dbb      	adds	r3, r7, #6
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e08e      	b.n	80045e6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	015b      	lsls	r3, r3, #5
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d109      	bne.n	80044e8 <HAL_UART_Transmit+0x4c>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2201      	movs	r2, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e07e      	b.n	80045e6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2274      	movs	r2, #116	; 0x74
 80044ec:	5c9b      	ldrb	r3, [r3, r2]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Transmit+0x5a>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e077      	b.n	80045e6 <HAL_UART_Transmit+0x14a>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2274      	movs	r2, #116	; 0x74
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	2100      	movs	r1, #0
 8004504:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2221      	movs	r2, #33	; 0x21
 800450a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450c:	f7fe f9c4 	bl	8002898 <HAL_GetTick>
 8004510:	0003      	movs	r3, r0
 8004512:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1dba      	adds	r2, r7, #6
 8004518:	2150      	movs	r1, #80	; 0x50
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1dba      	adds	r2, r7, #6
 8004522:	2152      	movs	r1, #82	; 0x52
 8004524:	8812      	ldrh	r2, [r2, #0]
 8004526:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	015b      	lsls	r3, r3, #5
 8004530:	429a      	cmp	r2, r3
 8004532:	d108      	bne.n	8004546 <HAL_UART_Transmit+0xaa>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e003      	b.n	800454e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2274      	movs	r2, #116	; 0x74
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004556:	e02d      	b.n	80045b4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	0013      	movs	r3, r2
 8004562:	2200      	movs	r2, #0
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	f000 fd73 	bl	8005050 <UART_WaitOnFlagUntilTimeout>
 800456a:	1e03      	subs	r3, r0, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e039      	b.n	80045e6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	05d2      	lsls	r2, r2, #23
 8004582:	0dd2      	lsrs	r2, r2, #23
 8004584:	b292      	uxth	r2, r2
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	3302      	adds	r3, #2
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e008      	b.n	80045a2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b292      	uxth	r2, r2
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2252      	movs	r2, #82	; 0x52
 80045a6:	5a9b      	ldrh	r3, [r3, r2]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b299      	uxth	r1, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2252      	movs	r2, #82	; 0x52
 80045b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2252      	movs	r2, #82	; 0x52
 80045b8:	5a9b      	ldrh	r3, [r3, r2]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1cb      	bne.n	8004558 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	0013      	movs	r3, r2
 80045ca:	2200      	movs	r2, #0
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	f000 fd3f 	bl	8005050 <UART_WaitOnFlagUntilTimeout>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e005      	b.n	80045e6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	0018      	movs	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b008      	add	sp, #32
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b0ab      	sub	sp, #172	; 0xac
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	22a4      	movs	r2, #164	; 0xa4
 8004600:	18b9      	adds	r1, r7, r2
 8004602:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	20a0      	movs	r0, #160	; 0xa0
 800460c:	1839      	adds	r1, r7, r0
 800460e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	219c      	movs	r1, #156	; 0x9c
 8004618:	1879      	adds	r1, r7, r1
 800461a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800461c:	0011      	movs	r1, r2
 800461e:	18bb      	adds	r3, r7, r2
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a99      	ldr	r2, [pc, #612]	; (8004888 <HAL_UART_IRQHandler+0x298>)
 8004624:	4013      	ands	r3, r2
 8004626:	2298      	movs	r2, #152	; 0x98
 8004628:	18bc      	adds	r4, r7, r2
 800462a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800462c:	18bb      	adds	r3, r7, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d114      	bne.n	800465e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004634:	187b      	adds	r3, r7, r1
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2220      	movs	r2, #32
 800463a:	4013      	ands	r3, r2
 800463c:	d00f      	beq.n	800465e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800463e:	183b      	adds	r3, r7, r0
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2220      	movs	r2, #32
 8004644:	4013      	ands	r3, r2
 8004646:	d00a      	beq.n	800465e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800464c:	2b00      	cmp	r3, #0
 800464e:	d100      	bne.n	8004652 <HAL_UART_IRQHandler+0x62>
 8004650:	e296      	b.n	8004b80 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	0010      	movs	r0, r2
 800465a:	4798      	blx	r3
      }
      return;
 800465c:	e290      	b.n	8004b80 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800465e:	2398      	movs	r3, #152	; 0x98
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d100      	bne.n	800466a <HAL_UART_IRQHandler+0x7a>
 8004668:	e114      	b.n	8004894 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800466a:	239c      	movs	r3, #156	; 0x9c
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2201      	movs	r2, #1
 8004672:	4013      	ands	r3, r2
 8004674:	d106      	bne.n	8004684 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004676:	23a0      	movs	r3, #160	; 0xa0
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a83      	ldr	r2, [pc, #524]	; (800488c <HAL_UART_IRQHandler+0x29c>)
 800467e:	4013      	ands	r3, r2
 8004680:	d100      	bne.n	8004684 <HAL_UART_IRQHandler+0x94>
 8004682:	e107      	b.n	8004894 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004684:	23a4      	movs	r3, #164	; 0xa4
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	4013      	ands	r3, r2
 800468e:	d012      	beq.n	80046b6 <HAL_UART_IRQHandler+0xc6>
 8004690:	23a0      	movs	r3, #160	; 0xa0
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4013      	ands	r3, r2
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2280      	movs	r2, #128	; 0x80
 80046aa:	589b      	ldr	r3, [r3, r2]
 80046ac:	2201      	movs	r2, #1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2180      	movs	r1, #128	; 0x80
 80046b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b6:	23a4      	movs	r3, #164	; 0xa4
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d011      	beq.n	80046e6 <HAL_UART_IRQHandler+0xf6>
 80046c2:	239c      	movs	r3, #156	; 0x9c
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2201      	movs	r2, #1
 80046ca:	4013      	ands	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2202      	movs	r2, #2
 80046d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	589b      	ldr	r3, [r3, r2]
 80046dc:	2204      	movs	r2, #4
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e6:	23a4      	movs	r3, #164	; 0xa4
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2204      	movs	r2, #4
 80046ee:	4013      	ands	r3, r2
 80046f0:	d011      	beq.n	8004716 <HAL_UART_IRQHandler+0x126>
 80046f2:	239c      	movs	r3, #156	; 0x9c
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	4013      	ands	r3, r2
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2204      	movs	r2, #4
 8004704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	589b      	ldr	r3, [r3, r2]
 800470c:	2202      	movs	r2, #2
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2180      	movs	r1, #128	; 0x80
 8004714:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004716:	23a4      	movs	r3, #164	; 0xa4
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	4013      	ands	r3, r2
 8004720:	d017      	beq.n	8004752 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004722:	23a0      	movs	r3, #160	; 0xa0
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2220      	movs	r2, #32
 800472a:	4013      	ands	r3, r2
 800472c:	d105      	bne.n	800473a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800472e:	239c      	movs	r3, #156	; 0x9c
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2208      	movs	r2, #8
 8004740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2280      	movs	r2, #128	; 0x80
 8004746:	589b      	ldr	r3, [r3, r2]
 8004748:	2208      	movs	r2, #8
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004752:	23a4      	movs	r3, #164	; 0xa4
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4013      	ands	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_UART_IRQHandler+0x198>
 8004760:	23a0      	movs	r3, #160	; 0xa0
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	04db      	lsls	r3, r3, #19
 800476a:	4013      	ands	r3, r2
 800476c:	d00c      	beq.n	8004788 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	0112      	lsls	r2, r2, #4
 8004776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	589b      	ldr	r3, [r3, r2]
 800477e:	2220      	movs	r2, #32
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	589b      	ldr	r3, [r3, r2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d100      	bne.n	8004794 <HAL_UART_IRQHandler+0x1a4>
 8004792:	e1f7      	b.n	8004b84 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004794:	23a4      	movs	r3, #164	; 0xa4
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2220      	movs	r2, #32
 800479c:	4013      	ands	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a0:	23a0      	movs	r3, #160	; 0xa0
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2220      	movs	r2, #32
 80047a8:	4013      	ands	r3, r2
 80047aa:	d008      	beq.n	80047be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	0010      	movs	r0, r2
 80047bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	589b      	ldr	r3, [r3, r2]
 80047c4:	2194      	movs	r1, #148	; 0x94
 80047c6:	187a      	adds	r2, r7, r1
 80047c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d004      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2228      	movs	r2, #40	; 0x28
 80047de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e0:	d047      	beq.n	8004872 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 fcf7 	bl	80051d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2240      	movs	r2, #64	; 0x40
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d137      	bne.n	8004868 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f8:	f3ef 8310 	mrs	r3, PRIMASK
 80047fc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80047fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004800:	2090      	movs	r0, #144	; 0x90
 8004802:	183a      	adds	r2, r7, r0
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	2301      	movs	r3, #1
 8004808:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480c:	f383 8810 	msr	PRIMASK, r3
}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	438a      	bics	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
 8004822:	183b      	adds	r3, r7, r0
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	2b00      	cmp	r3, #0
 8004836:	d012      	beq.n	800485e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <HAL_UART_IRQHandler+0x2a0>)
 800483e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	0018      	movs	r0, r3
 8004846:	f7fe f98f 	bl	8002b68 <HAL_DMA_Abort_IT>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d01a      	beq.n	8004884 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	0018      	movs	r0, r3
 800485a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	e012      	b.n	8004884 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 f9a5 	bl	8004bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004866:	e00d      	b.n	8004884 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f9a0 	bl	8004bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e008      	b.n	8004884 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0018      	movs	r0, r3
 8004876:	f000 f99b 	bl	8004bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	2100      	movs	r1, #0
 8004880:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004882:	e17f      	b.n	8004b84 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	46c0      	nop			; (mov r8, r8)
    return;
 8004886:	e17d      	b.n	8004b84 <HAL_UART_IRQHandler+0x594>
 8004888:	0000080f 	.word	0x0000080f
 800488c:	04000120 	.word	0x04000120
 8004890:	0800529d 	.word	0x0800529d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	2b01      	cmp	r3, #1
 800489a:	d000      	beq.n	800489e <HAL_UART_IRQHandler+0x2ae>
 800489c:	e131      	b.n	8004b02 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800489e:	23a4      	movs	r3, #164	; 0xa4
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2210      	movs	r2, #16
 80048a6:	4013      	ands	r3, r2
 80048a8:	d100      	bne.n	80048ac <HAL_UART_IRQHandler+0x2bc>
 80048aa:	e12a      	b.n	8004b02 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048ac:	23a0      	movs	r3, #160	; 0xa0
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2210      	movs	r2, #16
 80048b4:	4013      	ands	r3, r2
 80048b6:	d100      	bne.n	80048ba <HAL_UART_IRQHandler+0x2ca>
 80048b8:	e123      	b.n	8004b02 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2210      	movs	r2, #16
 80048c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2240      	movs	r2, #64	; 0x40
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d000      	beq.n	80048d2 <HAL_UART_IRQHandler+0x2e2>
 80048d0:	e09b      	b.n	8004a0a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	217e      	movs	r1, #126	; 0x7e
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d100      	bne.n	80048ea <HAL_UART_IRQHandler+0x2fa>
 80048e8:	e14e      	b.n	8004b88 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2258      	movs	r2, #88	; 0x58
 80048ee:	5a9b      	ldrh	r3, [r3, r2]
 80048f0:	187a      	adds	r2, r7, r1
 80048f2:	8812      	ldrh	r2, [r2, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d300      	bcc.n	80048fa <HAL_UART_IRQHandler+0x30a>
 80048f8:	e146      	b.n	8004b88 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	187a      	adds	r2, r7, r1
 80048fe:	215a      	movs	r1, #90	; 0x5a
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b20      	cmp	r3, #32
 800490c:	d06e      	beq.n	80049ec <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490e:	f3ef 8310 	mrs	r3, PRIMASK
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004916:	67bb      	str	r3, [r7, #120]	; 0x78
 8004918:	2301      	movs	r3, #1
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	499a      	ldr	r1, [pc, #616]	; (8004b98 <HAL_UART_IRQHandler+0x5a8>)
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004936:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
 800494a:	2301      	movs	r3, #1
 800494c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	438a      	bics	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004972:	f3ef 8310 	mrs	r3, PRIMASK
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004978:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	673b      	str	r3, [r7, #112]	; 0x70
 800497c:	2301      	movs	r3, #1
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2140      	movs	r1, #64	; 0x40
 8004994:	438a      	bics	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b0:	f3ef 8310 	mrs	r3, PRIMASK
 80049b4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80049b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ba:	2301      	movs	r3, #1
 80049bc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2110      	movs	r1, #16
 80049d2:	438a      	bics	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7fe f886 	bl	8002af8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2258      	movs	r2, #88	; 0x58
 80049f0:	5a9a      	ldrh	r2, [r3, r2]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	215a      	movs	r1, #90	; 0x5a
 80049f6:	5a5b      	ldrh	r3, [r3, r1]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0011      	movs	r1, r2
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 f8dc 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a08:	e0be      	b.n	8004b88 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2258      	movs	r2, #88	; 0x58
 8004a0e:	5a99      	ldrh	r1, [r3, r2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	225a      	movs	r2, #90	; 0x5a
 8004a14:	5a9b      	ldrh	r3, [r3, r2]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	208e      	movs	r0, #142	; 0x8e
 8004a1a:	183b      	adds	r3, r7, r0
 8004a1c:	1a8a      	subs	r2, r1, r2
 8004a1e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	225a      	movs	r2, #90	; 0x5a
 8004a24:	5a9b      	ldrh	r3, [r3, r2]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d100      	bne.n	8004a2e <HAL_UART_IRQHandler+0x43e>
 8004a2c:	e0ae      	b.n	8004b8c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004a2e:	183b      	adds	r3, r7, r0
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d100      	bne.n	8004a38 <HAL_UART_IRQHandler+0x448>
 8004a36:	e0a9      	b.n	8004b8c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a38:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a40:	2488      	movs	r4, #136	; 0x88
 8004a42:	193a      	adds	r2, r7, r4
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	2301      	movs	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f383 8810 	msr	PRIMASK, r3
}
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	494f      	ldr	r1, [pc, #316]	; (8004b9c <HAL_UART_IRQHandler+0x5ac>)
 8004a5e:	400a      	ands	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	193b      	adds	r3, r7, r4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a76:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	2484      	movs	r4, #132	; 0x84
 8004a7a:	193a      	adds	r2, r7, r4
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	438a      	bics	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	193b      	adds	r3, r7, r4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aba:	f3ef 8310 	mrs	r3, PRIMASK
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac2:	2480      	movs	r4, #128	; 0x80
 8004ac4:	193a      	adds	r2, r7, r4
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2110      	movs	r1, #16
 8004ae0:	438a      	bics	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	193b      	adds	r3, r7, r4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af2:	183b      	adds	r3, r7, r0
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0011      	movs	r1, r2
 8004afa:	0018      	movs	r0, r3
 8004afc:	f000 f860 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b00:	e044      	b.n	8004b8c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b02:	23a4      	movs	r3, #164	; 0xa4
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	035b      	lsls	r3, r3, #13
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d010      	beq.n	8004b32 <HAL_UART_IRQHandler+0x542>
 8004b10:	239c      	movs	r3, #156	; 0x9c
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	03db      	lsls	r3, r3, #15
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2280      	movs	r2, #128	; 0x80
 8004b24:	0352      	lsls	r2, r2, #13
 8004b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 fbf8 	bl	8005320 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b30:	e02f      	b.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b32:	23a4      	movs	r3, #164	; 0xa4
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2280      	movs	r2, #128	; 0x80
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d00f      	beq.n	8004b5e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b3e:	23a0      	movs	r3, #160	; 0xa0
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	4013      	ands	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01e      	beq.n	8004b90 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	0010      	movs	r0, r2
 8004b5a:	4798      	blx	r3
    }
    return;
 8004b5c:	e018      	b.n	8004b90 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b5e:	23a4      	movs	r3, #164	; 0xa4
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	4013      	ands	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
 8004b6a:	23a0      	movs	r3, #160	; 0xa0
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2240      	movs	r2, #64	; 0x40
 8004b72:	4013      	ands	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 fba6 	bl	80052ca <UART_EndTransmit_IT>
    return;
 8004b7e:	e008      	b.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	e006      	b.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	e004      	b.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	e002      	b.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	e000      	b.n	8004b92 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004b90:	46c0      	nop			; (mov r8, r8)
  }

}
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b02b      	add	sp, #172	; 0xac
 8004b96:	bd90      	pop	{r4, r7, pc}
 8004b98:	fffffeff 	.word	0xfffffeff
 8004b9c:	fffffedf 	.word	0xfffffedf

08004ba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	000a      	movs	r2, r1
 8004bca:	1cbb      	adds	r3, r7, #2
 8004bcc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004be0:	231e      	movs	r3, #30
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a8d      	ldr	r2, [pc, #564]	; (8004e3c <UART_SetConfig+0x264>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a88      	ldr	r2, [pc, #544]	; (8004e40 <UART_SetConfig+0x268>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	0019      	movs	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a7f      	ldr	r2, [pc, #508]	; (8004e44 <UART_SetConfig+0x26c>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a7b      	ldr	r2, [pc, #492]	; (8004e48 <UART_SetConfig+0x270>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d127      	bne.n	8004cae <UART_SetConfig+0xd6>
 8004c5e:	4b7b      	ldr	r3, [pc, #492]	; (8004e4c <UART_SetConfig+0x274>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	2203      	movs	r2, #3
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d00d      	beq.n	8004c86 <UART_SetConfig+0xae>
 8004c6a:	d81b      	bhi.n	8004ca4 <UART_SetConfig+0xcc>
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d014      	beq.n	8004c9a <UART_SetConfig+0xc2>
 8004c70:	d818      	bhi.n	8004ca4 <UART_SetConfig+0xcc>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0xa4>
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d00a      	beq.n	8004c90 <UART_SetConfig+0xb8>
 8004c7a:	e013      	b.n	8004ca4 <UART_SetConfig+0xcc>
 8004c7c:	231f      	movs	r3, #31
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e021      	b.n	8004cca <UART_SetConfig+0xf2>
 8004c86:	231f      	movs	r3, #31
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e01c      	b.n	8004cca <UART_SetConfig+0xf2>
 8004c90:	231f      	movs	r3, #31
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	2204      	movs	r2, #4
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e017      	b.n	8004cca <UART_SetConfig+0xf2>
 8004c9a:	231f      	movs	r3, #31
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e012      	b.n	8004cca <UART_SetConfig+0xf2>
 8004ca4:	231f      	movs	r3, #31
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2210      	movs	r2, #16
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e00d      	b.n	8004cca <UART_SetConfig+0xf2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a67      	ldr	r2, [pc, #412]	; (8004e50 <UART_SetConfig+0x278>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d104      	bne.n	8004cc2 <UART_SetConfig+0xea>
 8004cb8:	231f      	movs	r3, #31
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e003      	b.n	8004cca <UART_SetConfig+0xf2>
 8004cc2:	231f      	movs	r3, #31
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d15d      	bne.n	8004d92 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004cd6:	231f      	movs	r3, #31
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d015      	beq.n	8004d0c <UART_SetConfig+0x134>
 8004ce0:	dc18      	bgt.n	8004d14 <UART_SetConfig+0x13c>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d00d      	beq.n	8004d02 <UART_SetConfig+0x12a>
 8004ce6:	dc15      	bgt.n	8004d14 <UART_SetConfig+0x13c>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <UART_SetConfig+0x11a>
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d005      	beq.n	8004cfc <UART_SetConfig+0x124>
 8004cf0:	e010      	b.n	8004d14 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf2:	f7ff fa8b 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	61bb      	str	r3, [r7, #24]
        break;
 8004cfa:	e012      	b.n	8004d22 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfc:	4b55      	ldr	r3, [pc, #340]	; (8004e54 <UART_SetConfig+0x27c>)
 8004cfe:	61bb      	str	r3, [r7, #24]
        break;
 8004d00:	e00f      	b.n	8004d22 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d02:	f7ff fa15 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8004d06:	0003      	movs	r3, r0
 8004d08:	61bb      	str	r3, [r7, #24]
        break;
 8004d0a:	e00a      	b.n	8004d22 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	61bb      	str	r3, [r7, #24]
        break;
 8004d12:	e006      	b.n	8004d22 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d18:	231e      	movs	r3, #30
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
        break;
 8004d20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d100      	bne.n	8004d2a <UART_SetConfig+0x152>
 8004d28:	e07b      	b.n	8004e22 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	005a      	lsls	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	18d2      	adds	r2, r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	0010      	movs	r0, r2
 8004d3e:	f7fb f9ed 	bl	800011c <__udivsi3>
 8004d42:	0003      	movs	r3, r0
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	d91c      	bls.n	8004d88 <UART_SetConfig+0x1b0>
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d217      	bcs.n	8004d88 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	200e      	movs	r0, #14
 8004d5e:	183b      	adds	r3, r7, r0
 8004d60:	210f      	movs	r1, #15
 8004d62:	438a      	bics	r2, r1
 8004d64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b299      	uxth	r1, r3
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	183a      	adds	r2, r7, r0
 8004d76:	8812      	ldrh	r2, [r2, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	183a      	adds	r2, r7, r0
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e04c      	b.n	8004e22 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004d88:	231e      	movs	r3, #30
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e047      	b.n	8004e22 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d92:	231f      	movs	r3, #31
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d015      	beq.n	8004dc8 <UART_SetConfig+0x1f0>
 8004d9c:	dc18      	bgt.n	8004dd0 <UART_SetConfig+0x1f8>
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d00d      	beq.n	8004dbe <UART_SetConfig+0x1e6>
 8004da2:	dc15      	bgt.n	8004dd0 <UART_SetConfig+0x1f8>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <UART_SetConfig+0x1d6>
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d005      	beq.n	8004db8 <UART_SetConfig+0x1e0>
 8004dac:	e010      	b.n	8004dd0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dae:	f7ff fa2d 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61bb      	str	r3, [r7, #24]
        break;
 8004db6:	e012      	b.n	8004dde <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <UART_SetConfig+0x27c>)
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e00f      	b.n	8004dde <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7ff f9b7 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	61bb      	str	r3, [r7, #24]
        break;
 8004dc6:	e00a      	b.n	8004dde <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	61bb      	str	r3, [r7, #24]
        break;
 8004dce:	e006      	b.n	8004dde <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dd4:	231e      	movs	r3, #30
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
        break;
 8004ddc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01e      	beq.n	8004e22 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	085a      	lsrs	r2, r3, #1
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	18d2      	adds	r2, r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0019      	movs	r1, r3
 8004df4:	0010      	movs	r0, r2
 8004df6:	f7fb f991 	bl	800011c <__udivsi3>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d909      	bls.n	8004e1a <UART_SetConfig+0x242>
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	025b      	lsls	r3, r3, #9
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d204      	bcs.n	8004e1a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e003      	b.n	8004e22 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1a:	231e      	movs	r3, #30
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e2e:	231e      	movs	r3, #30
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	781b      	ldrb	r3, [r3, #0]
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b008      	add	sp, #32
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	ffff69f3 	.word	0xffff69f3
 8004e40:	ffffcfff 	.word	0xffffcfff
 8004e44:	fffff4ff 	.word	0xfffff4ff
 8004e48:	40013800 	.word	0x40013800
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40004400 	.word	0x40004400
 8004e54:	007a1200 	.word	0x007a1200

08004e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a4a      	ldr	r2, [pc, #296]	; (8004f9c <UART_AdvFeatureConfig+0x144>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2202      	movs	r2, #2
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a43      	ldr	r2, [pc, #268]	; (8004fa0 <UART_AdvFeatureConfig+0x148>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4a3b      	ldr	r2, [pc, #236]	; (8004fa4 <UART_AdvFeatureConfig+0x14c>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2208      	movs	r2, #8
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a34      	ldr	r2, [pc, #208]	; (8004fa8 <UART_AdvFeatureConfig+0x150>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2210      	movs	r2, #16
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <UART_AdvFeatureConfig+0x154>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	0019      	movs	r1, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	2220      	movs	r2, #32
 8004f10:	4013      	ands	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <UART_AdvFeatureConfig+0x158>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	4013      	ands	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <UART_AdvFeatureConfig+0x15c>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	0019      	movs	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	035b      	lsls	r3, r3, #13
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10b      	bne.n	8004f72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <UART_AdvFeatureConfig+0x160>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	0019      	movs	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <UART_AdvFeatureConfig+0x164>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  }
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b002      	add	sp, #8
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	fffdffff 	.word	0xfffdffff
 8004fa0:	fffeffff 	.word	0xfffeffff
 8004fa4:	fffbffff 	.word	0xfffbffff
 8004fa8:	ffff7fff 	.word	0xffff7fff
 8004fac:	ffffefff 	.word	0xffffefff
 8004fb0:	ffffdfff 	.word	0xffffdfff
 8004fb4:	ffefffff 	.word	0xffefffff
 8004fb8:	ff9fffff 	.word	0xff9fffff
 8004fbc:	fff7ffff 	.word	0xfff7ffff

08004fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2280      	movs	r2, #128	; 0x80
 8004fcc:	2100      	movs	r1, #0
 8004fce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd0:	f7fd fc62 	bl	8002898 <HAL_GetTick>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d10c      	bne.n	8005000 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	0391      	lsls	r1, r2, #14
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <UART_CheckIdleState+0x8c>)
 8004ff0:	9200      	str	r2, [sp, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f000 f82c 	bl	8005050 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	1e03      	subs	r3, r0, #0
 8004ffa:	d001      	beq.n	8005000 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e021      	b.n	8005044 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2204      	movs	r2, #4
 8005008:	4013      	ands	r3, r2
 800500a:	2b04      	cmp	r3, #4
 800500c:	d10c      	bne.n	8005028 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	03d1      	lsls	r1, r2, #15
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4a0d      	ldr	r2, [pc, #52]	; (800504c <UART_CheckIdleState+0x8c>)
 8005018:	9200      	str	r2, [sp, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	f000 f818 	bl	8005050 <UART_WaitOnFlagUntilTimeout>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d001      	beq.n	8005028 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e00d      	b.n	8005044 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2274      	movs	r2, #116	; 0x74
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b004      	add	sp, #16
 800504a:	bd80      	pop	{r7, pc}
 800504c:	01ffffff 	.word	0x01ffffff

08005050 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b094      	sub	sp, #80	; 0x50
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	1dfb      	adds	r3, r7, #7
 800505e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005060:	e0a3      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005064:	3301      	adds	r3, #1
 8005066:	d100      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005068:	e09f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fd fc15 	bl	8002898 <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <UART_WaitOnFlagUntilTimeout+0x30>
 800507a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800507c:	2b00      	cmp	r3, #0
 800507e:	d13d      	bne.n	80050fc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
 800508a:	2301      	movs	r3, #1
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	494c      	ldr	r1, [pc, #304]	; (80051d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80050a2:	400a      	ands	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b2:	f3ef 8310 	mrs	r3, PRIMASK
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
 80050bc:	2301      	movs	r3, #1
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	f383 8810 	msr	PRIMASK, r3
}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2101      	movs	r1, #1
 80050d4:	438a      	bics	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2274      	movs	r2, #116	; 0x74
 80050f4:	2100      	movs	r1, #0
 80050f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e067      	b.n	80051cc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2204      	movs	r2, #4
 8005104:	4013      	ands	r3, r2
 8005106:	d050      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	401a      	ands	r2, r3
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	429a      	cmp	r2, r3
 800511a:	d146      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	613b      	str	r3, [r7, #16]
  return(result);
 800512c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005130:	2301      	movs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4923      	ldr	r1, [pc, #140]	; (80051d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005148:	400a      	ands	r2, r1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005158:	f3ef 8310 	mrs	r3, PRIMASK
 800515c:	61fb      	str	r3, [r7, #28]
  return(result);
 800515e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	64bb      	str	r3, [r7, #72]	; 0x48
 8005162:	2301      	movs	r3, #1
 8005164:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f383 8810 	msr	PRIMASK, r3
}
 800516c:	46c0      	nop			; (mov r8, r8)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2101      	movs	r1, #1
 800517a:	438a      	bics	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	f383 8810 	msr	PRIMASK, r3
}
 8005188:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2280      	movs	r2, #128	; 0x80
 800519a:	2120      	movs	r1, #32
 800519c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2274      	movs	r2, #116	; 0x74
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e010      	b.n	80051cc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	425a      	negs	r2, r3
 80051ba:	4153      	adcs	r3, r2
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	001a      	movs	r2, r3
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d100      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x17a>
 80051c8:	e74b      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b014      	add	sp, #80	; 0x50
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	fffffe5f 	.word	0xfffffe5f

080051d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08e      	sub	sp, #56	; 0x38
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e0:	f3ef 8310 	mrs	r3, PRIMASK
 80051e4:	617b      	str	r3, [r7, #20]
  return(result);
 80051e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ea:	2301      	movs	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4925      	ldr	r1, [pc, #148]	; (8005298 <UART_EndRxTransfer+0xc0>)
 8005202:	400a      	ands	r2, r1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005212:	f3ef 8310 	mrs	r3, PRIMASK
 8005216:	623b      	str	r3, [r7, #32]
  return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	633b      	str	r3, [r7, #48]	; 0x30
 800521c:	2301      	movs	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	f383 8810 	msr	PRIMASK, r3
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2101      	movs	r1, #1
 8005234:	438a      	bics	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f383 8810 	msr	PRIMASK, r3
}
 8005242:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005248:	2b01      	cmp	r3, #1
 800524a:	d118      	bne.n	800527e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524c:	f3ef 8310 	mrs	r3, PRIMASK
 8005250:	60bb      	str	r3, [r7, #8]
  return(result);
 8005252:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005256:	2301      	movs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f383 8810 	msr	PRIMASK, r3
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2110      	movs	r1, #16
 800526e:	438a      	bics	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f383 8810 	msr	PRIMASK, r3
}
 800527c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b00e      	add	sp, #56	; 0x38
 8005296:	bd80      	pop	{r7, pc}
 8005298:	fffffedf 	.word	0xfffffedf

0800529c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	225a      	movs	r2, #90	; 0x5a
 80052ae:	2100      	movs	r1, #0
 80052b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2252      	movs	r2, #82	; 0x52
 80052b6:	2100      	movs	r1, #0
 80052b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0018      	movs	r0, r3
 80052be:	f7ff fc77 	bl	8004bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b004      	add	sp, #16
 80052c8:	bd80      	pop	{r7, pc}

080052ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8310 	mrs	r3, PRIMASK
 80052d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	2301      	movs	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f383 8810 	msr	PRIMASK, r3
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2140      	movs	r1, #64	; 0x40
 80052f4:	438a      	bics	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	0018      	movs	r0, r3
 8005314:	f7ff fc44 	bl	8004ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b006      	add	sp, #24
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}

08005330 <__errno>:
 8005330:	4b01      	ldr	r3, [pc, #4]	; (8005338 <__errno+0x8>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4770      	bx	lr
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	2000000c 	.word	0x2000000c

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	2600      	movs	r6, #0
 8005340:	4d0c      	ldr	r5, [pc, #48]	; (8005374 <__libc_init_array+0x38>)
 8005342:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	2600      	movs	r6, #0
 800534e:	f001 fb69 	bl	8006a24 <_init>
 8005352:	4d0a      	ldr	r5, [pc, #40]	; (800537c <__libc_init_array+0x40>)
 8005354:	4c0a      	ldr	r4, [pc, #40]	; (8005380 <__libc_init_array+0x44>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	00b3      	lsls	r3, r6, #2
 8005362:	58eb      	ldr	r3, [r5, r3]
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	00b3      	lsls	r3, r6, #2
 800536c:	58eb      	ldr	r3, [r5, r3]
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	08006bc0 	.word	0x08006bc0
 8005378:	08006bc0 	.word	0x08006bc0
 800537c:	08006bc0 	.word	0x08006bc0
 8005380:	08006bc4 	.word	0x08006bc4

08005384 <memset>:
 8005384:	0003      	movs	r3, r0
 8005386:	1882      	adds	r2, r0, r2
 8005388:	4293      	cmp	r3, r2
 800538a:	d100      	bne.n	800538e <memset+0xa>
 800538c:	4770      	bx	lr
 800538e:	7019      	strb	r1, [r3, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	e7f9      	b.n	8005388 <memset+0x4>

08005394 <siprintf>:
 8005394:	b40e      	push	{r1, r2, r3}
 8005396:	b500      	push	{lr}
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <siprintf+0x34>)
 800539a:	b09c      	sub	sp, #112	; 0x70
 800539c:	ab1d      	add	r3, sp, #116	; 0x74
 800539e:	9002      	str	r0, [sp, #8]
 80053a0:	9006      	str	r0, [sp, #24]
 80053a2:	9107      	str	r1, [sp, #28]
 80053a4:	9104      	str	r1, [sp, #16]
 80053a6:	4809      	ldr	r0, [pc, #36]	; (80053cc <siprintf+0x38>)
 80053a8:	4909      	ldr	r1, [pc, #36]	; (80053d0 <siprintf+0x3c>)
 80053aa:	cb04      	ldmia	r3!, {r2}
 80053ac:	9105      	str	r1, [sp, #20]
 80053ae:	6800      	ldr	r0, [r0, #0]
 80053b0:	a902      	add	r1, sp, #8
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	f000 f870 	bl	8005498 <_svfiprintf_r>
 80053b8:	2300      	movs	r3, #0
 80053ba:	9a02      	ldr	r2, [sp, #8]
 80053bc:	7013      	strb	r3, [r2, #0]
 80053be:	b01c      	add	sp, #112	; 0x70
 80053c0:	bc08      	pop	{r3}
 80053c2:	b003      	add	sp, #12
 80053c4:	4718      	bx	r3
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	7fffffff 	.word	0x7fffffff
 80053cc:	2000000c 	.word	0x2000000c
 80053d0:	ffff0208 	.word	0xffff0208

080053d4 <__ssputs_r>:
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	688e      	ldr	r6, [r1, #8]
 80053d8:	b085      	sub	sp, #20
 80053da:	0007      	movs	r7, r0
 80053dc:	000c      	movs	r4, r1
 80053de:	9203      	str	r2, [sp, #12]
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	429e      	cmp	r6, r3
 80053e4:	d83c      	bhi.n	8005460 <__ssputs_r+0x8c>
 80053e6:	2390      	movs	r3, #144	; 0x90
 80053e8:	898a      	ldrh	r2, [r1, #12]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	421a      	tst	r2, r3
 80053ee:	d034      	beq.n	800545a <__ssputs_r+0x86>
 80053f0:	6909      	ldr	r1, [r1, #16]
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	6960      	ldr	r0, [r4, #20]
 80053f6:	1a5b      	subs	r3, r3, r1
 80053f8:	9302      	str	r3, [sp, #8]
 80053fa:	2303      	movs	r3, #3
 80053fc:	4343      	muls	r3, r0
 80053fe:	0fdd      	lsrs	r5, r3, #31
 8005400:	18ed      	adds	r5, r5, r3
 8005402:	9b01      	ldr	r3, [sp, #4]
 8005404:	9802      	ldr	r0, [sp, #8]
 8005406:	3301      	adds	r3, #1
 8005408:	181b      	adds	r3, r3, r0
 800540a:	106d      	asrs	r5, r5, #1
 800540c:	42ab      	cmp	r3, r5
 800540e:	d900      	bls.n	8005412 <__ssputs_r+0x3e>
 8005410:	001d      	movs	r5, r3
 8005412:	0553      	lsls	r3, r2, #21
 8005414:	d532      	bpl.n	800547c <__ssputs_r+0xa8>
 8005416:	0029      	movs	r1, r5
 8005418:	0038      	movs	r0, r7
 800541a:	f000 fb53 	bl	8005ac4 <_malloc_r>
 800541e:	1e06      	subs	r6, r0, #0
 8005420:	d109      	bne.n	8005436 <__ssputs_r+0x62>
 8005422:	230c      	movs	r3, #12
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	2340      	movs	r3, #64	; 0x40
 8005428:	2001      	movs	r0, #1
 800542a:	89a2      	ldrh	r2, [r4, #12]
 800542c:	4240      	negs	r0, r0
 800542e:	4313      	orrs	r3, r2
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	b005      	add	sp, #20
 8005434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005436:	9a02      	ldr	r2, [sp, #8]
 8005438:	6921      	ldr	r1, [r4, #16]
 800543a:	f000 faba 	bl	80059b2 <memcpy>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <__ssputs_r+0xc0>)
 8005442:	401a      	ands	r2, r3
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	4313      	orrs	r3, r2
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	6126      	str	r6, [r4, #16]
 800544e:	18f6      	adds	r6, r6, r3
 8005450:	6026      	str	r6, [r4, #0]
 8005452:	6165      	str	r5, [r4, #20]
 8005454:	9e01      	ldr	r6, [sp, #4]
 8005456:	1aed      	subs	r5, r5, r3
 8005458:	60a5      	str	r5, [r4, #8]
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	429e      	cmp	r6, r3
 800545e:	d900      	bls.n	8005462 <__ssputs_r+0x8e>
 8005460:	9e01      	ldr	r6, [sp, #4]
 8005462:	0032      	movs	r2, r6
 8005464:	9903      	ldr	r1, [sp, #12]
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	f000 faac 	bl	80059c4 <memmove>
 800546c:	68a3      	ldr	r3, [r4, #8]
 800546e:	2000      	movs	r0, #0
 8005470:	1b9b      	subs	r3, r3, r6
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	199e      	adds	r6, r3, r6
 8005478:	6026      	str	r6, [r4, #0]
 800547a:	e7da      	b.n	8005432 <__ssputs_r+0x5e>
 800547c:	002a      	movs	r2, r5
 800547e:	0038      	movs	r0, r7
 8005480:	f000 fb96 	bl	8005bb0 <_realloc_r>
 8005484:	1e06      	subs	r6, r0, #0
 8005486:	d1e0      	bne.n	800544a <__ssputs_r+0x76>
 8005488:	0038      	movs	r0, r7
 800548a:	6921      	ldr	r1, [r4, #16]
 800548c:	f000 faae 	bl	80059ec <_free_r>
 8005490:	e7c7      	b.n	8005422 <__ssputs_r+0x4e>
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	fffffb7f 	.word	0xfffffb7f

08005498 <_svfiprintf_r>:
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	b0a1      	sub	sp, #132	; 0x84
 800549c:	9003      	str	r0, [sp, #12]
 800549e:	001d      	movs	r5, r3
 80054a0:	898b      	ldrh	r3, [r1, #12]
 80054a2:	000f      	movs	r7, r1
 80054a4:	0016      	movs	r6, r2
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	d511      	bpl.n	80054ce <_svfiprintf_r+0x36>
 80054aa:	690b      	ldr	r3, [r1, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10e      	bne.n	80054ce <_svfiprintf_r+0x36>
 80054b0:	2140      	movs	r1, #64	; 0x40
 80054b2:	f000 fb07 	bl	8005ac4 <_malloc_r>
 80054b6:	6038      	str	r0, [r7, #0]
 80054b8:	6138      	str	r0, [r7, #16]
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d105      	bne.n	80054ca <_svfiprintf_r+0x32>
 80054be:	230c      	movs	r3, #12
 80054c0:	9a03      	ldr	r2, [sp, #12]
 80054c2:	3801      	subs	r0, #1
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	b021      	add	sp, #132	; 0x84
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	2300      	movs	r3, #0
 80054d0:	ac08      	add	r4, sp, #32
 80054d2:	6163      	str	r3, [r4, #20]
 80054d4:	3320      	adds	r3, #32
 80054d6:	7663      	strb	r3, [r4, #25]
 80054d8:	3310      	adds	r3, #16
 80054da:	76a3      	strb	r3, [r4, #26]
 80054dc:	9507      	str	r5, [sp, #28]
 80054de:	0035      	movs	r5, r6
 80054e0:	782b      	ldrb	r3, [r5, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <_svfiprintf_r+0x52>
 80054e6:	2b25      	cmp	r3, #37	; 0x25
 80054e8:	d147      	bne.n	800557a <_svfiprintf_r+0xe2>
 80054ea:	1bab      	subs	r3, r5, r6
 80054ec:	9305      	str	r3, [sp, #20]
 80054ee:	42b5      	cmp	r5, r6
 80054f0:	d00c      	beq.n	800550c <_svfiprintf_r+0x74>
 80054f2:	0032      	movs	r2, r6
 80054f4:	0039      	movs	r1, r7
 80054f6:	9803      	ldr	r0, [sp, #12]
 80054f8:	f7ff ff6c 	bl	80053d4 <__ssputs_r>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d100      	bne.n	8005502 <_svfiprintf_r+0x6a>
 8005500:	e0ae      	b.n	8005660 <_svfiprintf_r+0x1c8>
 8005502:	6962      	ldr	r2, [r4, #20]
 8005504:	9b05      	ldr	r3, [sp, #20]
 8005506:	4694      	mov	ip, r2
 8005508:	4463      	add	r3, ip
 800550a:	6163      	str	r3, [r4, #20]
 800550c:	782b      	ldrb	r3, [r5, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d100      	bne.n	8005514 <_svfiprintf_r+0x7c>
 8005512:	e0a5      	b.n	8005660 <_svfiprintf_r+0x1c8>
 8005514:	2201      	movs	r2, #1
 8005516:	2300      	movs	r3, #0
 8005518:	4252      	negs	r2, r2
 800551a:	6062      	str	r2, [r4, #4]
 800551c:	a904      	add	r1, sp, #16
 800551e:	3254      	adds	r2, #84	; 0x54
 8005520:	1852      	adds	r2, r2, r1
 8005522:	1c6e      	adds	r6, r5, #1
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	60e3      	str	r3, [r4, #12]
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	7013      	strb	r3, [r2, #0]
 800552c:	65a3      	str	r3, [r4, #88]	; 0x58
 800552e:	2205      	movs	r2, #5
 8005530:	7831      	ldrb	r1, [r6, #0]
 8005532:	4854      	ldr	r0, [pc, #336]	; (8005684 <_svfiprintf_r+0x1ec>)
 8005534:	f000 fa32 	bl	800599c <memchr>
 8005538:	1c75      	adds	r5, r6, #1
 800553a:	2800      	cmp	r0, #0
 800553c:	d11f      	bne.n	800557e <_svfiprintf_r+0xe6>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	06d3      	lsls	r3, r2, #27
 8005542:	d504      	bpl.n	800554e <_svfiprintf_r+0xb6>
 8005544:	2353      	movs	r3, #83	; 0x53
 8005546:	a904      	add	r1, sp, #16
 8005548:	185b      	adds	r3, r3, r1
 800554a:	2120      	movs	r1, #32
 800554c:	7019      	strb	r1, [r3, #0]
 800554e:	0713      	lsls	r3, r2, #28
 8005550:	d504      	bpl.n	800555c <_svfiprintf_r+0xc4>
 8005552:	2353      	movs	r3, #83	; 0x53
 8005554:	a904      	add	r1, sp, #16
 8005556:	185b      	adds	r3, r3, r1
 8005558:	212b      	movs	r1, #43	; 0x2b
 800555a:	7019      	strb	r1, [r3, #0]
 800555c:	7833      	ldrb	r3, [r6, #0]
 800555e:	2b2a      	cmp	r3, #42	; 0x2a
 8005560:	d016      	beq.n	8005590 <_svfiprintf_r+0xf8>
 8005562:	0035      	movs	r5, r6
 8005564:	2100      	movs	r1, #0
 8005566:	200a      	movs	r0, #10
 8005568:	68e3      	ldr	r3, [r4, #12]
 800556a:	782a      	ldrb	r2, [r5, #0]
 800556c:	1c6e      	adds	r6, r5, #1
 800556e:	3a30      	subs	r2, #48	; 0x30
 8005570:	2a09      	cmp	r2, #9
 8005572:	d94e      	bls.n	8005612 <_svfiprintf_r+0x17a>
 8005574:	2900      	cmp	r1, #0
 8005576:	d111      	bne.n	800559c <_svfiprintf_r+0x104>
 8005578:	e017      	b.n	80055aa <_svfiprintf_r+0x112>
 800557a:	3501      	adds	r5, #1
 800557c:	e7b0      	b.n	80054e0 <_svfiprintf_r+0x48>
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <_svfiprintf_r+0x1ec>)
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	1ac0      	subs	r0, r0, r3
 8005584:	2301      	movs	r3, #1
 8005586:	4083      	lsls	r3, r0
 8005588:	4313      	orrs	r3, r2
 800558a:	002e      	movs	r6, r5
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	e7ce      	b.n	800552e <_svfiprintf_r+0x96>
 8005590:	9b07      	ldr	r3, [sp, #28]
 8005592:	1d19      	adds	r1, r3, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	9107      	str	r1, [sp, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	db01      	blt.n	80055a0 <_svfiprintf_r+0x108>
 800559c:	930b      	str	r3, [sp, #44]	; 0x2c
 800559e:	e004      	b.n	80055aa <_svfiprintf_r+0x112>
 80055a0:	425b      	negs	r3, r3
 80055a2:	60e3      	str	r3, [r4, #12]
 80055a4:	2302      	movs	r3, #2
 80055a6:	4313      	orrs	r3, r2
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	782b      	ldrb	r3, [r5, #0]
 80055ac:	2b2e      	cmp	r3, #46	; 0x2e
 80055ae:	d10a      	bne.n	80055c6 <_svfiprintf_r+0x12e>
 80055b0:	786b      	ldrb	r3, [r5, #1]
 80055b2:	2b2a      	cmp	r3, #42	; 0x2a
 80055b4:	d135      	bne.n	8005622 <_svfiprintf_r+0x18a>
 80055b6:	9b07      	ldr	r3, [sp, #28]
 80055b8:	3502      	adds	r5, #2
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9207      	str	r2, [sp, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	db2b      	blt.n	800561c <_svfiprintf_r+0x184>
 80055c4:	9309      	str	r3, [sp, #36]	; 0x24
 80055c6:	4e30      	ldr	r6, [pc, #192]	; (8005688 <_svfiprintf_r+0x1f0>)
 80055c8:	2203      	movs	r2, #3
 80055ca:	0030      	movs	r0, r6
 80055cc:	7829      	ldrb	r1, [r5, #0]
 80055ce:	f000 f9e5 	bl	800599c <memchr>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d006      	beq.n	80055e4 <_svfiprintf_r+0x14c>
 80055d6:	2340      	movs	r3, #64	; 0x40
 80055d8:	1b80      	subs	r0, r0, r6
 80055da:	4083      	lsls	r3, r0
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	3501      	adds	r5, #1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	7829      	ldrb	r1, [r5, #0]
 80055e6:	2206      	movs	r2, #6
 80055e8:	4828      	ldr	r0, [pc, #160]	; (800568c <_svfiprintf_r+0x1f4>)
 80055ea:	1c6e      	adds	r6, r5, #1
 80055ec:	7621      	strb	r1, [r4, #24]
 80055ee:	f000 f9d5 	bl	800599c <memchr>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d03c      	beq.n	8005670 <_svfiprintf_r+0x1d8>
 80055f6:	4b26      	ldr	r3, [pc, #152]	; (8005690 <_svfiprintf_r+0x1f8>)
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d125      	bne.n	8005648 <_svfiprintf_r+0x1b0>
 80055fc:	2207      	movs	r2, #7
 80055fe:	9b07      	ldr	r3, [sp, #28]
 8005600:	3307      	adds	r3, #7
 8005602:	4393      	bics	r3, r2
 8005604:	3308      	adds	r3, #8
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	6963      	ldr	r3, [r4, #20]
 800560a:	9a04      	ldr	r2, [sp, #16]
 800560c:	189b      	adds	r3, r3, r2
 800560e:	6163      	str	r3, [r4, #20]
 8005610:	e765      	b.n	80054de <_svfiprintf_r+0x46>
 8005612:	4343      	muls	r3, r0
 8005614:	0035      	movs	r5, r6
 8005616:	2101      	movs	r1, #1
 8005618:	189b      	adds	r3, r3, r2
 800561a:	e7a6      	b.n	800556a <_svfiprintf_r+0xd2>
 800561c:	2301      	movs	r3, #1
 800561e:	425b      	negs	r3, r3
 8005620:	e7d0      	b.n	80055c4 <_svfiprintf_r+0x12c>
 8005622:	2300      	movs	r3, #0
 8005624:	200a      	movs	r0, #10
 8005626:	001a      	movs	r2, r3
 8005628:	3501      	adds	r5, #1
 800562a:	6063      	str	r3, [r4, #4]
 800562c:	7829      	ldrb	r1, [r5, #0]
 800562e:	1c6e      	adds	r6, r5, #1
 8005630:	3930      	subs	r1, #48	; 0x30
 8005632:	2909      	cmp	r1, #9
 8005634:	d903      	bls.n	800563e <_svfiprintf_r+0x1a6>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0c5      	beq.n	80055c6 <_svfiprintf_r+0x12e>
 800563a:	9209      	str	r2, [sp, #36]	; 0x24
 800563c:	e7c3      	b.n	80055c6 <_svfiprintf_r+0x12e>
 800563e:	4342      	muls	r2, r0
 8005640:	0035      	movs	r5, r6
 8005642:	2301      	movs	r3, #1
 8005644:	1852      	adds	r2, r2, r1
 8005646:	e7f1      	b.n	800562c <_svfiprintf_r+0x194>
 8005648:	ab07      	add	r3, sp, #28
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	003a      	movs	r2, r7
 800564e:	0021      	movs	r1, r4
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <_svfiprintf_r+0x1fc>)
 8005652:	9803      	ldr	r0, [sp, #12]
 8005654:	e000      	b.n	8005658 <_svfiprintf_r+0x1c0>
 8005656:	bf00      	nop
 8005658:	9004      	str	r0, [sp, #16]
 800565a:	9b04      	ldr	r3, [sp, #16]
 800565c:	3301      	adds	r3, #1
 800565e:	d1d3      	bne.n	8005608 <_svfiprintf_r+0x170>
 8005660:	89bb      	ldrh	r3, [r7, #12]
 8005662:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005664:	065b      	lsls	r3, r3, #25
 8005666:	d400      	bmi.n	800566a <_svfiprintf_r+0x1d2>
 8005668:	e72d      	b.n	80054c6 <_svfiprintf_r+0x2e>
 800566a:	2001      	movs	r0, #1
 800566c:	4240      	negs	r0, r0
 800566e:	e72a      	b.n	80054c6 <_svfiprintf_r+0x2e>
 8005670:	ab07      	add	r3, sp, #28
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	003a      	movs	r2, r7
 8005676:	0021      	movs	r1, r4
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <_svfiprintf_r+0x1fc>)
 800567a:	9803      	ldr	r0, [sp, #12]
 800567c:	f000 f87c 	bl	8005778 <_printf_i>
 8005680:	e7ea      	b.n	8005658 <_svfiprintf_r+0x1c0>
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	08006b5c 	.word	0x08006b5c
 8005688:	08006b62 	.word	0x08006b62
 800568c:	08006b66 	.word	0x08006b66
 8005690:	00000000 	.word	0x00000000
 8005694:	080053d5 	.word	0x080053d5

08005698 <_printf_common>:
 8005698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800569a:	0015      	movs	r5, r2
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	688a      	ldr	r2, [r1, #8]
 80056a0:	690b      	ldr	r3, [r1, #16]
 80056a2:	000c      	movs	r4, r1
 80056a4:	9000      	str	r0, [sp, #0]
 80056a6:	4293      	cmp	r3, r2
 80056a8:	da00      	bge.n	80056ac <_printf_common+0x14>
 80056aa:	0013      	movs	r3, r2
 80056ac:	0022      	movs	r2, r4
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	3243      	adds	r2, #67	; 0x43
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d001      	beq.n	80056bc <_printf_common+0x24>
 80056b8:	3301      	adds	r3, #1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	069b      	lsls	r3, r3, #26
 80056c0:	d502      	bpl.n	80056c8 <_printf_common+0x30>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	3302      	adds	r3, #2
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	2306      	movs	r3, #6
 80056cc:	0017      	movs	r7, r2
 80056ce:	401f      	ands	r7, r3
 80056d0:	421a      	tst	r2, r3
 80056d2:	d027      	beq.n	8005724 <_printf_common+0x8c>
 80056d4:	0023      	movs	r3, r4
 80056d6:	3343      	adds	r3, #67	; 0x43
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	4193      	sbcs	r3, r2
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	0692      	lsls	r2, r2, #26
 80056e2:	d430      	bmi.n	8005746 <_printf_common+0xae>
 80056e4:	0022      	movs	r2, r4
 80056e6:	9901      	ldr	r1, [sp, #4]
 80056e8:	9800      	ldr	r0, [sp, #0]
 80056ea:	9e08      	ldr	r6, [sp, #32]
 80056ec:	3243      	adds	r2, #67	; 0x43
 80056ee:	47b0      	blx	r6
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d025      	beq.n	8005740 <_printf_common+0xa8>
 80056f4:	2306      	movs	r3, #6
 80056f6:	6820      	ldr	r0, [r4, #0]
 80056f8:	682a      	ldr	r2, [r5, #0]
 80056fa:	68e1      	ldr	r1, [r4, #12]
 80056fc:	2500      	movs	r5, #0
 80056fe:	4003      	ands	r3, r0
 8005700:	2b04      	cmp	r3, #4
 8005702:	d103      	bne.n	800570c <_printf_common+0x74>
 8005704:	1a8d      	subs	r5, r1, r2
 8005706:	43eb      	mvns	r3, r5
 8005708:	17db      	asrs	r3, r3, #31
 800570a:	401d      	ands	r5, r3
 800570c:	68a3      	ldr	r3, [r4, #8]
 800570e:	6922      	ldr	r2, [r4, #16]
 8005710:	4293      	cmp	r3, r2
 8005712:	dd01      	ble.n	8005718 <_printf_common+0x80>
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	18ed      	adds	r5, r5, r3
 8005718:	2700      	movs	r7, #0
 800571a:	42bd      	cmp	r5, r7
 800571c:	d120      	bne.n	8005760 <_printf_common+0xc8>
 800571e:	2000      	movs	r0, #0
 8005720:	e010      	b.n	8005744 <_printf_common+0xac>
 8005722:	3701      	adds	r7, #1
 8005724:	68e3      	ldr	r3, [r4, #12]
 8005726:	682a      	ldr	r2, [r5, #0]
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	42bb      	cmp	r3, r7
 800572c:	ddd2      	ble.n	80056d4 <_printf_common+0x3c>
 800572e:	0022      	movs	r2, r4
 8005730:	2301      	movs	r3, #1
 8005732:	9901      	ldr	r1, [sp, #4]
 8005734:	9800      	ldr	r0, [sp, #0]
 8005736:	9e08      	ldr	r6, [sp, #32]
 8005738:	3219      	adds	r2, #25
 800573a:	47b0      	blx	r6
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d1f0      	bne.n	8005722 <_printf_common+0x8a>
 8005740:	2001      	movs	r0, #1
 8005742:	4240      	negs	r0, r0
 8005744:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005746:	2030      	movs	r0, #48	; 0x30
 8005748:	18e1      	adds	r1, r4, r3
 800574a:	3143      	adds	r1, #67	; 0x43
 800574c:	7008      	strb	r0, [r1, #0]
 800574e:	0021      	movs	r1, r4
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	3145      	adds	r1, #69	; 0x45
 8005754:	7809      	ldrb	r1, [r1, #0]
 8005756:	18a2      	adds	r2, r4, r2
 8005758:	3243      	adds	r2, #67	; 0x43
 800575a:	3302      	adds	r3, #2
 800575c:	7011      	strb	r1, [r2, #0]
 800575e:	e7c1      	b.n	80056e4 <_printf_common+0x4c>
 8005760:	0022      	movs	r2, r4
 8005762:	2301      	movs	r3, #1
 8005764:	9901      	ldr	r1, [sp, #4]
 8005766:	9800      	ldr	r0, [sp, #0]
 8005768:	9e08      	ldr	r6, [sp, #32]
 800576a:	321a      	adds	r2, #26
 800576c:	47b0      	blx	r6
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	d0e6      	beq.n	8005740 <_printf_common+0xa8>
 8005772:	3701      	adds	r7, #1
 8005774:	e7d1      	b.n	800571a <_printf_common+0x82>
	...

08005778 <_printf_i>:
 8005778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577a:	b08b      	sub	sp, #44	; 0x2c
 800577c:	9206      	str	r2, [sp, #24]
 800577e:	000a      	movs	r2, r1
 8005780:	3243      	adds	r2, #67	; 0x43
 8005782:	9307      	str	r3, [sp, #28]
 8005784:	9005      	str	r0, [sp, #20]
 8005786:	9204      	str	r2, [sp, #16]
 8005788:	7e0a      	ldrb	r2, [r1, #24]
 800578a:	000c      	movs	r4, r1
 800578c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800578e:	2a78      	cmp	r2, #120	; 0x78
 8005790:	d807      	bhi.n	80057a2 <_printf_i+0x2a>
 8005792:	2a62      	cmp	r2, #98	; 0x62
 8005794:	d809      	bhi.n	80057aa <_printf_i+0x32>
 8005796:	2a00      	cmp	r2, #0
 8005798:	d100      	bne.n	800579c <_printf_i+0x24>
 800579a:	e0c1      	b.n	8005920 <_printf_i+0x1a8>
 800579c:	2a58      	cmp	r2, #88	; 0x58
 800579e:	d100      	bne.n	80057a2 <_printf_i+0x2a>
 80057a0:	e08c      	b.n	80058bc <_printf_i+0x144>
 80057a2:	0026      	movs	r6, r4
 80057a4:	3642      	adds	r6, #66	; 0x42
 80057a6:	7032      	strb	r2, [r6, #0]
 80057a8:	e022      	b.n	80057f0 <_printf_i+0x78>
 80057aa:	0010      	movs	r0, r2
 80057ac:	3863      	subs	r0, #99	; 0x63
 80057ae:	2815      	cmp	r0, #21
 80057b0:	d8f7      	bhi.n	80057a2 <_printf_i+0x2a>
 80057b2:	f7fa fca9 	bl	8000108 <__gnu_thumb1_case_shi>
 80057b6:	0016      	.short	0x0016
 80057b8:	fff6001f 	.word	0xfff6001f
 80057bc:	fff6fff6 	.word	0xfff6fff6
 80057c0:	001ffff6 	.word	0x001ffff6
 80057c4:	fff6fff6 	.word	0xfff6fff6
 80057c8:	fff6fff6 	.word	0xfff6fff6
 80057cc:	003600a8 	.word	0x003600a8
 80057d0:	fff6009a 	.word	0xfff6009a
 80057d4:	00b9fff6 	.word	0x00b9fff6
 80057d8:	0036fff6 	.word	0x0036fff6
 80057dc:	fff6fff6 	.word	0xfff6fff6
 80057e0:	009e      	.short	0x009e
 80057e2:	0026      	movs	r6, r4
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	3642      	adds	r6, #66	; 0x42
 80057e8:	1d11      	adds	r1, r2, #4
 80057ea:	6019      	str	r1, [r3, #0]
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	7033      	strb	r3, [r6, #0]
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0a7      	b.n	8005944 <_printf_i+0x1cc>
 80057f4:	6808      	ldr	r0, [r1, #0]
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	1d0a      	adds	r2, r1, #4
 80057fa:	0605      	lsls	r5, r0, #24
 80057fc:	d50b      	bpl.n	8005816 <_printf_i+0x9e>
 80057fe:	680d      	ldr	r5, [r1, #0]
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	2d00      	cmp	r5, #0
 8005804:	da03      	bge.n	800580e <_printf_i+0x96>
 8005806:	232d      	movs	r3, #45	; 0x2d
 8005808:	9a04      	ldr	r2, [sp, #16]
 800580a:	426d      	negs	r5, r5
 800580c:	7013      	strb	r3, [r2, #0]
 800580e:	4b61      	ldr	r3, [pc, #388]	; (8005994 <_printf_i+0x21c>)
 8005810:	270a      	movs	r7, #10
 8005812:	9303      	str	r3, [sp, #12]
 8005814:	e01b      	b.n	800584e <_printf_i+0xd6>
 8005816:	680d      	ldr	r5, [r1, #0]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	0641      	lsls	r1, r0, #25
 800581c:	d5f1      	bpl.n	8005802 <_printf_i+0x8a>
 800581e:	b22d      	sxth	r5, r5
 8005820:	e7ef      	b.n	8005802 <_printf_i+0x8a>
 8005822:	680d      	ldr	r5, [r1, #0]
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	1d08      	adds	r0, r1, #4
 8005828:	6018      	str	r0, [r3, #0]
 800582a:	062e      	lsls	r6, r5, #24
 800582c:	d501      	bpl.n	8005832 <_printf_i+0xba>
 800582e:	680d      	ldr	r5, [r1, #0]
 8005830:	e003      	b.n	800583a <_printf_i+0xc2>
 8005832:	066d      	lsls	r5, r5, #25
 8005834:	d5fb      	bpl.n	800582e <_printf_i+0xb6>
 8005836:	680d      	ldr	r5, [r1, #0]
 8005838:	b2ad      	uxth	r5, r5
 800583a:	4b56      	ldr	r3, [pc, #344]	; (8005994 <_printf_i+0x21c>)
 800583c:	2708      	movs	r7, #8
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	2a6f      	cmp	r2, #111	; 0x6f
 8005842:	d000      	beq.n	8005846 <_printf_i+0xce>
 8005844:	3702      	adds	r7, #2
 8005846:	0023      	movs	r3, r4
 8005848:	2200      	movs	r2, #0
 800584a:	3343      	adds	r3, #67	; 0x43
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	60a3      	str	r3, [r4, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	db03      	blt.n	800585e <_printf_i+0xe6>
 8005856:	2204      	movs	r2, #4
 8005858:	6821      	ldr	r1, [r4, #0]
 800585a:	4391      	bics	r1, r2
 800585c:	6021      	str	r1, [r4, #0]
 800585e:	2d00      	cmp	r5, #0
 8005860:	d102      	bne.n	8005868 <_printf_i+0xf0>
 8005862:	9e04      	ldr	r6, [sp, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00c      	beq.n	8005882 <_printf_i+0x10a>
 8005868:	9e04      	ldr	r6, [sp, #16]
 800586a:	0028      	movs	r0, r5
 800586c:	0039      	movs	r1, r7
 800586e:	f7fa fcdb 	bl	8000228 <__aeabi_uidivmod>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	3e01      	subs	r6, #1
 8005876:	5c5b      	ldrb	r3, [r3, r1]
 8005878:	7033      	strb	r3, [r6, #0]
 800587a:	002b      	movs	r3, r5
 800587c:	0005      	movs	r5, r0
 800587e:	429f      	cmp	r7, r3
 8005880:	d9f3      	bls.n	800586a <_printf_i+0xf2>
 8005882:	2f08      	cmp	r7, #8
 8005884:	d109      	bne.n	800589a <_printf_i+0x122>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	07db      	lsls	r3, r3, #31
 800588a:	d506      	bpl.n	800589a <_printf_i+0x122>
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	6922      	ldr	r2, [r4, #16]
 8005890:	4293      	cmp	r3, r2
 8005892:	dc02      	bgt.n	800589a <_printf_i+0x122>
 8005894:	2330      	movs	r3, #48	; 0x30
 8005896:	3e01      	subs	r6, #1
 8005898:	7033      	strb	r3, [r6, #0]
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	1b9b      	subs	r3, r3, r6
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	9b07      	ldr	r3, [sp, #28]
 80058a2:	0021      	movs	r1, r4
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	9805      	ldr	r0, [sp, #20]
 80058a8:	9b06      	ldr	r3, [sp, #24]
 80058aa:	aa09      	add	r2, sp, #36	; 0x24
 80058ac:	f7ff fef4 	bl	8005698 <_printf_common>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d14c      	bne.n	800594e <_printf_i+0x1d6>
 80058b4:	2001      	movs	r0, #1
 80058b6:	4240      	negs	r0, r0
 80058b8:	b00b      	add	sp, #44	; 0x2c
 80058ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058bc:	3145      	adds	r1, #69	; 0x45
 80058be:	700a      	strb	r2, [r1, #0]
 80058c0:	4a34      	ldr	r2, [pc, #208]	; (8005994 <_printf_i+0x21c>)
 80058c2:	9203      	str	r2, [sp, #12]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	ca20      	ldmia	r2!, {r5}
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	0608      	lsls	r0, r1, #24
 80058ce:	d516      	bpl.n	80058fe <_printf_i+0x186>
 80058d0:	07cb      	lsls	r3, r1, #31
 80058d2:	d502      	bpl.n	80058da <_printf_i+0x162>
 80058d4:	2320      	movs	r3, #32
 80058d6:	4319      	orrs	r1, r3
 80058d8:	6021      	str	r1, [r4, #0]
 80058da:	2710      	movs	r7, #16
 80058dc:	2d00      	cmp	r5, #0
 80058de:	d1b2      	bne.n	8005846 <_printf_i+0xce>
 80058e0:	2320      	movs	r3, #32
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	439a      	bics	r2, r3
 80058e6:	6022      	str	r2, [r4, #0]
 80058e8:	e7ad      	b.n	8005846 <_printf_i+0xce>
 80058ea:	2220      	movs	r2, #32
 80058ec:	6809      	ldr	r1, [r1, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	6022      	str	r2, [r4, #0]
 80058f2:	0022      	movs	r2, r4
 80058f4:	2178      	movs	r1, #120	; 0x78
 80058f6:	3245      	adds	r2, #69	; 0x45
 80058f8:	7011      	strb	r1, [r2, #0]
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <_printf_i+0x220>)
 80058fc:	e7e1      	b.n	80058c2 <_printf_i+0x14a>
 80058fe:	0648      	lsls	r0, r1, #25
 8005900:	d5e6      	bpl.n	80058d0 <_printf_i+0x158>
 8005902:	b2ad      	uxth	r5, r5
 8005904:	e7e4      	b.n	80058d0 <_printf_i+0x158>
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	680d      	ldr	r5, [r1, #0]
 800590a:	1d10      	adds	r0, r2, #4
 800590c:	6949      	ldr	r1, [r1, #20]
 800590e:	6018      	str	r0, [r3, #0]
 8005910:	6813      	ldr	r3, [r2, #0]
 8005912:	062e      	lsls	r6, r5, #24
 8005914:	d501      	bpl.n	800591a <_printf_i+0x1a2>
 8005916:	6019      	str	r1, [r3, #0]
 8005918:	e002      	b.n	8005920 <_printf_i+0x1a8>
 800591a:	066d      	lsls	r5, r5, #25
 800591c:	d5fb      	bpl.n	8005916 <_printf_i+0x19e>
 800591e:	8019      	strh	r1, [r3, #0]
 8005920:	2300      	movs	r3, #0
 8005922:	9e04      	ldr	r6, [sp, #16]
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	e7bb      	b.n	80058a0 <_printf_i+0x128>
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	1d11      	adds	r1, r2, #4
 800592c:	6019      	str	r1, [r3, #0]
 800592e:	6816      	ldr	r6, [r2, #0]
 8005930:	2100      	movs	r1, #0
 8005932:	0030      	movs	r0, r6
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	f000 f831 	bl	800599c <memchr>
 800593a:	2800      	cmp	r0, #0
 800593c:	d001      	beq.n	8005942 <_printf_i+0x1ca>
 800593e:	1b80      	subs	r0, r0, r6
 8005940:	6060      	str	r0, [r4, #4]
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	2300      	movs	r3, #0
 8005948:	9a04      	ldr	r2, [sp, #16]
 800594a:	7013      	strb	r3, [r2, #0]
 800594c:	e7a8      	b.n	80058a0 <_printf_i+0x128>
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	0032      	movs	r2, r6
 8005952:	9906      	ldr	r1, [sp, #24]
 8005954:	9805      	ldr	r0, [sp, #20]
 8005956:	9d07      	ldr	r5, [sp, #28]
 8005958:	47a8      	blx	r5
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	d0aa      	beq.n	80058b4 <_printf_i+0x13c>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	079b      	lsls	r3, r3, #30
 8005962:	d415      	bmi.n	8005990 <_printf_i+0x218>
 8005964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005966:	68e0      	ldr	r0, [r4, #12]
 8005968:	4298      	cmp	r0, r3
 800596a:	daa5      	bge.n	80058b8 <_printf_i+0x140>
 800596c:	0018      	movs	r0, r3
 800596e:	e7a3      	b.n	80058b8 <_printf_i+0x140>
 8005970:	0022      	movs	r2, r4
 8005972:	2301      	movs	r3, #1
 8005974:	9906      	ldr	r1, [sp, #24]
 8005976:	9805      	ldr	r0, [sp, #20]
 8005978:	9e07      	ldr	r6, [sp, #28]
 800597a:	3219      	adds	r2, #25
 800597c:	47b0      	blx	r6
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	d098      	beq.n	80058b4 <_printf_i+0x13c>
 8005982:	3501      	adds	r5, #1
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	42ab      	cmp	r3, r5
 800598c:	dcf0      	bgt.n	8005970 <_printf_i+0x1f8>
 800598e:	e7e9      	b.n	8005964 <_printf_i+0x1ec>
 8005990:	2500      	movs	r5, #0
 8005992:	e7f7      	b.n	8005984 <_printf_i+0x20c>
 8005994:	08006b6d 	.word	0x08006b6d
 8005998:	08006b7e 	.word	0x08006b7e

0800599c <memchr>:
 800599c:	b2c9      	uxtb	r1, r1
 800599e:	1882      	adds	r2, r0, r2
 80059a0:	4290      	cmp	r0, r2
 80059a2:	d101      	bne.n	80059a8 <memchr+0xc>
 80059a4:	2000      	movs	r0, #0
 80059a6:	4770      	bx	lr
 80059a8:	7803      	ldrb	r3, [r0, #0]
 80059aa:	428b      	cmp	r3, r1
 80059ac:	d0fb      	beq.n	80059a6 <memchr+0xa>
 80059ae:	3001      	adds	r0, #1
 80059b0:	e7f6      	b.n	80059a0 <memchr+0x4>

080059b2 <memcpy>:
 80059b2:	2300      	movs	r3, #0
 80059b4:	b510      	push	{r4, lr}
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d100      	bne.n	80059bc <memcpy+0xa>
 80059ba:	bd10      	pop	{r4, pc}
 80059bc:	5ccc      	ldrb	r4, [r1, r3]
 80059be:	54c4      	strb	r4, [r0, r3]
 80059c0:	3301      	adds	r3, #1
 80059c2:	e7f8      	b.n	80059b6 <memcpy+0x4>

080059c4 <memmove>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	4288      	cmp	r0, r1
 80059c8:	d902      	bls.n	80059d0 <memmove+0xc>
 80059ca:	188b      	adds	r3, r1, r2
 80059cc:	4298      	cmp	r0, r3
 80059ce:	d303      	bcc.n	80059d8 <memmove+0x14>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e007      	b.n	80059e4 <memmove+0x20>
 80059d4:	5c8b      	ldrb	r3, [r1, r2]
 80059d6:	5483      	strb	r3, [r0, r2]
 80059d8:	3a01      	subs	r2, #1
 80059da:	d2fb      	bcs.n	80059d4 <memmove+0x10>
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	5ccc      	ldrb	r4, [r1, r3]
 80059e0:	54c4      	strb	r4, [r0, r3]
 80059e2:	3301      	adds	r3, #1
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1fa      	bne.n	80059de <memmove+0x1a>
 80059e8:	e7f8      	b.n	80059dc <memmove+0x18>
	...

080059ec <_free_r>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	0005      	movs	r5, r0
 80059f0:	2900      	cmp	r1, #0
 80059f2:	d010      	beq.n	8005a16 <_free_r+0x2a>
 80059f4:	1f0c      	subs	r4, r1, #4
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da00      	bge.n	80059fe <_free_r+0x12>
 80059fc:	18e4      	adds	r4, r4, r3
 80059fe:	0028      	movs	r0, r5
 8005a00:	f000 f918 	bl	8005c34 <__malloc_lock>
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <_free_r+0x90>)
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <_free_r+0x2c>
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	6014      	str	r4, [r2, #0]
 8005a10:	0028      	movs	r0, r5
 8005a12:	f000 f917 	bl	8005c44 <__malloc_unlock>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d908      	bls.n	8005a2e <_free_r+0x42>
 8005a1c:	6821      	ldr	r1, [r4, #0]
 8005a1e:	1860      	adds	r0, r4, r1
 8005a20:	4283      	cmp	r3, r0
 8005a22:	d1f3      	bne.n	8005a0c <_free_r+0x20>
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	1841      	adds	r1, r0, r1
 8005a2a:	6021      	str	r1, [r4, #0]
 8005a2c:	e7ee      	b.n	8005a0c <_free_r+0x20>
 8005a2e:	001a      	movs	r2, r3
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <_free_r+0x4e>
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	d9f9      	bls.n	8005a2e <_free_r+0x42>
 8005a3a:	6811      	ldr	r1, [r2, #0]
 8005a3c:	1850      	adds	r0, r2, r1
 8005a3e:	42a0      	cmp	r0, r4
 8005a40:	d10b      	bne.n	8005a5a <_free_r+0x6e>
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	1809      	adds	r1, r1, r0
 8005a46:	1850      	adds	r0, r2, r1
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	4283      	cmp	r3, r0
 8005a4c:	d1e0      	bne.n	8005a10 <_free_r+0x24>
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	1841      	adds	r1, r0, r1
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	6053      	str	r3, [r2, #4]
 8005a58:	e7da      	b.n	8005a10 <_free_r+0x24>
 8005a5a:	42a0      	cmp	r0, r4
 8005a5c:	d902      	bls.n	8005a64 <_free_r+0x78>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	e7d5      	b.n	8005a10 <_free_r+0x24>
 8005a64:	6821      	ldr	r1, [r4, #0]
 8005a66:	1860      	adds	r0, r4, r1
 8005a68:	4283      	cmp	r3, r0
 8005a6a:	d103      	bne.n	8005a74 <_free_r+0x88>
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	1841      	adds	r1, r0, r1
 8005a72:	6021      	str	r1, [r4, #0]
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	6054      	str	r4, [r2, #4]
 8005a78:	e7ca      	b.n	8005a10 <_free_r+0x24>
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	200001c0 	.word	0x200001c0

08005a80 <sbrk_aligned>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0f      	ldr	r6, [pc, #60]	; (8005ac0 <sbrk_aligned+0x40>)
 8005a84:	000d      	movs	r5, r1
 8005a86:	6831      	ldr	r1, [r6, #0]
 8005a88:	0004      	movs	r4, r0
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d102      	bne.n	8005a94 <sbrk_aligned+0x14>
 8005a8e:	f000 f8bf 	bl	8005c10 <_sbrk_r>
 8005a92:	6030      	str	r0, [r6, #0]
 8005a94:	0029      	movs	r1, r5
 8005a96:	0020      	movs	r0, r4
 8005a98:	f000 f8ba 	bl	8005c10 <_sbrk_r>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d00a      	beq.n	8005ab6 <sbrk_aligned+0x36>
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	1cc5      	adds	r5, r0, #3
 8005aa4:	439d      	bics	r5, r3
 8005aa6:	42a8      	cmp	r0, r5
 8005aa8:	d007      	beq.n	8005aba <sbrk_aligned+0x3a>
 8005aaa:	1a29      	subs	r1, r5, r0
 8005aac:	0020      	movs	r0, r4
 8005aae:	f000 f8af 	bl	8005c10 <_sbrk_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d101      	bne.n	8005aba <sbrk_aligned+0x3a>
 8005ab6:	2501      	movs	r5, #1
 8005ab8:	426d      	negs	r5, r5
 8005aba:	0028      	movs	r0, r5
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	200001c4 	.word	0x200001c4

08005ac4 <_malloc_r>:
 8005ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	1ccb      	adds	r3, r1, #3
 8005aca:	4393      	bics	r3, r2
 8005acc:	3308      	adds	r3, #8
 8005ace:	0006      	movs	r6, r0
 8005ad0:	001f      	movs	r7, r3
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d232      	bcs.n	8005b3c <_malloc_r+0x78>
 8005ad6:	270c      	movs	r7, #12
 8005ad8:	42b9      	cmp	r1, r7
 8005ada:	d831      	bhi.n	8005b40 <_malloc_r+0x7c>
 8005adc:	0030      	movs	r0, r6
 8005ade:	f000 f8a9 	bl	8005c34 <__malloc_lock>
 8005ae2:	4d32      	ldr	r5, [pc, #200]	; (8005bac <_malloc_r+0xe8>)
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	001c      	movs	r4, r3
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d12e      	bne.n	8005b4a <_malloc_r+0x86>
 8005aec:	0039      	movs	r1, r7
 8005aee:	0030      	movs	r0, r6
 8005af0:	f7ff ffc6 	bl	8005a80 <sbrk_aligned>
 8005af4:	0004      	movs	r4, r0
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d11e      	bne.n	8005b38 <_malloc_r+0x74>
 8005afa:	682c      	ldr	r4, [r5, #0]
 8005afc:	0025      	movs	r5, r4
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	d14a      	bne.n	8005b98 <_malloc_r+0xd4>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0029      	movs	r1, r5
 8005b06:	18e3      	adds	r3, r4, r3
 8005b08:	0030      	movs	r0, r6
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	f000 f880 	bl	8005c10 <_sbrk_r>
 8005b10:	9b01      	ldr	r3, [sp, #4]
 8005b12:	4283      	cmp	r3, r0
 8005b14:	d143      	bne.n	8005b9e <_malloc_r+0xda>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	3703      	adds	r7, #3
 8005b1a:	1aff      	subs	r7, r7, r3
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	439f      	bics	r7, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	2f0c      	cmp	r7, #12
 8005b24:	d200      	bcs.n	8005b28 <_malloc_r+0x64>
 8005b26:	270c      	movs	r7, #12
 8005b28:	0039      	movs	r1, r7
 8005b2a:	0030      	movs	r0, r6
 8005b2c:	f7ff ffa8 	bl	8005a80 <sbrk_aligned>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d034      	beq.n	8005b9e <_malloc_r+0xda>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	19df      	adds	r7, r3, r7
 8005b38:	6027      	str	r7, [r4, #0]
 8005b3a:	e013      	b.n	8005b64 <_malloc_r+0xa0>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dacb      	bge.n	8005ad8 <_malloc_r+0x14>
 8005b40:	230c      	movs	r3, #12
 8005b42:	2500      	movs	r5, #0
 8005b44:	6033      	str	r3, [r6, #0]
 8005b46:	0028      	movs	r0, r5
 8005b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	1bd1      	subs	r1, r2, r7
 8005b4e:	d420      	bmi.n	8005b92 <_malloc_r+0xce>
 8005b50:	290b      	cmp	r1, #11
 8005b52:	d917      	bls.n	8005b84 <_malloc_r+0xc0>
 8005b54:	19e2      	adds	r2, r4, r7
 8005b56:	6027      	str	r7, [r4, #0]
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	d111      	bne.n	8005b80 <_malloc_r+0xbc>
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	6011      	str	r1, [r2, #0]
 8005b62:	6053      	str	r3, [r2, #4]
 8005b64:	0030      	movs	r0, r6
 8005b66:	0025      	movs	r5, r4
 8005b68:	f000 f86c 	bl	8005c44 <__malloc_unlock>
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	350b      	adds	r5, #11
 8005b70:	1d23      	adds	r3, r4, #4
 8005b72:	4395      	bics	r5, r2
 8005b74:	1aea      	subs	r2, r5, r3
 8005b76:	429d      	cmp	r5, r3
 8005b78:	d0e5      	beq.n	8005b46 <_malloc_r+0x82>
 8005b7a:	1b5b      	subs	r3, r3, r5
 8005b7c:	50a3      	str	r3, [r4, r2]
 8005b7e:	e7e2      	b.n	8005b46 <_malloc_r+0x82>
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	e7ec      	b.n	8005b5e <_malloc_r+0x9a>
 8005b84:	6862      	ldr	r2, [r4, #4]
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	d101      	bne.n	8005b8e <_malloc_r+0xca>
 8005b8a:	602a      	str	r2, [r5, #0]
 8005b8c:	e7ea      	b.n	8005b64 <_malloc_r+0xa0>
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	e7e8      	b.n	8005b64 <_malloc_r+0xa0>
 8005b92:	0023      	movs	r3, r4
 8005b94:	6864      	ldr	r4, [r4, #4]
 8005b96:	e7a7      	b.n	8005ae8 <_malloc_r+0x24>
 8005b98:	002c      	movs	r4, r5
 8005b9a:	686d      	ldr	r5, [r5, #4]
 8005b9c:	e7af      	b.n	8005afe <_malloc_r+0x3a>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	0030      	movs	r0, r6
 8005ba2:	6033      	str	r3, [r6, #0]
 8005ba4:	f000 f84e 	bl	8005c44 <__malloc_unlock>
 8005ba8:	e7cd      	b.n	8005b46 <_malloc_r+0x82>
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	200001c0 	.word	0x200001c0

08005bb0 <_realloc_r>:
 8005bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb2:	0007      	movs	r7, r0
 8005bb4:	000e      	movs	r6, r1
 8005bb6:	0014      	movs	r4, r2
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	d105      	bne.n	8005bc8 <_realloc_r+0x18>
 8005bbc:	0011      	movs	r1, r2
 8005bbe:	f7ff ff81 	bl	8005ac4 <_malloc_r>
 8005bc2:	0005      	movs	r5, r0
 8005bc4:	0028      	movs	r0, r5
 8005bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	d103      	bne.n	8005bd4 <_realloc_r+0x24>
 8005bcc:	f7ff ff0e 	bl	80059ec <_free_r>
 8005bd0:	0025      	movs	r5, r4
 8005bd2:	e7f7      	b.n	8005bc4 <_realloc_r+0x14>
 8005bd4:	f000 f83e 	bl	8005c54 <_malloc_usable_size_r>
 8005bd8:	9001      	str	r0, [sp, #4]
 8005bda:	4284      	cmp	r4, r0
 8005bdc:	d803      	bhi.n	8005be6 <_realloc_r+0x36>
 8005bde:	0035      	movs	r5, r6
 8005be0:	0843      	lsrs	r3, r0, #1
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	d3ee      	bcc.n	8005bc4 <_realloc_r+0x14>
 8005be6:	0021      	movs	r1, r4
 8005be8:	0038      	movs	r0, r7
 8005bea:	f7ff ff6b 	bl	8005ac4 <_malloc_r>
 8005bee:	1e05      	subs	r5, r0, #0
 8005bf0:	d0e8      	beq.n	8005bc4 <_realloc_r+0x14>
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	0022      	movs	r2, r4
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	d900      	bls.n	8005bfc <_realloc_r+0x4c>
 8005bfa:	001a      	movs	r2, r3
 8005bfc:	0031      	movs	r1, r6
 8005bfe:	0028      	movs	r0, r5
 8005c00:	f7ff fed7 	bl	80059b2 <memcpy>
 8005c04:	0031      	movs	r1, r6
 8005c06:	0038      	movs	r0, r7
 8005c08:	f7ff fef0 	bl	80059ec <_free_r>
 8005c0c:	e7da      	b.n	8005bc4 <_realloc_r+0x14>
	...

08005c10 <_sbrk_r>:
 8005c10:	2300      	movs	r3, #0
 8005c12:	b570      	push	{r4, r5, r6, lr}
 8005c14:	4d06      	ldr	r5, [pc, #24]	; (8005c30 <_sbrk_r+0x20>)
 8005c16:	0004      	movs	r4, r0
 8005c18:	0008      	movs	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fc fd7c 	bl	8002718 <_sbrk>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d103      	bne.n	8005c2c <_sbrk_r+0x1c>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d000      	beq.n	8005c2c <_sbrk_r+0x1c>
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	200001c8 	.word	0x200001c8

08005c34 <__malloc_lock>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4802      	ldr	r0, [pc, #8]	; (8005c40 <__malloc_lock+0xc>)
 8005c38:	f000 f814 	bl	8005c64 <__retarget_lock_acquire_recursive>
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	200001cc 	.word	0x200001cc

08005c44 <__malloc_unlock>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	4802      	ldr	r0, [pc, #8]	; (8005c50 <__malloc_unlock+0xc>)
 8005c48:	f000 f80d 	bl	8005c66 <__retarget_lock_release_recursive>
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	200001cc 	.word	0x200001cc

08005c54 <_malloc_usable_size_r>:
 8005c54:	1f0b      	subs	r3, r1, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	1f18      	subs	r0, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da01      	bge.n	8005c62 <_malloc_usable_size_r+0xe>
 8005c5e:	580b      	ldr	r3, [r1, r0]
 8005c60:	18c0      	adds	r0, r0, r3
 8005c62:	4770      	bx	lr

08005c64 <__retarget_lock_acquire_recursive>:
 8005c64:	4770      	bx	lr

08005c66 <__retarget_lock_release_recursive>:
 8005c66:	4770      	bx	lr

08005c68 <pow>:
 8005c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c6a:	0014      	movs	r4, r2
 8005c6c:	001d      	movs	r5, r3
 8005c6e:	9000      	str	r0, [sp, #0]
 8005c70:	9101      	str	r1, [sp, #4]
 8005c72:	f000 f867 	bl	8005d44 <__ieee754_pow>
 8005c76:	0022      	movs	r2, r4
 8005c78:	0006      	movs	r6, r0
 8005c7a:	000f      	movs	r7, r1
 8005c7c:	002b      	movs	r3, r5
 8005c7e:	0020      	movs	r0, r4
 8005c80:	0029      	movs	r1, r5
 8005c82:	f7fc f851 	bl	8001d28 <__aeabi_dcmpun>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d13f      	bne.n	8005d0a <pow+0xa2>
 8005c8a:	9800      	ldr	r0, [sp, #0]
 8005c8c:	9901      	ldr	r1, [sp, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	f7fa fadf 	bl	8000254 <__aeabi_dcmpeq>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d019      	beq.n	8005cce <pow+0x66>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	0029      	movs	r1, r5
 8005ca2:	f7fa fad7 	bl	8000254 <__aeabi_dcmpeq>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d146      	bne.n	8005d38 <pow+0xd0>
 8005caa:	0020      	movs	r0, r4
 8005cac:	0029      	movs	r1, r5
 8005cae:	f000 fe3d 	bl	800692c <finite>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d029      	beq.n	8005d0a <pow+0xa2>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	0020      	movs	r0, r4
 8005cbc:	0029      	movs	r1, r5
 8005cbe:	f7fa facf 	bl	8000260 <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d021      	beq.n	8005d0a <pow+0xa2>
 8005cc6:	f7ff fb33 	bl	8005330 <__errno>
 8005cca:	2322      	movs	r3, #34	; 0x22
 8005ccc:	e01c      	b.n	8005d08 <pow+0xa0>
 8005cce:	0030      	movs	r0, r6
 8005cd0:	0039      	movs	r1, r7
 8005cd2:	f000 fe2b 	bl	800692c <finite>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d11b      	bne.n	8005d12 <pow+0xaa>
 8005cda:	9800      	ldr	r0, [sp, #0]
 8005cdc:	9901      	ldr	r1, [sp, #4]
 8005cde:	f000 fe25 	bl	800692c <finite>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d015      	beq.n	8005d12 <pow+0xaa>
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	0029      	movs	r1, r5
 8005cea:	f000 fe1f 	bl	800692c <finite>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d00f      	beq.n	8005d12 <pow+0xaa>
 8005cf2:	0032      	movs	r2, r6
 8005cf4:	003b      	movs	r3, r7
 8005cf6:	0030      	movs	r0, r6
 8005cf8:	0039      	movs	r1, r7
 8005cfa:	f7fc f815 	bl	8001d28 <__aeabi_dcmpun>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d0e1      	beq.n	8005cc6 <pow+0x5e>
 8005d02:	f7ff fb15 	bl	8005330 <__errno>
 8005d06:	2321      	movs	r3, #33	; 0x21
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	0030      	movs	r0, r6
 8005d0c:	0039      	movs	r1, r7
 8005d0e:	b003      	add	sp, #12
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	0030      	movs	r0, r6
 8005d18:	0039      	movs	r1, r7
 8005d1a:	f7fa fa9b 	bl	8000254 <__aeabi_dcmpeq>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d0f3      	beq.n	8005d0a <pow+0xa2>
 8005d22:	9800      	ldr	r0, [sp, #0]
 8005d24:	9901      	ldr	r1, [sp, #4]
 8005d26:	f000 fe01 	bl	800692c <finite>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d0ed      	beq.n	8005d0a <pow+0xa2>
 8005d2e:	0020      	movs	r0, r4
 8005d30:	0029      	movs	r1, r5
 8005d32:	f000 fdfb 	bl	800692c <finite>
 8005d36:	e7c4      	b.n	8005cc2 <pow+0x5a>
 8005d38:	2600      	movs	r6, #0
 8005d3a:	4f01      	ldr	r7, [pc, #4]	; (8005d40 <pow+0xd8>)
 8005d3c:	e7e5      	b.n	8005d0a <pow+0xa2>
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	3ff00000 	.word	0x3ff00000

08005d44 <__ieee754_pow>:
 8005d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d46:	b095      	sub	sp, #84	; 0x54
 8005d48:	9202      	str	r2, [sp, #8]
 8005d4a:	9303      	str	r3, [sp, #12]
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	9a03      	ldr	r2, [sp, #12]
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	9b02      	ldr	r3, [sp, #8]
 8005d54:	0056      	lsls	r6, r2, #1
 8005d56:	001a      	movs	r2, r3
 8005d58:	0876      	lsrs	r6, r6, #1
 8005d5a:	0007      	movs	r7, r0
 8005d5c:	000d      	movs	r5, r1
 8005d5e:	4332      	orrs	r2, r6
 8005d60:	d119      	bne.n	8005d96 <__ieee754_pow+0x52>
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	0309      	lsls	r1, r1, #12
 8005d66:	4069      	eors	r1, r5
 8005d68:	0002      	movs	r2, r0
 8005d6a:	000b      	movs	r3, r1
 8005d6c:	1892      	adds	r2, r2, r2
 8005d6e:	415b      	adcs	r3, r3
 8005d70:	4989      	ldr	r1, [pc, #548]	; (8005f98 <__ieee754_pow+0x254>)
 8005d72:	428b      	cmp	r3, r1
 8005d74:	d806      	bhi.n	8005d84 <__ieee754_pow+0x40>
 8005d76:	d001      	beq.n	8005d7c <__ieee754_pow+0x38>
 8005d78:	f000 fcb6 	bl	80066e8 <__ieee754_pow+0x9a4>
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	d101      	bne.n	8005d84 <__ieee754_pow+0x40>
 8005d80:	f000 fcb2 	bl	80066e8 <__ieee754_pow+0x9a4>
 8005d84:	9a02      	ldr	r2, [sp, #8]
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	0038      	movs	r0, r7
 8005d8a:	0029      	movs	r1, r5
 8005d8c:	f7fa fa90 	bl	80002b0 <__aeabi_dadd>
 8005d90:	9000      	str	r0, [sp, #0]
 8005d92:	9101      	str	r1, [sp, #4]
 8005d94:	e0ad      	b.n	8005ef2 <__ieee754_pow+0x1ae>
 8005d96:	4a81      	ldr	r2, [pc, #516]	; (8005f9c <__ieee754_pow+0x258>)
 8005d98:	004c      	lsls	r4, r1, #1
 8005d9a:	9108      	str	r1, [sp, #32]
 8005d9c:	9000      	str	r0, [sp, #0]
 8005d9e:	0864      	lsrs	r4, r4, #1
 8005da0:	4294      	cmp	r4, r2
 8005da2:	dc08      	bgt.n	8005db6 <__ieee754_pow+0x72>
 8005da4:	d101      	bne.n	8005daa <__ieee754_pow+0x66>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d1ec      	bne.n	8005d84 <__ieee754_pow+0x40>
 8005daa:	4a7c      	ldr	r2, [pc, #496]	; (8005f9c <__ieee754_pow+0x258>)
 8005dac:	4296      	cmp	r6, r2
 8005dae:	dc02      	bgt.n	8005db6 <__ieee754_pow+0x72>
 8005db0:	d10c      	bne.n	8005dcc <__ieee754_pow+0x88>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <__ieee754_pow+0x88>
 8005db6:	4b7a      	ldr	r3, [pc, #488]	; (8005fa0 <__ieee754_pow+0x25c>)
 8005db8:	18eb      	adds	r3, r5, r3
 8005dba:	433b      	orrs	r3, r7
 8005dbc:	d1e2      	bne.n	8005d84 <__ieee754_pow+0x40>
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	9803      	ldr	r0, [sp, #12]
 8005dc2:	0309      	lsls	r1, r1, #12
 8005dc4:	4048      	eors	r0, r1
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	9a02      	ldr	r2, [sp, #8]
 8005dca:	e7cf      	b.n	8005d6c <__ieee754_pow+0x28>
 8005dcc:	2200      	movs	r2, #0
 8005dce:	9206      	str	r2, [sp, #24]
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	da69      	bge.n	8005ea8 <__ieee754_pow+0x164>
 8005dd4:	4a73      	ldr	r2, [pc, #460]	; (8005fa4 <__ieee754_pow+0x260>)
 8005dd6:	4296      	cmp	r6, r2
 8005dd8:	dc64      	bgt.n	8005ea4 <__ieee754_pow+0x160>
 8005dda:	4a73      	ldr	r2, [pc, #460]	; (8005fa8 <__ieee754_pow+0x264>)
 8005ddc:	4296      	cmp	r6, r2
 8005dde:	dd11      	ble.n	8005e04 <__ieee754_pow+0xc0>
 8005de0:	4972      	ldr	r1, [pc, #456]	; (8005fac <__ieee754_pow+0x268>)
 8005de2:	1532      	asrs	r2, r6, #20
 8005de4:	1852      	adds	r2, r2, r1
 8005de6:	2a14      	cmp	r2, #20
 8005de8:	dd3c      	ble.n	8005e64 <__ieee754_pow+0x120>
 8005dea:	2134      	movs	r1, #52	; 0x34
 8005dec:	1a8a      	subs	r2, r1, r2
 8005dee:	9902      	ldr	r1, [sp, #8]
 8005df0:	40d1      	lsrs	r1, r2
 8005df2:	0008      	movs	r0, r1
 8005df4:	4090      	lsls	r0, r2
 8005df6:	4298      	cmp	r0, r3
 8005df8:	d104      	bne.n	8005e04 <__ieee754_pow+0xc0>
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4011      	ands	r1, r2
 8005dfe:	1892      	adds	r2, r2, r2
 8005e00:	1a52      	subs	r2, r2, r1
 8005e02:	9206      	str	r2, [sp, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d03c      	beq.n	8005e82 <__ieee754_pow+0x13e>
 8005e08:	0038      	movs	r0, r7
 8005e0a:	0029      	movs	r1, r5
 8005e0c:	f000 fd8b 	bl	8006926 <fabs>
 8005e10:	9000      	str	r0, [sp, #0]
 8005e12:	9101      	str	r1, [sp, #4]
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	d000      	beq.n	8005e1a <__ieee754_pow+0xd6>
 8005e18:	e094      	b.n	8005f44 <__ieee754_pow+0x200>
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	d005      	beq.n	8005e2a <__ieee754_pow+0xe6>
 8005e1e:	4a64      	ldr	r2, [pc, #400]	; (8005fb0 <__ieee754_pow+0x26c>)
 8005e20:	00ab      	lsls	r3, r5, #2
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d000      	beq.n	8005e2a <__ieee754_pow+0xe6>
 8005e28:	e08c      	b.n	8005f44 <__ieee754_pow+0x200>
 8005e2a:	9b04      	ldr	r3, [sp, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da07      	bge.n	8005e40 <__ieee754_pow+0xfc>
 8005e30:	9a00      	ldr	r2, [sp, #0]
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	2000      	movs	r0, #0
 8005e36:	495e      	ldr	r1, [pc, #376]	; (8005fb0 <__ieee754_pow+0x26c>)
 8005e38:	f7fa fd76 	bl	8000928 <__aeabi_ddiv>
 8005e3c:	9000      	str	r0, [sp, #0]
 8005e3e:	9101      	str	r1, [sp, #4]
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	da55      	bge.n	8005ef2 <__ieee754_pow+0x1ae>
 8005e46:	4b56      	ldr	r3, [pc, #344]	; (8005fa0 <__ieee754_pow+0x25c>)
 8005e48:	18e4      	adds	r4, r4, r3
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	431c      	orrs	r4, r3
 8005e4e:	d000      	beq.n	8005e52 <__ieee754_pow+0x10e>
 8005e50:	e06c      	b.n	8005f2c <__ieee754_pow+0x1e8>
 8005e52:	9a00      	ldr	r2, [sp, #0]
 8005e54:	9b01      	ldr	r3, [sp, #4]
 8005e56:	0010      	movs	r0, r2
 8005e58:	0019      	movs	r1, r3
 8005e5a:	f7fb fbd3 	bl	8001604 <__aeabi_dsub>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	000b      	movs	r3, r1
 8005e62:	e01c      	b.n	8005e9e <__ieee754_pow+0x15a>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1cf      	bne.n	8005e08 <__ieee754_pow+0xc4>
 8005e68:	3314      	adds	r3, #20
 8005e6a:	1a9a      	subs	r2, r3, r2
 8005e6c:	0033      	movs	r3, r6
 8005e6e:	4113      	asrs	r3, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	4091      	lsls	r1, r2
 8005e74:	42b1      	cmp	r1, r6
 8005e76:	d104      	bne.n	8005e82 <__ieee754_pow+0x13e>
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	1892      	adds	r2, r2, r2
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	9306      	str	r3, [sp, #24]
 8005e82:	4b4b      	ldr	r3, [pc, #300]	; (8005fb0 <__ieee754_pow+0x26c>)
 8005e84:	429e      	cmp	r6, r3
 8005e86:	d138      	bne.n	8005efa <__ieee754_pow+0x1b6>
 8005e88:	0038      	movs	r0, r7
 8005e8a:	0029      	movs	r1, r5
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	9101      	str	r1, [sp, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da2d      	bge.n	8005ef2 <__ieee754_pow+0x1ae>
 8005e96:	003a      	movs	r2, r7
 8005e98:	002b      	movs	r3, r5
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	4944      	ldr	r1, [pc, #272]	; (8005fb0 <__ieee754_pow+0x26c>)
 8005e9e:	f7fa fd43 	bl	8000928 <__aeabi_ddiv>
 8005ea2:	e775      	b.n	8005d90 <__ieee754_pow+0x4c>
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	9206      	str	r2, [sp, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1ad      	bne.n	8005e08 <__ieee754_pow+0xc4>
 8005eac:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <__ieee754_pow+0x258>)
 8005eae:	429e      	cmp	r6, r3
 8005eb0:	d1e7      	bne.n	8005e82 <__ieee754_pow+0x13e>
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <__ieee754_pow+0x25c>)
 8005eb4:	18e3      	adds	r3, r4, r3
 8005eb6:	431f      	orrs	r7, r3
 8005eb8:	d101      	bne.n	8005ebe <__ieee754_pow+0x17a>
 8005eba:	f000 fc15 	bl	80066e8 <__ieee754_pow+0x9a4>
 8005ebe:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <__ieee754_pow+0x264>)
 8005ec0:	429c      	cmp	r4, r3
 8005ec2:	dd09      	ble.n	8005ed8 <__ieee754_pow+0x194>
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da01      	bge.n	8005ece <__ieee754_pow+0x18a>
 8005eca:	f000 fc11 	bl	80066f0 <__ieee754_pow+0x9ac>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	9c03      	ldr	r4, [sp, #12]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	9401      	str	r4, [sp, #4]
 8005ed6:	e00c      	b.n	8005ef2 <__ieee754_pow+0x1ae>
 8005ed8:	9b04      	ldr	r3, [sp, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db01      	blt.n	8005ee2 <__ieee754_pow+0x19e>
 8005ede:	f000 fc07 	bl	80066f0 <__ieee754_pow+0x9ac>
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	0612      	lsls	r2, r2, #24
 8005ee6:	4694      	mov	ip, r2
 8005ee8:	9b02      	ldr	r3, [sp, #8]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	4463      	add	r3, ip
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	9800      	ldr	r0, [sp, #0]
 8005ef4:	9901      	ldr	r1, [sp, #4]
 8005ef6:	b015      	add	sp, #84	; 0x54
 8005ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efa:	2380      	movs	r3, #128	; 0x80
 8005efc:	9a04      	ldr	r2, [sp, #16]
 8005efe:	05db      	lsls	r3, r3, #23
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d106      	bne.n	8005f12 <__ieee754_pow+0x1ce>
 8005f04:	003a      	movs	r2, r7
 8005f06:	002b      	movs	r3, r5
 8005f08:	0038      	movs	r0, r7
 8005f0a:	0029      	movs	r1, r5
 8005f0c:	f7fb f90e 	bl	800112c <__aeabi_dmul>
 8005f10:	e73e      	b.n	8005d90 <__ieee754_pow+0x4c>
 8005f12:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <__ieee754_pow+0x270>)
 8005f14:	9a04      	ldr	r2, [sp, #16]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d000      	beq.n	8005f1c <__ieee754_pow+0x1d8>
 8005f1a:	e775      	b.n	8005e08 <__ieee754_pow+0xc4>
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	da00      	bge.n	8005f22 <__ieee754_pow+0x1de>
 8005f20:	e772      	b.n	8005e08 <__ieee754_pow+0xc4>
 8005f22:	0038      	movs	r0, r7
 8005f24:	0029      	movs	r1, r5
 8005f26:	f000 fc17 	bl	8006758 <__ieee754_sqrt>
 8005f2a:	e731      	b.n	8005d90 <__ieee754_pow+0x4c>
 8005f2c:	9b06      	ldr	r3, [sp, #24]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d1df      	bne.n	8005ef2 <__ieee754_pow+0x1ae>
 8005f32:	9800      	ldr	r0, [sp, #0]
 8005f34:	2180      	movs	r1, #128	; 0x80
 8005f36:	0002      	movs	r2, r0
 8005f38:	9801      	ldr	r0, [sp, #4]
 8005f3a:	0609      	lsls	r1, r1, #24
 8005f3c:	1843      	adds	r3, r0, r1
 8005f3e:	9200      	str	r2, [sp, #0]
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	e7d6      	b.n	8005ef2 <__ieee754_pow+0x1ae>
 8005f44:	0feb      	lsrs	r3, r5, #31
 8005f46:	3b01      	subs	r3, #1
 8005f48:	930e      	str	r3, [sp, #56]	; 0x38
 8005f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f4c:	9b06      	ldr	r3, [sp, #24]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d104      	bne.n	8005f5c <__ieee754_pow+0x218>
 8005f52:	003a      	movs	r2, r7
 8005f54:	002b      	movs	r3, r5
 8005f56:	0038      	movs	r0, r7
 8005f58:	0029      	movs	r1, r5
 8005f5a:	e77e      	b.n	8005e5a <__ieee754_pow+0x116>
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <__ieee754_pow+0x274>)
 8005f5e:	429e      	cmp	r6, r3
 8005f60:	dc00      	bgt.n	8005f64 <__ieee754_pow+0x220>
 8005f62:	e0ef      	b.n	8006144 <__ieee754_pow+0x400>
 8005f64:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <__ieee754_pow+0x278>)
 8005f66:	429e      	cmp	r6, r3
 8005f68:	dd09      	ble.n	8005f7e <__ieee754_pow+0x23a>
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <__ieee754_pow+0x264>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	dc0c      	bgt.n	8005f8a <__ieee754_pow+0x246>
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da0c      	bge.n	8005f90 <__ieee754_pow+0x24c>
 8005f76:	2000      	movs	r0, #0
 8005f78:	f000 fcce 	bl	8006918 <__math_oflow>
 8005f7c:	e708      	b.n	8005d90 <__ieee754_pow+0x4c>
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <__ieee754_pow+0x27c>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	ddf5      	ble.n	8005f70 <__ieee754_pow+0x22c>
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <__ieee754_pow+0x26c>)
 8005f86:	429c      	cmp	r4, r3
 8005f88:	dd1c      	ble.n	8005fc4 <__ieee754_pow+0x280>
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	dcf2      	bgt.n	8005f76 <__ieee754_pow+0x232>
 8005f90:	2000      	movs	r0, #0
 8005f92:	f000 fcba 	bl	800690a <__math_uflow>
 8005f96:	e6fb      	b.n	8005d90 <__ieee754_pow+0x4c>
 8005f98:	fff00000 	.word	0xfff00000
 8005f9c:	7ff00000 	.word	0x7ff00000
 8005fa0:	c0100000 	.word	0xc0100000
 8005fa4:	433fffff 	.word	0x433fffff
 8005fa8:	3fefffff 	.word	0x3fefffff
 8005fac:	fffffc01 	.word	0xfffffc01
 8005fb0:	3ff00000 	.word	0x3ff00000
 8005fb4:	3fe00000 	.word	0x3fe00000
 8005fb8:	41e00000 	.word	0x41e00000
 8005fbc:	43f00000 	.word	0x43f00000
 8005fc0:	3feffffe 	.word	0x3feffffe
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	9800      	ldr	r0, [sp, #0]
 8005fc8:	9901      	ldr	r1, [sp, #4]
 8005fca:	4b52      	ldr	r3, [pc, #328]	; (8006114 <__ieee754_pow+0x3d0>)
 8005fcc:	f7fb fb1a 	bl	8001604 <__aeabi_dsub>
 8005fd0:	22c0      	movs	r2, #192	; 0xc0
 8005fd2:	4b51      	ldr	r3, [pc, #324]	; (8006118 <__ieee754_pow+0x3d4>)
 8005fd4:	05d2      	lsls	r2, r2, #23
 8005fd6:	0004      	movs	r4, r0
 8005fd8:	000d      	movs	r5, r1
 8005fda:	f7fb f8a7 	bl	800112c <__aeabi_dmul>
 8005fde:	4a4f      	ldr	r2, [pc, #316]	; (800611c <__ieee754_pow+0x3d8>)
 8005fe0:	9000      	str	r0, [sp, #0]
 8005fe2:	9101      	str	r1, [sp, #4]
 8005fe4:	4b4e      	ldr	r3, [pc, #312]	; (8006120 <__ieee754_pow+0x3dc>)
 8005fe6:	0020      	movs	r0, r4
 8005fe8:	0029      	movs	r1, r5
 8005fea:	f7fb f89f 	bl	800112c <__aeabi_dmul>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	9004      	str	r0, [sp, #16]
 8005ff2:	9105      	str	r1, [sp, #20]
 8005ff4:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <__ieee754_pow+0x3e0>)
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	0029      	movs	r1, r5
 8005ffa:	f7fb f897 	bl	800112c <__aeabi_dmul>
 8005ffe:	0002      	movs	r2, r0
 8006000:	000b      	movs	r3, r1
 8006002:	4849      	ldr	r0, [pc, #292]	; (8006128 <__ieee754_pow+0x3e4>)
 8006004:	4949      	ldr	r1, [pc, #292]	; (800612c <__ieee754_pow+0x3e8>)
 8006006:	f7fb fafd 	bl	8001604 <__aeabi_dsub>
 800600a:	0022      	movs	r2, r4
 800600c:	002b      	movs	r3, r5
 800600e:	f7fb f88d 	bl	800112c <__aeabi_dmul>
 8006012:	0002      	movs	r2, r0
 8006014:	000b      	movs	r3, r1
 8006016:	2000      	movs	r0, #0
 8006018:	4945      	ldr	r1, [pc, #276]	; (8006130 <__ieee754_pow+0x3ec>)
 800601a:	f7fb faf3 	bl	8001604 <__aeabi_dsub>
 800601e:	0022      	movs	r2, r4
 8006020:	0006      	movs	r6, r0
 8006022:	000f      	movs	r7, r1
 8006024:	002b      	movs	r3, r5
 8006026:	0020      	movs	r0, r4
 8006028:	0029      	movs	r1, r5
 800602a:	f7fb f87f 	bl	800112c <__aeabi_dmul>
 800602e:	0002      	movs	r2, r0
 8006030:	000b      	movs	r3, r1
 8006032:	0030      	movs	r0, r6
 8006034:	0039      	movs	r1, r7
 8006036:	f7fb f879 	bl	800112c <__aeabi_dmul>
 800603a:	4a3e      	ldr	r2, [pc, #248]	; (8006134 <__ieee754_pow+0x3f0>)
 800603c:	4b36      	ldr	r3, [pc, #216]	; (8006118 <__ieee754_pow+0x3d4>)
 800603e:	f7fb f875 	bl	800112c <__aeabi_dmul>
 8006042:	0002      	movs	r2, r0
 8006044:	000b      	movs	r3, r1
 8006046:	9804      	ldr	r0, [sp, #16]
 8006048:	9905      	ldr	r1, [sp, #20]
 800604a:	f7fb fadb 	bl	8001604 <__aeabi_dsub>
 800604e:	0002      	movs	r2, r0
 8006050:	000b      	movs	r3, r1
 8006052:	0004      	movs	r4, r0
 8006054:	000d      	movs	r5, r1
 8006056:	9800      	ldr	r0, [sp, #0]
 8006058:	9901      	ldr	r1, [sp, #4]
 800605a:	f7fa f929 	bl	80002b0 <__aeabi_dadd>
 800605e:	9a00      	ldr	r2, [sp, #0]
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	2000      	movs	r0, #0
 8006064:	000f      	movs	r7, r1
 8006066:	0006      	movs	r6, r0
 8006068:	f7fb facc 	bl	8001604 <__aeabi_dsub>
 800606c:	0002      	movs	r2, r0
 800606e:	000b      	movs	r3, r1
 8006070:	0020      	movs	r0, r4
 8006072:	0029      	movs	r1, r5
 8006074:	f7fb fac6 	bl	8001604 <__aeabi_dsub>
 8006078:	9b06      	ldr	r3, [sp, #24]
 800607a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800607c:	3b01      	subs	r3, #1
 800607e:	9004      	str	r0, [sp, #16]
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	d000      	beq.n	8006088 <__ieee754_pow+0x344>
 8006086:	e1db      	b.n	8006440 <__ieee754_pow+0x6fc>
 8006088:	2300      	movs	r3, #0
 800608a:	4c2b      	ldr	r4, [pc, #172]	; (8006138 <__ieee754_pow+0x3f4>)
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	9401      	str	r4, [sp, #4]
 8006090:	9c02      	ldr	r4, [sp, #8]
 8006092:	9d03      	ldr	r5, [sp, #12]
 8006094:	9802      	ldr	r0, [sp, #8]
 8006096:	9903      	ldr	r1, [sp, #12]
 8006098:	2400      	movs	r4, #0
 800609a:	002b      	movs	r3, r5
 800609c:	0022      	movs	r2, r4
 800609e:	f7fb fab1 	bl	8001604 <__aeabi_dsub>
 80060a2:	0032      	movs	r2, r6
 80060a4:	003b      	movs	r3, r7
 80060a6:	f7fb f841 	bl	800112c <__aeabi_dmul>
 80060aa:	9a02      	ldr	r2, [sp, #8]
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	9006      	str	r0, [sp, #24]
 80060b0:	9107      	str	r1, [sp, #28]
 80060b2:	9804      	ldr	r0, [sp, #16]
 80060b4:	9905      	ldr	r1, [sp, #20]
 80060b6:	f7fb f839 	bl	800112c <__aeabi_dmul>
 80060ba:	0002      	movs	r2, r0
 80060bc:	000b      	movs	r3, r1
 80060be:	9806      	ldr	r0, [sp, #24]
 80060c0:	9907      	ldr	r1, [sp, #28]
 80060c2:	f7fa f8f5 	bl	80002b0 <__aeabi_dadd>
 80060c6:	0022      	movs	r2, r4
 80060c8:	002b      	movs	r3, r5
 80060ca:	9004      	str	r0, [sp, #16]
 80060cc:	9105      	str	r1, [sp, #20]
 80060ce:	0030      	movs	r0, r6
 80060d0:	0039      	movs	r1, r7
 80060d2:	f7fb f82b 	bl	800112c <__aeabi_dmul>
 80060d6:	0006      	movs	r6, r0
 80060d8:	000f      	movs	r7, r1
 80060da:	000b      	movs	r3, r1
 80060dc:	0002      	movs	r2, r0
 80060de:	9804      	ldr	r0, [sp, #16]
 80060e0:	9905      	ldr	r1, [sp, #20]
 80060e2:	9606      	str	r6, [sp, #24]
 80060e4:	9707      	str	r7, [sp, #28]
 80060e6:	f7fa f8e3 	bl	80002b0 <__aeabi_dadd>
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <__ieee754_pow+0x3f8>)
 80060ec:	0005      	movs	r5, r0
 80060ee:	000c      	movs	r4, r1
 80060f0:	9108      	str	r1, [sp, #32]
 80060f2:	4299      	cmp	r1, r3
 80060f4:	dc00      	bgt.n	80060f8 <__ieee754_pow+0x3b4>
 80060f6:	e2d6      	b.n	80066a6 <__ieee754_pow+0x962>
 80060f8:	4b11      	ldr	r3, [pc, #68]	; (8006140 <__ieee754_pow+0x3fc>)
 80060fa:	18cb      	adds	r3, r1, r3
 80060fc:	4303      	orrs	r3, r0
 80060fe:	d100      	bne.n	8006102 <__ieee754_pow+0x3be>
 8006100:	e1d8      	b.n	80064b4 <__ieee754_pow+0x770>
 8006102:	9800      	ldr	r0, [sp, #0]
 8006104:	9901      	ldr	r1, [sp, #4]
 8006106:	2300      	movs	r3, #0
 8006108:	2200      	movs	r2, #0
 800610a:	f7fa f8a9 	bl	8000260 <__aeabi_dcmplt>
 800610e:	1e43      	subs	r3, r0, #1
 8006110:	4198      	sbcs	r0, r3
 8006112:	e731      	b.n	8005f78 <__ieee754_pow+0x234>
 8006114:	3ff00000 	.word	0x3ff00000
 8006118:	3ff71547 	.word	0x3ff71547
 800611c:	f85ddf44 	.word	0xf85ddf44
 8006120:	3e54ae0b 	.word	0x3e54ae0b
 8006124:	3fd00000 	.word	0x3fd00000
 8006128:	55555555 	.word	0x55555555
 800612c:	3fd55555 	.word	0x3fd55555
 8006130:	3fe00000 	.word	0x3fe00000
 8006134:	652b82fe 	.word	0x652b82fe
 8006138:	bff00000 	.word	0xbff00000
 800613c:	408fffff 	.word	0x408fffff
 8006140:	bf700000 	.word	0xbf700000
 8006144:	4bc0      	ldr	r3, [pc, #768]	; (8006448 <__ieee754_pow+0x704>)
 8006146:	2200      	movs	r2, #0
 8006148:	422b      	tst	r3, r5
 800614a:	d10a      	bne.n	8006162 <__ieee754_pow+0x41e>
 800614c:	9800      	ldr	r0, [sp, #0]
 800614e:	9901      	ldr	r1, [sp, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	4bbe      	ldr	r3, [pc, #760]	; (800644c <__ieee754_pow+0x708>)
 8006154:	f7fa ffea 	bl	800112c <__aeabi_dmul>
 8006158:	2235      	movs	r2, #53	; 0x35
 800615a:	9000      	str	r0, [sp, #0]
 800615c:	9101      	str	r1, [sp, #4]
 800615e:	9c01      	ldr	r4, [sp, #4]
 8006160:	4252      	negs	r2, r2
 8006162:	49bb      	ldr	r1, [pc, #748]	; (8006450 <__ieee754_pow+0x70c>)
 8006164:	1523      	asrs	r3, r4, #20
 8006166:	185b      	adds	r3, r3, r1
 8006168:	189b      	adds	r3, r3, r2
 800616a:	0324      	lsls	r4, r4, #12
 800616c:	4db9      	ldr	r5, [pc, #740]	; (8006454 <__ieee754_pow+0x710>)
 800616e:	930d      	str	r3, [sp, #52]	; 0x34
 8006170:	4bb9      	ldr	r3, [pc, #740]	; (8006458 <__ieee754_pow+0x714>)
 8006172:	0b22      	lsrs	r2, r4, #12
 8006174:	4315      	orrs	r5, r2
 8006176:	2400      	movs	r4, #0
 8006178:	429a      	cmp	r2, r3
 800617a:	dd09      	ble.n	8006190 <__ieee754_pow+0x44c>
 800617c:	4bb7      	ldr	r3, [pc, #732]	; (800645c <__ieee754_pow+0x718>)
 800617e:	3401      	adds	r4, #1
 8006180:	429a      	cmp	r2, r3
 8006182:	dd05      	ble.n	8006190 <__ieee754_pow+0x44c>
 8006184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006186:	191b      	adds	r3, r3, r4
 8006188:	2400      	movs	r4, #0
 800618a:	930d      	str	r3, [sp, #52]	; 0x34
 800618c:	4bb4      	ldr	r3, [pc, #720]	; (8006460 <__ieee754_pow+0x71c>)
 800618e:	18ed      	adds	r5, r5, r3
 8006190:	00e3      	lsls	r3, r4, #3
 8006192:	930f      	str	r3, [sp, #60]	; 0x3c
 8006194:	4bb3      	ldr	r3, [pc, #716]	; (8006464 <__ieee754_pow+0x720>)
 8006196:	00e2      	lsls	r2, r4, #3
 8006198:	189b      	adds	r3, r3, r2
 800619a:	9800      	ldr	r0, [sp, #0]
 800619c:	9901      	ldr	r1, [sp, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	0029      	movs	r1, r5
 80061a4:	0006      	movs	r6, r0
 80061a6:	920a      	str	r2, [sp, #40]	; 0x28
 80061a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80061aa:	f7fb fa2b 	bl	8001604 <__aeabi_dsub>
 80061ae:	0032      	movs	r2, r6
 80061b0:	002b      	movs	r3, r5
 80061b2:	9010      	str	r0, [sp, #64]	; 0x40
 80061b4:	9111      	str	r1, [sp, #68]	; 0x44
 80061b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ba:	f7fa f879 	bl	80002b0 <__aeabi_dadd>
 80061be:	0002      	movs	r2, r0
 80061c0:	000b      	movs	r3, r1
 80061c2:	2000      	movs	r0, #0
 80061c4:	49a3      	ldr	r1, [pc, #652]	; (8006454 <__ieee754_pow+0x710>)
 80061c6:	f7fa fbaf 	bl	8000928 <__aeabi_ddiv>
 80061ca:	0002      	movs	r2, r0
 80061cc:	000b      	movs	r3, r1
 80061ce:	9012      	str	r0, [sp, #72]	; 0x48
 80061d0:	9113      	str	r1, [sp, #76]	; 0x4c
 80061d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80061d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80061d6:	f7fa ffa9 	bl	800112c <__aeabi_dmul>
 80061da:	9008      	str	r0, [sp, #32]
 80061dc:	9109      	str	r1, [sp, #36]	; 0x24
 80061de:	9a08      	ldr	r2, [sp, #32]
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	9204      	str	r2, [sp, #16]
 80061e6:	9305      	str	r3, [sp, #20]
 80061e8:	2300      	movs	r3, #0
 80061ea:	002f      	movs	r7, r5
 80061ec:	0589      	lsls	r1, r1, #22
 80061ee:	106d      	asrs	r5, r5, #1
 80061f0:	430d      	orrs	r5, r1
 80061f2:	2180      	movs	r1, #128	; 0x80
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	9a04      	ldr	r2, [sp, #16]
 80061f8:	9b05      	ldr	r3, [sp, #20]
 80061fa:	9200      	str	r2, [sp, #0]
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	0309      	lsls	r1, r1, #12
 8006202:	186d      	adds	r5, r5, r1
 8006204:	04a1      	lsls	r1, r4, #18
 8006206:	186b      	adds	r3, r5, r1
 8006208:	9800      	ldr	r0, [sp, #0]
 800620a:	9901      	ldr	r1, [sp, #4]
 800620c:	0014      	movs	r4, r2
 800620e:	001d      	movs	r5, r3
 8006210:	f7fa ff8c 	bl	800112c <__aeabi_dmul>
 8006214:	0002      	movs	r2, r0
 8006216:	000b      	movs	r3, r1
 8006218:	9810      	ldr	r0, [sp, #64]	; 0x40
 800621a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800621c:	f7fb f9f2 	bl	8001604 <__aeabi_dsub>
 8006220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006224:	9010      	str	r0, [sp, #64]	; 0x40
 8006226:	9111      	str	r1, [sp, #68]	; 0x44
 8006228:	0020      	movs	r0, r4
 800622a:	0029      	movs	r1, r5
 800622c:	f7fb f9ea 	bl	8001604 <__aeabi_dsub>
 8006230:	0002      	movs	r2, r0
 8006232:	000b      	movs	r3, r1
 8006234:	0030      	movs	r0, r6
 8006236:	0039      	movs	r1, r7
 8006238:	f7fb f9e4 	bl	8001604 <__aeabi_dsub>
 800623c:	9a00      	ldr	r2, [sp, #0]
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	f7fa ff74 	bl	800112c <__aeabi_dmul>
 8006244:	0002      	movs	r2, r0
 8006246:	000b      	movs	r3, r1
 8006248:	9810      	ldr	r0, [sp, #64]	; 0x40
 800624a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800624c:	f7fb f9da 	bl	8001604 <__aeabi_dsub>
 8006250:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006252:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006254:	f7fa ff6a 	bl	800112c <__aeabi_dmul>
 8006258:	9a08      	ldr	r2, [sp, #32]
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	900a      	str	r0, [sp, #40]	; 0x28
 800625e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006260:	0010      	movs	r0, r2
 8006262:	0019      	movs	r1, r3
 8006264:	f7fa ff62 	bl	800112c <__aeabi_dmul>
 8006268:	0006      	movs	r6, r0
 800626a:	000f      	movs	r7, r1
 800626c:	4a7e      	ldr	r2, [pc, #504]	; (8006468 <__ieee754_pow+0x724>)
 800626e:	4b7f      	ldr	r3, [pc, #508]	; (800646c <__ieee754_pow+0x728>)
 8006270:	f7fa ff5c 	bl	800112c <__aeabi_dmul>
 8006274:	4a7e      	ldr	r2, [pc, #504]	; (8006470 <__ieee754_pow+0x72c>)
 8006276:	4b7f      	ldr	r3, [pc, #508]	; (8006474 <__ieee754_pow+0x730>)
 8006278:	f7fa f81a 	bl	80002b0 <__aeabi_dadd>
 800627c:	0032      	movs	r2, r6
 800627e:	003b      	movs	r3, r7
 8006280:	f7fa ff54 	bl	800112c <__aeabi_dmul>
 8006284:	4a7c      	ldr	r2, [pc, #496]	; (8006478 <__ieee754_pow+0x734>)
 8006286:	4b7d      	ldr	r3, [pc, #500]	; (800647c <__ieee754_pow+0x738>)
 8006288:	f7fa f812 	bl	80002b0 <__aeabi_dadd>
 800628c:	0032      	movs	r2, r6
 800628e:	003b      	movs	r3, r7
 8006290:	f7fa ff4c 	bl	800112c <__aeabi_dmul>
 8006294:	4a7a      	ldr	r2, [pc, #488]	; (8006480 <__ieee754_pow+0x73c>)
 8006296:	4b7b      	ldr	r3, [pc, #492]	; (8006484 <__ieee754_pow+0x740>)
 8006298:	f7fa f80a 	bl	80002b0 <__aeabi_dadd>
 800629c:	0032      	movs	r2, r6
 800629e:	003b      	movs	r3, r7
 80062a0:	f7fa ff44 	bl	800112c <__aeabi_dmul>
 80062a4:	4a78      	ldr	r2, [pc, #480]	; (8006488 <__ieee754_pow+0x744>)
 80062a6:	4b79      	ldr	r3, [pc, #484]	; (800648c <__ieee754_pow+0x748>)
 80062a8:	f7fa f802 	bl	80002b0 <__aeabi_dadd>
 80062ac:	0032      	movs	r2, r6
 80062ae:	003b      	movs	r3, r7
 80062b0:	f7fa ff3c 	bl	800112c <__aeabi_dmul>
 80062b4:	4a76      	ldr	r2, [pc, #472]	; (8006490 <__ieee754_pow+0x74c>)
 80062b6:	4b77      	ldr	r3, [pc, #476]	; (8006494 <__ieee754_pow+0x750>)
 80062b8:	f7f9 fffa 	bl	80002b0 <__aeabi_dadd>
 80062bc:	0032      	movs	r2, r6
 80062be:	0004      	movs	r4, r0
 80062c0:	000d      	movs	r5, r1
 80062c2:	003b      	movs	r3, r7
 80062c4:	0030      	movs	r0, r6
 80062c6:	0039      	movs	r1, r7
 80062c8:	f7fa ff30 	bl	800112c <__aeabi_dmul>
 80062cc:	0002      	movs	r2, r0
 80062ce:	000b      	movs	r3, r1
 80062d0:	0020      	movs	r0, r4
 80062d2:	0029      	movs	r1, r5
 80062d4:	f7fa ff2a 	bl	800112c <__aeabi_dmul>
 80062d8:	9a00      	ldr	r2, [sp, #0]
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	0004      	movs	r4, r0
 80062de:	000d      	movs	r5, r1
 80062e0:	9808      	ldr	r0, [sp, #32]
 80062e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062e4:	f7f9 ffe4 	bl	80002b0 <__aeabi_dadd>
 80062e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ec:	f7fa ff1e 	bl	800112c <__aeabi_dmul>
 80062f0:	0022      	movs	r2, r4
 80062f2:	002b      	movs	r3, r5
 80062f4:	f7f9 ffdc 	bl	80002b0 <__aeabi_dadd>
 80062f8:	9a00      	ldr	r2, [sp, #0]
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	9010      	str	r0, [sp, #64]	; 0x40
 80062fe:	9111      	str	r1, [sp, #68]	; 0x44
 8006300:	0010      	movs	r0, r2
 8006302:	0019      	movs	r1, r3
 8006304:	f7fa ff12 	bl	800112c <__aeabi_dmul>
 8006308:	2200      	movs	r2, #0
 800630a:	4b63      	ldr	r3, [pc, #396]	; (8006498 <__ieee754_pow+0x754>)
 800630c:	0004      	movs	r4, r0
 800630e:	000d      	movs	r5, r1
 8006310:	f7f9 ffce 	bl	80002b0 <__aeabi_dadd>
 8006314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006318:	f7f9 ffca 	bl	80002b0 <__aeabi_dadd>
 800631c:	2600      	movs	r6, #0
 800631e:	000f      	movs	r7, r1
 8006320:	0032      	movs	r2, r6
 8006322:	000b      	movs	r3, r1
 8006324:	9800      	ldr	r0, [sp, #0]
 8006326:	9901      	ldr	r1, [sp, #4]
 8006328:	f7fa ff00 	bl	800112c <__aeabi_dmul>
 800632c:	2200      	movs	r2, #0
 800632e:	9000      	str	r0, [sp, #0]
 8006330:	9101      	str	r1, [sp, #4]
 8006332:	4b59      	ldr	r3, [pc, #356]	; (8006498 <__ieee754_pow+0x754>)
 8006334:	0030      	movs	r0, r6
 8006336:	0039      	movs	r1, r7
 8006338:	f7fb f964 	bl	8001604 <__aeabi_dsub>
 800633c:	0022      	movs	r2, r4
 800633e:	002b      	movs	r3, r5
 8006340:	f7fb f960 	bl	8001604 <__aeabi_dsub>
 8006344:	0002      	movs	r2, r0
 8006346:	000b      	movs	r3, r1
 8006348:	9810      	ldr	r0, [sp, #64]	; 0x40
 800634a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800634c:	f7fb f95a 	bl	8001604 <__aeabi_dsub>
 8006350:	9a08      	ldr	r2, [sp, #32]
 8006352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006354:	f7fa feea 	bl	800112c <__aeabi_dmul>
 8006358:	0032      	movs	r2, r6
 800635a:	0004      	movs	r4, r0
 800635c:	000d      	movs	r5, r1
 800635e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006362:	003b      	movs	r3, r7
 8006364:	f7fa fee2 	bl	800112c <__aeabi_dmul>
 8006368:	0002      	movs	r2, r0
 800636a:	000b      	movs	r3, r1
 800636c:	0020      	movs	r0, r4
 800636e:	0029      	movs	r1, r5
 8006370:	f7f9 ff9e 	bl	80002b0 <__aeabi_dadd>
 8006374:	0004      	movs	r4, r0
 8006376:	000d      	movs	r5, r1
 8006378:	0002      	movs	r2, r0
 800637a:	000b      	movs	r3, r1
 800637c:	9800      	ldr	r0, [sp, #0]
 800637e:	9901      	ldr	r1, [sp, #4]
 8006380:	f7f9 ff96 	bl	80002b0 <__aeabi_dadd>
 8006384:	2600      	movs	r6, #0
 8006386:	22e0      	movs	r2, #224	; 0xe0
 8006388:	4b44      	ldr	r3, [pc, #272]	; (800649c <__ieee754_pow+0x758>)
 800638a:	0612      	lsls	r2, r2, #24
 800638c:	0030      	movs	r0, r6
 800638e:	000f      	movs	r7, r1
 8006390:	f7fa fecc 	bl	800112c <__aeabi_dmul>
 8006394:	9008      	str	r0, [sp, #32]
 8006396:	9109      	str	r1, [sp, #36]	; 0x24
 8006398:	9a00      	ldr	r2, [sp, #0]
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	0039      	movs	r1, r7
 800639e:	0030      	movs	r0, r6
 80063a0:	f7fb f930 	bl	8001604 <__aeabi_dsub>
 80063a4:	0002      	movs	r2, r0
 80063a6:	000b      	movs	r3, r1
 80063a8:	0020      	movs	r0, r4
 80063aa:	0029      	movs	r1, r5
 80063ac:	f7fb f92a 	bl	8001604 <__aeabi_dsub>
 80063b0:	4a3b      	ldr	r2, [pc, #236]	; (80064a0 <__ieee754_pow+0x75c>)
 80063b2:	4b3a      	ldr	r3, [pc, #232]	; (800649c <__ieee754_pow+0x758>)
 80063b4:	f7fa feba 	bl	800112c <__aeabi_dmul>
 80063b8:	4a3a      	ldr	r2, [pc, #232]	; (80064a4 <__ieee754_pow+0x760>)
 80063ba:	0004      	movs	r4, r0
 80063bc:	000d      	movs	r5, r1
 80063be:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <__ieee754_pow+0x764>)
 80063c0:	0039      	movs	r1, r7
 80063c2:	0030      	movs	r0, r6
 80063c4:	f7fa feb2 	bl	800112c <__aeabi_dmul>
 80063c8:	0002      	movs	r2, r0
 80063ca:	000b      	movs	r3, r1
 80063cc:	0020      	movs	r0, r4
 80063ce:	0029      	movs	r1, r5
 80063d0:	f7f9 ff6e 	bl	80002b0 <__aeabi_dadd>
 80063d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063d6:	4b35      	ldr	r3, [pc, #212]	; (80064ac <__ieee754_pow+0x768>)
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f7f9 ff67 	bl	80002b0 <__aeabi_dadd>
 80063e2:	900a      	str	r0, [sp, #40]	; 0x28
 80063e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80063e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063e8:	f7fb fcf2 	bl	8001dd0 <__aeabi_i2d>
 80063ec:	0004      	movs	r4, r0
 80063ee:	000d      	movs	r5, r1
 80063f0:	9808      	ldr	r0, [sp, #32]
 80063f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <__ieee754_pow+0x76c>)
 80063f8:	189b      	adds	r3, r3, r2
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	9200      	str	r2, [sp, #0]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006406:	f7f9 ff53 	bl	80002b0 <__aeabi_dadd>
 800640a:	9a00      	ldr	r2, [sp, #0]
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	f7f9 ff4f 	bl	80002b0 <__aeabi_dadd>
 8006412:	0022      	movs	r2, r4
 8006414:	002b      	movs	r3, r5
 8006416:	f7f9 ff4b 	bl	80002b0 <__aeabi_dadd>
 800641a:	0022      	movs	r2, r4
 800641c:	002b      	movs	r3, r5
 800641e:	0030      	movs	r0, r6
 8006420:	000f      	movs	r7, r1
 8006422:	f7fb f8ef 	bl	8001604 <__aeabi_dsub>
 8006426:	9a00      	ldr	r2, [sp, #0]
 8006428:	9b01      	ldr	r3, [sp, #4]
 800642a:	f7fb f8eb 	bl	8001604 <__aeabi_dsub>
 800642e:	9a08      	ldr	r2, [sp, #32]
 8006430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006432:	f7fb f8e7 	bl	8001604 <__aeabi_dsub>
 8006436:	0002      	movs	r2, r0
 8006438:	000b      	movs	r3, r1
 800643a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800643c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800643e:	e619      	b.n	8006074 <__ieee754_pow+0x330>
 8006440:	2300      	movs	r3, #0
 8006442:	4c04      	ldr	r4, [pc, #16]	; (8006454 <__ieee754_pow+0x710>)
 8006444:	e622      	b.n	800608c <__ieee754_pow+0x348>
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	7ff00000 	.word	0x7ff00000
 800644c:	43400000 	.word	0x43400000
 8006450:	fffffc01 	.word	0xfffffc01
 8006454:	3ff00000 	.word	0x3ff00000
 8006458:	0003988e 	.word	0x0003988e
 800645c:	000bb679 	.word	0x000bb679
 8006460:	fff00000 	.word	0xfff00000
 8006464:	08006b90 	.word	0x08006b90
 8006468:	4a454eef 	.word	0x4a454eef
 800646c:	3fca7e28 	.word	0x3fca7e28
 8006470:	93c9db65 	.word	0x93c9db65
 8006474:	3fcd864a 	.word	0x3fcd864a
 8006478:	a91d4101 	.word	0xa91d4101
 800647c:	3fd17460 	.word	0x3fd17460
 8006480:	518f264d 	.word	0x518f264d
 8006484:	3fd55555 	.word	0x3fd55555
 8006488:	db6fabff 	.word	0xdb6fabff
 800648c:	3fdb6db6 	.word	0x3fdb6db6
 8006490:	33333303 	.word	0x33333303
 8006494:	3fe33333 	.word	0x3fe33333
 8006498:	40080000 	.word	0x40080000
 800649c:	3feec709 	.word	0x3feec709
 80064a0:	dc3a03fd 	.word	0xdc3a03fd
 80064a4:	145b01f5 	.word	0x145b01f5
 80064a8:	be3e2fe0 	.word	0xbe3e2fe0
 80064ac:	08006bb0 	.word	0x08006bb0
 80064b0:	08006ba0 	.word	0x08006ba0
 80064b4:	4a90      	ldr	r2, [pc, #576]	; (80066f8 <__ieee754_pow+0x9b4>)
 80064b6:	4b91      	ldr	r3, [pc, #580]	; (80066fc <__ieee754_pow+0x9b8>)
 80064b8:	9804      	ldr	r0, [sp, #16]
 80064ba:	9905      	ldr	r1, [sp, #20]
 80064bc:	f7f9 fef8 	bl	80002b0 <__aeabi_dadd>
 80064c0:	0032      	movs	r2, r6
 80064c2:	9002      	str	r0, [sp, #8]
 80064c4:	9103      	str	r1, [sp, #12]
 80064c6:	003b      	movs	r3, r7
 80064c8:	0028      	movs	r0, r5
 80064ca:	0021      	movs	r1, r4
 80064cc:	f7fb f89a 	bl	8001604 <__aeabi_dsub>
 80064d0:	0002      	movs	r2, r0
 80064d2:	000b      	movs	r3, r1
 80064d4:	9802      	ldr	r0, [sp, #8]
 80064d6:	9903      	ldr	r1, [sp, #12]
 80064d8:	f7f9 fed6 	bl	8000288 <__aeabi_dcmpgt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d000      	beq.n	80064e2 <__ieee754_pow+0x79e>
 80064e0:	e60f      	b.n	8006102 <__ieee754_pow+0x3be>
 80064e2:	2100      	movs	r1, #0
 80064e4:	4a86      	ldr	r2, [pc, #536]	; (8006700 <__ieee754_pow+0x9bc>)
 80064e6:	0063      	lsls	r3, r4, #1
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	9102      	str	r1, [sp, #8]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	dd25      	ble.n	800653c <__ieee754_pow+0x7f8>
 80064f0:	4a84      	ldr	r2, [pc, #528]	; (8006704 <__ieee754_pow+0x9c0>)
 80064f2:	151b      	asrs	r3, r3, #20
 80064f4:	189b      	adds	r3, r3, r2
 80064f6:	2280      	movs	r2, #128	; 0x80
 80064f8:	0352      	lsls	r2, r2, #13
 80064fa:	4694      	mov	ip, r2
 80064fc:	411a      	asrs	r2, r3
 80064fe:	1914      	adds	r4, r2, r4
 8006500:	4b81      	ldr	r3, [pc, #516]	; (8006708 <__ieee754_pow+0x9c4>)
 8006502:	0060      	lsls	r0, r4, #1
 8006504:	4d81      	ldr	r5, [pc, #516]	; (800670c <__ieee754_pow+0x9c8>)
 8006506:	0d40      	lsrs	r0, r0, #21
 8006508:	18c0      	adds	r0, r0, r3
 800650a:	4105      	asrs	r5, r0
 800650c:	0021      	movs	r1, r4
 800650e:	43a9      	bics	r1, r5
 8006510:	000b      	movs	r3, r1
 8006512:	4661      	mov	r1, ip
 8006514:	0324      	lsls	r4, r4, #12
 8006516:	0b24      	lsrs	r4, r4, #12
 8006518:	4321      	orrs	r1, r4
 800651a:	2414      	movs	r4, #20
 800651c:	1a20      	subs	r0, r4, r0
 800651e:	4101      	asrs	r1, r0
 8006520:	9102      	str	r1, [sp, #8]
 8006522:	9908      	ldr	r1, [sp, #32]
 8006524:	2200      	movs	r2, #0
 8006526:	2900      	cmp	r1, #0
 8006528:	da02      	bge.n	8006530 <__ieee754_pow+0x7ec>
 800652a:	9902      	ldr	r1, [sp, #8]
 800652c:	4249      	negs	r1, r1
 800652e:	9102      	str	r1, [sp, #8]
 8006530:	0030      	movs	r0, r6
 8006532:	0039      	movs	r1, r7
 8006534:	f7fb f866 	bl	8001604 <__aeabi_dsub>
 8006538:	9006      	str	r0, [sp, #24]
 800653a:	9107      	str	r1, [sp, #28]
 800653c:	9a04      	ldr	r2, [sp, #16]
 800653e:	9b05      	ldr	r3, [sp, #20]
 8006540:	9806      	ldr	r0, [sp, #24]
 8006542:	9907      	ldr	r1, [sp, #28]
 8006544:	2600      	movs	r6, #0
 8006546:	f7f9 feb3 	bl	80002b0 <__aeabi_dadd>
 800654a:	2200      	movs	r2, #0
 800654c:	0030      	movs	r0, r6
 800654e:	4b70      	ldr	r3, [pc, #448]	; (8006710 <__ieee754_pow+0x9cc>)
 8006550:	000f      	movs	r7, r1
 8006552:	f7fa fdeb 	bl	800112c <__aeabi_dmul>
 8006556:	9a06      	ldr	r2, [sp, #24]
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	9008      	str	r0, [sp, #32]
 800655c:	9109      	str	r1, [sp, #36]	; 0x24
 800655e:	0030      	movs	r0, r6
 8006560:	0039      	movs	r1, r7
 8006562:	f7fb f84f 	bl	8001604 <__aeabi_dsub>
 8006566:	0002      	movs	r2, r0
 8006568:	000b      	movs	r3, r1
 800656a:	9804      	ldr	r0, [sp, #16]
 800656c:	9905      	ldr	r1, [sp, #20]
 800656e:	f7fb f849 	bl	8001604 <__aeabi_dsub>
 8006572:	4a68      	ldr	r2, [pc, #416]	; (8006714 <__ieee754_pow+0x9d0>)
 8006574:	4b68      	ldr	r3, [pc, #416]	; (8006718 <__ieee754_pow+0x9d4>)
 8006576:	f7fa fdd9 	bl	800112c <__aeabi_dmul>
 800657a:	4a68      	ldr	r2, [pc, #416]	; (800671c <__ieee754_pow+0x9d8>)
 800657c:	0004      	movs	r4, r0
 800657e:	000d      	movs	r5, r1
 8006580:	0030      	movs	r0, r6
 8006582:	0039      	movs	r1, r7
 8006584:	4b66      	ldr	r3, [pc, #408]	; (8006720 <__ieee754_pow+0x9dc>)
 8006586:	f7fa fdd1 	bl	800112c <__aeabi_dmul>
 800658a:	0002      	movs	r2, r0
 800658c:	000b      	movs	r3, r1
 800658e:	0020      	movs	r0, r4
 8006590:	0029      	movs	r1, r5
 8006592:	f7f9 fe8d 	bl	80002b0 <__aeabi_dadd>
 8006596:	0004      	movs	r4, r0
 8006598:	000d      	movs	r5, r1
 800659a:	0002      	movs	r2, r0
 800659c:	000b      	movs	r3, r1
 800659e:	9808      	ldr	r0, [sp, #32]
 80065a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065a2:	f7f9 fe85 	bl	80002b0 <__aeabi_dadd>
 80065a6:	9a08      	ldr	r2, [sp, #32]
 80065a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065aa:	0006      	movs	r6, r0
 80065ac:	000f      	movs	r7, r1
 80065ae:	f7fb f829 	bl	8001604 <__aeabi_dsub>
 80065b2:	0002      	movs	r2, r0
 80065b4:	000b      	movs	r3, r1
 80065b6:	0020      	movs	r0, r4
 80065b8:	0029      	movs	r1, r5
 80065ba:	f7fb f823 	bl	8001604 <__aeabi_dsub>
 80065be:	0032      	movs	r2, r6
 80065c0:	9004      	str	r0, [sp, #16]
 80065c2:	9105      	str	r1, [sp, #20]
 80065c4:	003b      	movs	r3, r7
 80065c6:	0030      	movs	r0, r6
 80065c8:	0039      	movs	r1, r7
 80065ca:	f7fa fdaf 	bl	800112c <__aeabi_dmul>
 80065ce:	0004      	movs	r4, r0
 80065d0:	000d      	movs	r5, r1
 80065d2:	4a54      	ldr	r2, [pc, #336]	; (8006724 <__ieee754_pow+0x9e0>)
 80065d4:	4b54      	ldr	r3, [pc, #336]	; (8006728 <__ieee754_pow+0x9e4>)
 80065d6:	f7fa fda9 	bl	800112c <__aeabi_dmul>
 80065da:	4a54      	ldr	r2, [pc, #336]	; (800672c <__ieee754_pow+0x9e8>)
 80065dc:	4b54      	ldr	r3, [pc, #336]	; (8006730 <__ieee754_pow+0x9ec>)
 80065de:	f7fb f811 	bl	8001604 <__aeabi_dsub>
 80065e2:	0022      	movs	r2, r4
 80065e4:	002b      	movs	r3, r5
 80065e6:	f7fa fda1 	bl	800112c <__aeabi_dmul>
 80065ea:	4a52      	ldr	r2, [pc, #328]	; (8006734 <__ieee754_pow+0x9f0>)
 80065ec:	4b52      	ldr	r3, [pc, #328]	; (8006738 <__ieee754_pow+0x9f4>)
 80065ee:	f7f9 fe5f 	bl	80002b0 <__aeabi_dadd>
 80065f2:	0022      	movs	r2, r4
 80065f4:	002b      	movs	r3, r5
 80065f6:	f7fa fd99 	bl	800112c <__aeabi_dmul>
 80065fa:	4a50      	ldr	r2, [pc, #320]	; (800673c <__ieee754_pow+0x9f8>)
 80065fc:	4b50      	ldr	r3, [pc, #320]	; (8006740 <__ieee754_pow+0x9fc>)
 80065fe:	f7fb f801 	bl	8001604 <__aeabi_dsub>
 8006602:	0022      	movs	r2, r4
 8006604:	002b      	movs	r3, r5
 8006606:	f7fa fd91 	bl	800112c <__aeabi_dmul>
 800660a:	4a4e      	ldr	r2, [pc, #312]	; (8006744 <__ieee754_pow+0xa00>)
 800660c:	4b4e      	ldr	r3, [pc, #312]	; (8006748 <__ieee754_pow+0xa04>)
 800660e:	f7f9 fe4f 	bl	80002b0 <__aeabi_dadd>
 8006612:	0022      	movs	r2, r4
 8006614:	002b      	movs	r3, r5
 8006616:	f7fa fd89 	bl	800112c <__aeabi_dmul>
 800661a:	0002      	movs	r2, r0
 800661c:	000b      	movs	r3, r1
 800661e:	0030      	movs	r0, r6
 8006620:	0039      	movs	r1, r7
 8006622:	f7fa ffef 	bl	8001604 <__aeabi_dsub>
 8006626:	0004      	movs	r4, r0
 8006628:	000d      	movs	r5, r1
 800662a:	0002      	movs	r2, r0
 800662c:	000b      	movs	r3, r1
 800662e:	0030      	movs	r0, r6
 8006630:	0039      	movs	r1, r7
 8006632:	f7fa fd7b 	bl	800112c <__aeabi_dmul>
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	9006      	str	r0, [sp, #24]
 800663a:	9107      	str	r1, [sp, #28]
 800663c:	2200      	movs	r2, #0
 800663e:	0020      	movs	r0, r4
 8006640:	0029      	movs	r1, r5
 8006642:	05db      	lsls	r3, r3, #23
 8006644:	f7fa ffde 	bl	8001604 <__aeabi_dsub>
 8006648:	0002      	movs	r2, r0
 800664a:	000b      	movs	r3, r1
 800664c:	9806      	ldr	r0, [sp, #24]
 800664e:	9907      	ldr	r1, [sp, #28]
 8006650:	f7fa f96a 	bl	8000928 <__aeabi_ddiv>
 8006654:	9a04      	ldr	r2, [sp, #16]
 8006656:	9b05      	ldr	r3, [sp, #20]
 8006658:	0004      	movs	r4, r0
 800665a:	000d      	movs	r5, r1
 800665c:	0030      	movs	r0, r6
 800665e:	0039      	movs	r1, r7
 8006660:	f7fa fd64 	bl	800112c <__aeabi_dmul>
 8006664:	9a04      	ldr	r2, [sp, #16]
 8006666:	9b05      	ldr	r3, [sp, #20]
 8006668:	f7f9 fe22 	bl	80002b0 <__aeabi_dadd>
 800666c:	0002      	movs	r2, r0
 800666e:	000b      	movs	r3, r1
 8006670:	0020      	movs	r0, r4
 8006672:	0029      	movs	r1, r5
 8006674:	f7fa ffc6 	bl	8001604 <__aeabi_dsub>
 8006678:	0032      	movs	r2, r6
 800667a:	003b      	movs	r3, r7
 800667c:	f7fa ffc2 	bl	8001604 <__aeabi_dsub>
 8006680:	0002      	movs	r2, r0
 8006682:	000b      	movs	r3, r1
 8006684:	2000      	movs	r0, #0
 8006686:	4931      	ldr	r1, [pc, #196]	; (800674c <__ieee754_pow+0xa08>)
 8006688:	f7fa ffbc 	bl	8001604 <__aeabi_dsub>
 800668c:	9b02      	ldr	r3, [sp, #8]
 800668e:	051b      	lsls	r3, r3, #20
 8006690:	185b      	adds	r3, r3, r1
 8006692:	151a      	asrs	r2, r3, #20
 8006694:	2a00      	cmp	r2, #0
 8006696:	dc25      	bgt.n	80066e4 <__ieee754_pow+0x9a0>
 8006698:	9a02      	ldr	r2, [sp, #8]
 800669a:	f000 f94f 	bl	800693c <scalbn>
 800669e:	9a00      	ldr	r2, [sp, #0]
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	f7ff fc33 	bl	8005f0c <__ieee754_pow+0x1c8>
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <__ieee754_pow+0xa0c>)
 80066a8:	004b      	lsls	r3, r1, #1
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	4293      	cmp	r3, r2
 80066ae:	dc00      	bgt.n	80066b2 <__ieee754_pow+0x96e>
 80066b0:	e717      	b.n	80064e2 <__ieee754_pow+0x79e>
 80066b2:	4b28      	ldr	r3, [pc, #160]	; (8006754 <__ieee754_pow+0xa10>)
 80066b4:	18cb      	adds	r3, r1, r3
 80066b6:	4303      	orrs	r3, r0
 80066b8:	d008      	beq.n	80066cc <__ieee754_pow+0x988>
 80066ba:	9800      	ldr	r0, [sp, #0]
 80066bc:	9901      	ldr	r1, [sp, #4]
 80066be:	2300      	movs	r3, #0
 80066c0:	2200      	movs	r2, #0
 80066c2:	f7f9 fdcd 	bl	8000260 <__aeabi_dcmplt>
 80066c6:	1e43      	subs	r3, r0, #1
 80066c8:	4198      	sbcs	r0, r3
 80066ca:	e462      	b.n	8005f92 <__ieee754_pow+0x24e>
 80066cc:	0032      	movs	r2, r6
 80066ce:	003b      	movs	r3, r7
 80066d0:	f7fa ff98 	bl	8001604 <__aeabi_dsub>
 80066d4:	9a04      	ldr	r2, [sp, #16]
 80066d6:	9b05      	ldr	r3, [sp, #20]
 80066d8:	f7f9 fde0 	bl	800029c <__aeabi_dcmpge>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d100      	bne.n	80066e2 <__ieee754_pow+0x99e>
 80066e0:	e6ff      	b.n	80064e2 <__ieee754_pow+0x79e>
 80066e2:	e7ea      	b.n	80066ba <__ieee754_pow+0x976>
 80066e4:	0019      	movs	r1, r3
 80066e6:	e7da      	b.n	800669e <__ieee754_pow+0x95a>
 80066e8:	2300      	movs	r3, #0
 80066ea:	4c18      	ldr	r4, [pc, #96]	; (800674c <__ieee754_pow+0xa08>)
 80066ec:	f7ff fbf1 	bl	8005ed2 <__ieee754_pow+0x18e>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2400      	movs	r4, #0
 80066f4:	f7ff fbed 	bl	8005ed2 <__ieee754_pow+0x18e>
 80066f8:	652b82fe 	.word	0x652b82fe
 80066fc:	3c971547 	.word	0x3c971547
 8006700:	3fe00000 	.word	0x3fe00000
 8006704:	fffffc02 	.word	0xfffffc02
 8006708:	fffffc01 	.word	0xfffffc01
 800670c:	000fffff 	.word	0x000fffff
 8006710:	3fe62e43 	.word	0x3fe62e43
 8006714:	fefa39ef 	.word	0xfefa39ef
 8006718:	3fe62e42 	.word	0x3fe62e42
 800671c:	0ca86c39 	.word	0x0ca86c39
 8006720:	be205c61 	.word	0xbe205c61
 8006724:	72bea4d0 	.word	0x72bea4d0
 8006728:	3e663769 	.word	0x3e663769
 800672c:	c5d26bf1 	.word	0xc5d26bf1
 8006730:	3ebbbd41 	.word	0x3ebbbd41
 8006734:	af25de2c 	.word	0xaf25de2c
 8006738:	3f11566a 	.word	0x3f11566a
 800673c:	16bebd93 	.word	0x16bebd93
 8006740:	3f66c16c 	.word	0x3f66c16c
 8006744:	5555553e 	.word	0x5555553e
 8006748:	3fc55555 	.word	0x3fc55555
 800674c:	3ff00000 	.word	0x3ff00000
 8006750:	4090cbff 	.word	0x4090cbff
 8006754:	3f6f3400 	.word	0x3f6f3400

08006758 <__ieee754_sqrt>:
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	000b      	movs	r3, r1
 800675c:	000c      	movs	r4, r1
 800675e:	4956      	ldr	r1, [pc, #344]	; (80068b8 <__ieee754_sqrt+0x160>)
 8006760:	0005      	movs	r5, r0
 8006762:	0002      	movs	r2, r0
 8006764:	0008      	movs	r0, r1
 8006766:	b085      	sub	sp, #20
 8006768:	4020      	ands	r0, r4
 800676a:	4288      	cmp	r0, r1
 800676c:	d10f      	bne.n	800678e <__ieee754_sqrt+0x36>
 800676e:	0028      	movs	r0, r5
 8006770:	0021      	movs	r1, r4
 8006772:	f7fa fcdb 	bl	800112c <__aeabi_dmul>
 8006776:	0002      	movs	r2, r0
 8006778:	000b      	movs	r3, r1
 800677a:	0028      	movs	r0, r5
 800677c:	0021      	movs	r1, r4
 800677e:	f7f9 fd97 	bl	80002b0 <__aeabi_dadd>
 8006782:	0005      	movs	r5, r0
 8006784:	000c      	movs	r4, r1
 8006786:	0028      	movs	r0, r5
 8006788:	0021      	movs	r1, r4
 800678a:	b005      	add	sp, #20
 800678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678e:	2c00      	cmp	r4, #0
 8006790:	dc10      	bgt.n	80067b4 <__ieee754_sqrt+0x5c>
 8006792:	0061      	lsls	r1, r4, #1
 8006794:	0849      	lsrs	r1, r1, #1
 8006796:	4329      	orrs	r1, r5
 8006798:	d0f5      	beq.n	8006786 <__ieee754_sqrt+0x2e>
 800679a:	2100      	movs	r1, #0
 800679c:	428c      	cmp	r4, r1
 800679e:	d100      	bne.n	80067a2 <__ieee754_sqrt+0x4a>
 80067a0:	e080      	b.n	80068a4 <__ieee754_sqrt+0x14c>
 80067a2:	0028      	movs	r0, r5
 80067a4:	0021      	movs	r1, r4
 80067a6:	f7fa ff2d 	bl	8001604 <__aeabi_dsub>
 80067aa:	0002      	movs	r2, r0
 80067ac:	000b      	movs	r3, r1
 80067ae:	f7fa f8bb 	bl	8000928 <__aeabi_ddiv>
 80067b2:	e7e6      	b.n	8006782 <__ieee754_sqrt+0x2a>
 80067b4:	1521      	asrs	r1, r4, #20
 80067b6:	d075      	beq.n	80068a4 <__ieee754_sqrt+0x14c>
 80067b8:	4840      	ldr	r0, [pc, #256]	; (80068bc <__ieee754_sqrt+0x164>)
 80067ba:	031b      	lsls	r3, r3, #12
 80067bc:	180c      	adds	r4, r1, r0
 80067be:	2080      	movs	r0, #128	; 0x80
 80067c0:	0b1b      	lsrs	r3, r3, #12
 80067c2:	0340      	lsls	r0, r0, #13
 80067c4:	4303      	orrs	r3, r0
 80067c6:	07c9      	lsls	r1, r1, #31
 80067c8:	d403      	bmi.n	80067d2 <__ieee754_sqrt+0x7a>
 80067ca:	0fd1      	lsrs	r1, r2, #31
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	185b      	adds	r3, r3, r1
 80067d0:	0052      	lsls	r2, r2, #1
 80067d2:	1061      	asrs	r1, r4, #1
 80067d4:	2400      	movs	r4, #0
 80067d6:	9103      	str	r1, [sp, #12]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	0fd1      	lsrs	r1, r2, #31
 80067dc:	185b      	adds	r3, r3, r1
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	2516      	movs	r5, #22
 80067e2:	0020      	movs	r0, r4
 80067e4:	0052      	lsls	r2, r2, #1
 80067e6:	0389      	lsls	r1, r1, #14
 80067e8:	1846      	adds	r6, r0, r1
 80067ea:	429e      	cmp	r6, r3
 80067ec:	dc02      	bgt.n	80067f4 <__ieee754_sqrt+0x9c>
 80067ee:	1870      	adds	r0, r6, r1
 80067f0:	1b9b      	subs	r3, r3, r6
 80067f2:	1864      	adds	r4, r4, r1
 80067f4:	0fd6      	lsrs	r6, r2, #31
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	3d01      	subs	r5, #1
 80067fa:	18f3      	adds	r3, r6, r3
 80067fc:	0052      	lsls	r2, r2, #1
 80067fe:	0849      	lsrs	r1, r1, #1
 8006800:	2d00      	cmp	r5, #0
 8006802:	d1f1      	bne.n	80067e8 <__ieee754_sqrt+0x90>
 8006804:	2620      	movs	r6, #32
 8006806:	2780      	movs	r7, #128	; 0x80
 8006808:	0029      	movs	r1, r5
 800680a:	9601      	str	r6, [sp, #4]
 800680c:	063f      	lsls	r7, r7, #24
 800680e:	197e      	adds	r6, r7, r5
 8006810:	46b4      	mov	ip, r6
 8006812:	4283      	cmp	r3, r0
 8006814:	dc02      	bgt.n	800681c <__ieee754_sqrt+0xc4>
 8006816:	d114      	bne.n	8006842 <__ieee754_sqrt+0xea>
 8006818:	4296      	cmp	r6, r2
 800681a:	d812      	bhi.n	8006842 <__ieee754_sqrt+0xea>
 800681c:	4665      	mov	r5, ip
 800681e:	4666      	mov	r6, ip
 8006820:	19ed      	adds	r5, r5, r7
 8006822:	9002      	str	r0, [sp, #8]
 8006824:	2e00      	cmp	r6, #0
 8006826:	da03      	bge.n	8006830 <__ieee754_sqrt+0xd8>
 8006828:	43ee      	mvns	r6, r5
 800682a:	0ff6      	lsrs	r6, r6, #31
 800682c:	1986      	adds	r6, r0, r6
 800682e:	9602      	str	r6, [sp, #8]
 8006830:	1a1b      	subs	r3, r3, r0
 8006832:	4562      	cmp	r2, ip
 8006834:	4180      	sbcs	r0, r0
 8006836:	4240      	negs	r0, r0
 8006838:	1a1b      	subs	r3, r3, r0
 800683a:	4660      	mov	r0, ip
 800683c:	1a12      	subs	r2, r2, r0
 800683e:	9802      	ldr	r0, [sp, #8]
 8006840:	19c9      	adds	r1, r1, r7
 8006842:	0fd6      	lsrs	r6, r2, #31
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	199b      	adds	r3, r3, r6
 8006848:	9e01      	ldr	r6, [sp, #4]
 800684a:	0052      	lsls	r2, r2, #1
 800684c:	3e01      	subs	r6, #1
 800684e:	087f      	lsrs	r7, r7, #1
 8006850:	9601      	str	r6, [sp, #4]
 8006852:	2e00      	cmp	r6, #0
 8006854:	d1db      	bne.n	800680e <__ieee754_sqrt+0xb6>
 8006856:	4313      	orrs	r3, r2
 8006858:	d003      	beq.n	8006862 <__ieee754_sqrt+0x10a>
 800685a:	1c4b      	adds	r3, r1, #1
 800685c:	d127      	bne.n	80068ae <__ieee754_sqrt+0x156>
 800685e:	0031      	movs	r1, r6
 8006860:	3401      	adds	r4, #1
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <__ieee754_sqrt+0x168>)
 8006864:	1060      	asrs	r0, r4, #1
 8006866:	18c0      	adds	r0, r0, r3
 8006868:	0849      	lsrs	r1, r1, #1
 800686a:	07e3      	lsls	r3, r4, #31
 800686c:	d502      	bpl.n	8006874 <__ieee754_sqrt+0x11c>
 800686e:	2380      	movs	r3, #128	; 0x80
 8006870:	061b      	lsls	r3, r3, #24
 8006872:	4319      	orrs	r1, r3
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	000d      	movs	r5, r1
 8006878:	051c      	lsls	r4, r3, #20
 800687a:	1823      	adds	r3, r4, r0
 800687c:	001c      	movs	r4, r3
 800687e:	e782      	b.n	8006786 <__ieee754_sqrt+0x2e>
 8006880:	0ad3      	lsrs	r3, r2, #11
 8006882:	3815      	subs	r0, #21
 8006884:	0552      	lsls	r2, r2, #21
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0fa      	beq.n	8006880 <__ieee754_sqrt+0x128>
 800688a:	2480      	movs	r4, #128	; 0x80
 800688c:	0364      	lsls	r4, r4, #13
 800688e:	4223      	tst	r3, r4
 8006890:	d00a      	beq.n	80068a8 <__ieee754_sqrt+0x150>
 8006892:	2420      	movs	r4, #32
 8006894:	0016      	movs	r6, r2
 8006896:	1a64      	subs	r4, r4, r1
 8006898:	40e6      	lsrs	r6, r4
 800689a:	1e4d      	subs	r5, r1, #1
 800689c:	408a      	lsls	r2, r1
 800689e:	4333      	orrs	r3, r6
 80068a0:	1b41      	subs	r1, r0, r5
 80068a2:	e789      	b.n	80067b8 <__ieee754_sqrt+0x60>
 80068a4:	2000      	movs	r0, #0
 80068a6:	e7ee      	b.n	8006886 <__ieee754_sqrt+0x12e>
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	3101      	adds	r1, #1
 80068ac:	e7ef      	b.n	800688e <__ieee754_sqrt+0x136>
 80068ae:	2301      	movs	r3, #1
 80068b0:	3101      	adds	r1, #1
 80068b2:	4399      	bics	r1, r3
 80068b4:	e7d5      	b.n	8006862 <__ieee754_sqrt+0x10a>
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	fffffc01 	.word	0xfffffc01
 80068c0:	3fe00000 	.word	0x3fe00000

080068c4 <with_errno>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	000d      	movs	r5, r1
 80068c8:	0016      	movs	r6, r2
 80068ca:	0004      	movs	r4, r0
 80068cc:	f7fe fd30 	bl	8005330 <__errno>
 80068d0:	0029      	movs	r1, r5
 80068d2:	6006      	str	r6, [r0, #0]
 80068d4:	0020      	movs	r0, r4
 80068d6:	bd70      	pop	{r4, r5, r6, pc}

080068d8 <xflow>:
 80068d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068da:	0015      	movs	r5, r2
 80068dc:	001c      	movs	r4, r3
 80068de:	2800      	cmp	r0, #0
 80068e0:	d010      	beq.n	8006904 <xflow+0x2c>
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	0010      	movs	r0, r2
 80068e6:	061b      	lsls	r3, r3, #24
 80068e8:	18e1      	adds	r1, r4, r3
 80068ea:	9000      	str	r0, [sp, #0]
 80068ec:	9101      	str	r1, [sp, #4]
 80068ee:	9a00      	ldr	r2, [sp, #0]
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	0028      	movs	r0, r5
 80068f4:	0021      	movs	r1, r4
 80068f6:	f7fa fc19 	bl	800112c <__aeabi_dmul>
 80068fa:	2222      	movs	r2, #34	; 0x22
 80068fc:	f7ff ffe2 	bl	80068c4 <with_errno>
 8006900:	b003      	add	sp, #12
 8006902:	bd30      	pop	{r4, r5, pc}
 8006904:	0010      	movs	r0, r2
 8006906:	0019      	movs	r1, r3
 8006908:	e7ef      	b.n	80068ea <xflow+0x12>

0800690a <__math_uflow>:
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	b510      	push	{r4, lr}
 800690e:	2200      	movs	r2, #0
 8006910:	055b      	lsls	r3, r3, #21
 8006912:	f7ff ffe1 	bl	80068d8 <xflow>
 8006916:	bd10      	pop	{r4, pc}

08006918 <__math_oflow>:
 8006918:	23e0      	movs	r3, #224	; 0xe0
 800691a:	b510      	push	{r4, lr}
 800691c:	2200      	movs	r2, #0
 800691e:	05db      	lsls	r3, r3, #23
 8006920:	f7ff ffda 	bl	80068d8 <xflow>
 8006924:	bd10      	pop	{r4, pc}

08006926 <fabs>:
 8006926:	004b      	lsls	r3, r1, #1
 8006928:	0859      	lsrs	r1, r3, #1
 800692a:	4770      	bx	lr

0800692c <finite>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <finite+0xc>)
 800692e:	0048      	lsls	r0, r1, #1
 8006930:	0840      	lsrs	r0, r0, #1
 8006932:	18c0      	adds	r0, r0, r3
 8006934:	0fc0      	lsrs	r0, r0, #31
 8006936:	4770      	bx	lr
 8006938:	80100000 	.word	0x80100000

0800693c <scalbn>:
 800693c:	004b      	lsls	r3, r1, #1
 800693e:	b570      	push	{r4, r5, r6, lr}
 8006940:	0d5b      	lsrs	r3, r3, #21
 8006942:	0014      	movs	r4, r2
 8006944:	000a      	movs	r2, r1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <scalbn+0x2a>
 800694a:	004b      	lsls	r3, r1, #1
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	4303      	orrs	r3, r0
 8006950:	d010      	beq.n	8006974 <scalbn+0x38>
 8006952:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <scalbn+0xb4>)
 8006954:	2200      	movs	r2, #0
 8006956:	f7fa fbe9 	bl	800112c <__aeabi_dmul>
 800695a:	4b26      	ldr	r3, [pc, #152]	; (80069f4 <scalbn+0xb8>)
 800695c:	429c      	cmp	r4, r3
 800695e:	da0a      	bge.n	8006976 <scalbn+0x3a>
 8006960:	4a25      	ldr	r2, [pc, #148]	; (80069f8 <scalbn+0xbc>)
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <scalbn+0xc0>)
 8006964:	e019      	b.n	800699a <scalbn+0x5e>
 8006966:	4d26      	ldr	r5, [pc, #152]	; (8006a00 <scalbn+0xc4>)
 8006968:	42ab      	cmp	r3, r5
 800696a:	d108      	bne.n	800697e <scalbn+0x42>
 800696c:	0002      	movs	r2, r0
 800696e:	000b      	movs	r3, r1
 8006970:	f7f9 fc9e 	bl	80002b0 <__aeabi_dadd>
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	000a      	movs	r2, r1
 8006978:	004b      	lsls	r3, r1, #1
 800697a:	0d5b      	lsrs	r3, r3, #21
 800697c:	3b36      	subs	r3, #54	; 0x36
 800697e:	4d21      	ldr	r5, [pc, #132]	; (8006a04 <scalbn+0xc8>)
 8006980:	18e3      	adds	r3, r4, r3
 8006982:	42ab      	cmp	r3, r5
 8006984:	dd0c      	ble.n	80069a0 <scalbn+0x64>
 8006986:	4c20      	ldr	r4, [pc, #128]	; (8006a08 <scalbn+0xcc>)
 8006988:	4d20      	ldr	r5, [pc, #128]	; (8006a0c <scalbn+0xd0>)
 800698a:	2900      	cmp	r1, #0
 800698c:	da01      	bge.n	8006992 <scalbn+0x56>
 800698e:	4c1e      	ldr	r4, [pc, #120]	; (8006a08 <scalbn+0xcc>)
 8006990:	4d1f      	ldr	r5, [pc, #124]	; (8006a10 <scalbn+0xd4>)
 8006992:	0020      	movs	r0, r4
 8006994:	0029      	movs	r1, r5
 8006996:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <scalbn+0xcc>)
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <scalbn+0xd0>)
 800699a:	f7fa fbc7 	bl	800112c <__aeabi_dmul>
 800699e:	e7e9      	b.n	8006974 <scalbn+0x38>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dd05      	ble.n	80069b0 <scalbn+0x74>
 80069a4:	4c1b      	ldr	r4, [pc, #108]	; (8006a14 <scalbn+0xd8>)
 80069a6:	051b      	lsls	r3, r3, #20
 80069a8:	4022      	ands	r2, r4
 80069aa:	431a      	orrs	r2, r3
 80069ac:	0011      	movs	r1, r2
 80069ae:	e7e1      	b.n	8006974 <scalbn+0x38>
 80069b0:	001d      	movs	r5, r3
 80069b2:	3535      	adds	r5, #53	; 0x35
 80069b4:	da13      	bge.n	80069de <scalbn+0xa2>
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <scalbn+0xdc>)
 80069b8:	0fcb      	lsrs	r3, r1, #31
 80069ba:	4294      	cmp	r4, r2
 80069bc:	dd08      	ble.n	80069d0 <scalbn+0x94>
 80069be:	4812      	ldr	r0, [pc, #72]	; (8006a08 <scalbn+0xcc>)
 80069c0:	4912      	ldr	r1, [pc, #72]	; (8006a0c <scalbn+0xd0>)
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <scalbn+0x8e>
 80069c6:	4810      	ldr	r0, [pc, #64]	; (8006a08 <scalbn+0xcc>)
 80069c8:	4911      	ldr	r1, [pc, #68]	; (8006a10 <scalbn+0xd4>)
 80069ca:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <scalbn+0xcc>)
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <scalbn+0xd0>)
 80069ce:	e7e4      	b.n	800699a <scalbn+0x5e>
 80069d0:	4809      	ldr	r0, [pc, #36]	; (80069f8 <scalbn+0xbc>)
 80069d2:	490a      	ldr	r1, [pc, #40]	; (80069fc <scalbn+0xc0>)
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0c3      	beq.n	8006960 <scalbn+0x24>
 80069d8:	4807      	ldr	r0, [pc, #28]	; (80069f8 <scalbn+0xbc>)
 80069da:	4910      	ldr	r1, [pc, #64]	; (8006a1c <scalbn+0xe0>)
 80069dc:	e7c0      	b.n	8006960 <scalbn+0x24>
 80069de:	4c0d      	ldr	r4, [pc, #52]	; (8006a14 <scalbn+0xd8>)
 80069e0:	3336      	adds	r3, #54	; 0x36
 80069e2:	4022      	ands	r2, r4
 80069e4:	051b      	lsls	r3, r3, #20
 80069e6:	4313      	orrs	r3, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	2200      	movs	r2, #0
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <scalbn+0xe4>)
 80069ee:	e7d4      	b.n	800699a <scalbn+0x5e>
 80069f0:	43500000 	.word	0x43500000
 80069f4:	ffff3cb0 	.word	0xffff3cb0
 80069f8:	c2f8f359 	.word	0xc2f8f359
 80069fc:	01a56e1f 	.word	0x01a56e1f
 8006a00:	000007ff 	.word	0x000007ff
 8006a04:	000007fe 	.word	0x000007fe
 8006a08:	8800759c 	.word	0x8800759c
 8006a0c:	7e37e43c 	.word	0x7e37e43c
 8006a10:	fe37e43c 	.word	0xfe37e43c
 8006a14:	800fffff 	.word	0x800fffff
 8006a18:	0000c350 	.word	0x0000c350
 8006a1c:	81a56e1f 	.word	0x81a56e1f
 8006a20:	3c900000 	.word	0x3c900000

08006a24 <_init>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr

08006a30 <_fini>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr
